/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.jesper.seckill.service;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.jesper.seckill.mapper.GoodsMapper;
import com.jesper.seckill.service.GoodsService;
import com.jesper.seckill.vo.GoodsVo;
import java.util.LinkedList;
import java.util.List;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class GoodsService_SSTest extends GoodsService_SSTest_scaffolding {

  @Test(timeout = 4000)
  public void test_getGoodsVoByGoodsId_0()  throws Throwable  {
      //caseID:bc66ad9e00561a2081800196297622e5
      GoodsService goodsService0 = new GoodsService();

      //prepare data for goodsMapper0
      GoodsVo goodsVo0 = mock(GoodsVo.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      GoodsMapper goodsMapper0 = mock(GoodsMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(goodsVo0).when(goodsMapper0).getGoodsVoByGoodsId(anyLong());

      //invoke method for goodsService0
      PrivateAccess.setVariable((Class<?>) GoodsService.class, goodsService0, "goodsMapper", (Object) goodsMapper0);
      GoodsVo goodsVo1 = goodsService0.getGoodsVoByGoodsId(1883L);
      assertNull(goodsVo1.getVersion());
  }
  @Test(timeout = 4000)
  public void test_listGoodsVo_1()  throws Throwable  {
      //caseID:7c2485cead64fde2345230dc8ae5cefd
      GoodsService goodsService0 = new GoodsService();
      LinkedList<GoodsVo> linkedList0 = new LinkedList<GoodsVo>();
      Integer integer0 = new Integer(7);
      Long long0 = new Long(0L);
      GoodsVo goodsVo0 = mock(GoodsVo.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0, long0, long0, long0, long0, long0).when(goodsVo0).getId();
      doReturn(integer0).when(goodsVo0).getVersion();
      boolean boolean0 = goodsService0.reduceStock(goodsVo0);
      GoodsMapper goodsMapper0 = mock(GoodsMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1863).when(goodsMapper0).getVersionByGoodsId(anyLong());
      doReturn(linkedList0).when(goodsMapper0).listGoodsVo();
      doReturn(485).when(goodsMapper0).reduceStockByVersion(any(com.jesper.seckill.bean.SeckillGoods.class));
      PrivateAccess.setVariable((Class<?>) GoodsService.class, goodsService0, "goodsMapper", (Object) goodsMapper0);
      GoodsVo goodsVo1 = mock(GoodsVo.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0, long0).when(goodsVo1).getId();
      doReturn(integer0).when(goodsVo1).getVersion();
      boolean boolean1 = goodsService0.reduceStock(goodsVo1);
      assertFalse(boolean1 == boolean0);
      
      List<GoodsVo> list0 = goodsService0.listGoodsVo();
      assertTrue(list0.isEmpty());
  }}
