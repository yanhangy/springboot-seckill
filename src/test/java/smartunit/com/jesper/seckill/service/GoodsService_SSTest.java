/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.jesper.seckill.service;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.jesper.seckill.mapper.GoodsMapper;
import com.jesper.seckill.service.GoodsService;
import com.jesper.seckill.vo.GoodsVo;
import java.util.List;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class GoodsService_SSTest extends GoodsService_SSTest_scaffolding {
// allCoveredLines:[17, 31, 40, 49, 50, 51, 52, 53, 55, 57, 58, 61, 62, 63, 64, 66]

  @Test(timeout = 4000)
  public void test_getGoodsVoByGoodsId_0()  throws Throwable  {
      //caseID:44de50f0c561b8be348c9f7774c45c1e
      //CoveredLines: [17, 40]
      //Input_0_long: 1168L
      //Assert: assertNull(method_result);
      
      GoodsService goodsService0 = new GoodsService();
      //mock goodsMapper0
      GoodsMapper goodsMapper0 = mock(GoodsMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) GoodsService.class, goodsService0, "goodsMapper", (Object) goodsMapper0);
      
      //Call method: getGoodsVoByGoodsId
      GoodsVo goodsVo0 = goodsService0.getGoodsVoByGoodsId(1168L);
      
      //Test Result Assert
      assertNull(goodsVo0);
  }

  @Test(timeout = 4000)
  public void test_listGoodsVo_1()  throws Throwable  {
      //caseID:2801dfff3c3541c58b67b9b53f83dc8b
      //CoveredLines: [17, 31]
      //Assert: assertNull(method_result);
      
      GoodsService goodsService0 = new GoodsService();
      //mock goodsMapper0
      GoodsMapper goodsMapper0 = mock(GoodsMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) GoodsService.class, goodsService0, "goodsMapper", (Object) goodsMapper0);
      
      //Call method: listGoodsVo
      List<GoodsVo> list0 = goodsService0.listGoodsVo();
      
      //Test Result Assert
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test_reduceStock_2()  throws Throwable  {
      //caseID:61cc0f2b826cac391bfe1f852b45de5b
      //CoveredLines: [17, 49, 50, 51, 52, 53, 55, 57, 58, 61, 62, 63, 66]
      //Input_0_GoodsVo: {getVersion=1, getId=1 1}
      //Assert: assertTrue(method_result);
      
      GoodsService goodsService0 = new GoodsService();
      //mock goodsMapper0
      GoodsMapper goodsMapper0 = mock(GoodsMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1).when(goodsMapper0).getVersionByGoodsId(anyLong());
      doReturn(1).when(goodsMapper0).reduceStockByVersion(any(com.jesper.seckill.bean.SeckillGoods.class));
      PrivateAccess.setVariable((Class<?>) GoodsService.class, goodsService0, "goodsMapper", (Object) goodsMapper0);
      Integer integer0 = new Integer(1);
      Long long0 = new Long(1);
      //mock goodsVo0
      GoodsVo goodsVo0 = mock(GoodsVo.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0, long0).when(goodsVo0).getId();
      doReturn(integer0).when(goodsVo0).getVersion();
      
      //Call method: reduceStock
      boolean boolean0 = goodsService0.reduceStock(goodsVo0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test_reduceStock_3()  throws Throwable  {
      //caseID:5910bfc937ab70766eeaf39d3f1ac1b8
      //CoveredLines: [17, 49, 50, 51, 52, 53, 55, 57, 58, 61, 62, 64, 66]
      //Input_0_GoodsVo: {getVersion=0, getId=0 0}
      //Assert: assertFalse(method_result);
      
      GoodsService goodsService0 = new GoodsService();
      //mock goodsMapper0
      GoodsMapper goodsMapper0 = mock(GoodsMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(0).when(goodsMapper0).getVersionByGoodsId(anyLong());
      doReturn(0).when(goodsMapper0).reduceStockByVersion(any(com.jesper.seckill.bean.SeckillGoods.class));
      PrivateAccess.setVariable((Class<?>) GoodsService.class, goodsService0, "goodsMapper", (Object) goodsMapper0);
      Integer integer0 = new Integer(0);
      Long long0 = new Long(0);
      //mock goodsVo0
      GoodsVo goodsVo0 = mock(GoodsVo.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0, long0).when(goodsVo0).getId();
      doReturn(integer0).when(goodsVo0).getVersion();
      
      //Call method: reduceStock
      boolean boolean0 = goodsService0.reduceStock(goodsVo0);
      
      //Test Result Assert
      assertFalse(boolean0);
  }
}
