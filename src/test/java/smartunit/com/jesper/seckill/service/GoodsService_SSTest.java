/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.jesper.seckill.service;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.jesper.seckill.mapper.GoodsMapper;
import com.jesper.seckill.service.GoodsService;
import com.jesper.seckill.vo.GoodsVo;
import java.util.LinkedList;
import java.util.List;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class GoodsService_SSTest extends GoodsService_SSTest_scaffolding {

  @Test(timeout = 4000)
  public void test_listGoodsVo_0()  throws Throwable  {
      //caseID:9fdd01f2837c842bd199c1a0b31a9a50
      GoodsService goodsService0 = new GoodsService();

      //prepare data for goodsMapper0
      LinkedList<GoodsVo> linkedList0 = new LinkedList<GoodsVo>();
      GoodsMapper goodsMapper0 = mock(GoodsMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(goodsMapper0).listGoodsVo();

      //invoke method for goodsService0
      PrivateAccess.setVariable((Class<?>) GoodsService.class, goodsService0, "goodsMapper", (Object) goodsMapper0);
      List<GoodsVo> list0 = goodsService0.listGoodsVo();
      assertEquals(0, list0.size());
  }
  @Test(timeout = 4000)
  public void test_getGoodsVoByGoodsId_1()  throws Throwable  {
      //caseID:9a8641d5e1257f3a24268bfdaf487d1f
      GoodsService goodsService0 = new GoodsService();

      //prepare data for goodsMapper0
      GoodsVo goodsVo0 = mock(GoodsVo.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      GoodsMapper goodsMapper0 = mock(GoodsMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(goodsVo0).when(goodsMapper0).getGoodsVoByGoodsId(anyLong());

      //invoke method for goodsService0
      PrivateAccess.setVariable((Class<?>) GoodsService.class, goodsService0, "goodsMapper", (Object) goodsMapper0);
      GoodsVo goodsVo1 = goodsService0.getGoodsVoByGoodsId(2442L);
      assertNull(goodsVo1.getGoodsDetail());
  }
  @Test(timeout = 4000)
  public void test_reduceStock_2()  throws Throwable  {
      //caseID:f996a21901cd7240f1fe6cc9e87f0dc6
      GoodsService goodsService0 = new GoodsService();

      //prepare data for goodsVo0
      Integer integer0 = new Integer(224);
      Long long0 = new Long(1910L);
      GoodsVo goodsVo0 = mock(GoodsVo.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(goodsVo0).getId();
      doReturn(integer0).when(goodsVo0).getVersion();
      boolean boolean0 = goodsService0.reduceStock(goodsVo0);
      assertFalse(boolean0);
  }
  @Test(timeout = 4000)
  public void test_reduceStock_3()  throws Throwable  {
      //caseID:ce90a61b1136a82b35b889b9bab97656
      GoodsService goodsService0 = new GoodsService();

      //prepare data for goodsMapper0
      GoodsMapper goodsMapper0 = mock(GoodsMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(0, 63, (-1), 224, 880).when(goodsMapper0).getVersionByGoodsId(anyLong());
      doReturn(0, 127, (-1), (-1), 1848).when(goodsMapper0).reduceStockByVersion(any(com.jesper.seckill.bean.SeckillGoods.class));

      //invoke method for goodsService0
      PrivateAccess.setVariable((Class<?>) GoodsService.class, goodsService0, "goodsMapper", (Object) goodsMapper0);

      //prepare data for goodsVo0
      Integer integer0 = new Integer(0);
      Long long0 = new Long(0);
      GoodsVo goodsVo0 = mock(GoodsVo.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0, long0, long0, long0, long0, long0).when(goodsVo0).getId();
      doReturn(integer0).when(goodsVo0).getVersion();
      boolean boolean0 = goodsService0.reduceStock(goodsVo0);
      assertTrue(boolean0);
  }}
