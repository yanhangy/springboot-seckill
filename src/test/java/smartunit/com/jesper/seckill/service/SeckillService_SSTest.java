/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.jesper.seckill.service;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.jesper.seckill.bean.OrderInfo;
import com.jesper.seckill.bean.SeckillOrder;
import com.jesper.seckill.bean.User;
import com.jesper.seckill.redis.RedisService;
import com.jesper.seckill.service.GoodsService;
import com.jesper.seckill.service.OrderService;
import com.jesper.seckill.service.SeckillService;
import com.jesper.seckill.vo.GoodsVo;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class SeckillService_SSTest extends SeckillService_SSTest_scaffolding {

  @Test(timeout = 4000)
  public void test_getGoodsOver_0()  throws Throwable  {
      //caseID:23e9f47525a4b570ed44ba35e4b71827
      SeckillService seckillService0 = new SeckillService();

      //prepare data for redisService0
      RedisService redisService0 = mock(RedisService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(true).when(redisService0).exists(any(com.jesper.seckill.redis.KeyPrefix.class) , anyString());

      //invoke method for seckillService0
      PrivateAccess.setVariable((Class<?>) SeckillService.class, seckillService0, "redisService", (Object) redisService0);
      Object object0 = PrivateAccess.callMethod((Class<SeckillService>) SeckillService.class, seckillService0, "getGoodsOver", (Object) 0L, (Class<?>) long.class);
      assertEquals(true, object0);
  }
  @Test(timeout = 4000)
  public void test_seckill_1()  throws Throwable  {
      //caseID:7a25d96a3d5e2b458d70fa0eca7cd9a3
      SeckillService seckillService0 = new SeckillService();

      //prepare data for goodsService0
      GoodsService goodsService0 = mock(GoodsService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(true).when(goodsService0).reduceStock(any(com.jesper.seckill.vo.GoodsVo.class));

      //prepare data for orderService0
      OrderInfo orderInfo0 = mock(OrderInfo.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("DISCARD").when(orderInfo0).toString();
      OrderService orderService0 = mock(OrderService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(orderInfo0).when(orderService0).createOrder(any(com.jesper.seckill.bean.User.class) , any(com.jesper.seckill.vo.GoodsVo.class));

      //invoke method for seckillService0
      PrivateAccess.setVariable((Class<?>) SeckillService.class, seckillService0, "orderService", (Object) orderService0);

      //invoke method for seckillService0
      PrivateAccess.setVariable((Class<?>) SeckillService.class, seckillService0, "goodsService", (Object) goodsService0);
      User user0 = mock(User.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      GoodsVo goodsVo0 = mock(GoodsVo.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      OrderInfo orderInfo1 = seckillService0.seckill(user0, goodsVo0);
      assertNull(orderInfo1.getGoodsId());
  }
  @Test(timeout = 4000)
  public void test_getSeckillResult_2()  throws Throwable  {
      //caseID:fb7f9949c02c6b438294eefffa1a7149
      SeckillService seckillService0 = new SeckillService();

      //prepare data for orderService0
      Long long0 = new Long(0L);
      SeckillOrder seckillOrder0 = mock(SeckillOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(seckillOrder0).getOrderId();
      OrderService orderService0 = mock(OrderService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(seckillOrder0).when(orderService0).getOrderByUserIdGoodsId(anyLong() , anyLong());

      //invoke method for seckillService0
      PrivateAccess.setVariable((Class<?>) SeckillService.class, seckillService0, "orderService", (Object) orderService0);
      long long1 = seckillService0.getSeckillResult(0L, 1000L);
      assertEquals(0L, long1);
  }
  @Test(timeout = 4000)
  public void test_seckill_3()  throws Throwable  {
      //caseID:d3474bed970e1c9efe3474bef6287d40
      SeckillService seckillService0 = new SeckillService();

      //prepare data for redisService0
      Boolean boolean0 = new Boolean(false);
      RedisService redisService0 = mock(RedisService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(boolean0).when(redisService0).set(any(com.jesper.seckill.redis.KeyPrefix.class) , anyString() , any());

      //prepare data for goodsService0
      GoodsService goodsService0 = mock(GoodsService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(false).when(goodsService0).reduceStock(any(com.jesper.seckill.vo.GoodsVo.class));

      //invoke method for seckillService0
      PrivateAccess.setVariable((Class<?>) SeckillService.class, seckillService0, "goodsService", (Object) goodsService0);

      //invoke method for seckillService0
      PrivateAccess.setVariable((Class<?>) SeckillService.class, seckillService0, "redisService", (Object) redisService0);
      User user0 = mock(User.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());

      //prepare data for goodsVo0
      Long long0 = new Long(191L);
      GoodsVo goodsVo0 = mock(GoodsVo.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(goodsVo0).getId();
      OrderInfo orderInfo0 = seckillService0.seckill(user0, goodsVo0);
      assertNull(orderInfo0);
  }}
