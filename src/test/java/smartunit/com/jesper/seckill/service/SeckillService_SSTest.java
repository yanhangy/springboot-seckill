/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.jesper.seckill.service;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.jesper.seckill.bean.OrderInfo;
import com.jesper.seckill.bean.SeckillOrder;
import com.jesper.seckill.bean.User;
import com.jesper.seckill.redis.RedisService;
import com.jesper.seckill.service.GoodsService;
import com.jesper.seckill.service.OrderService;
import com.jesper.seckill.service.SeckillService;
import com.jesper.seckill.vo.GoodsVo;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class SeckillService_SSTest extends SeckillService_SSTest_scaffolding {
// allCoveredLines:[17, 32, 33, 35, 37, 38, 43, 44, 45, 47, 48, 51, 57, 58, 61]

  @Test(timeout = 4000)
  public void test_getSeckillResult_0()  throws Throwable  {
      //caseID:79f1cee7ddde8a260d5ddf5a9db3b49e
      //CoveredLines: [17, 43, 44, 45]
      //Input_0_long: 2226L
      //Input_1_long: 87L
      //Assert: assertEquals(2548L, method_result);
      
      SeckillService seckillService0 = new SeckillService();
      Long long0 = new Long(2548L);
      //mock seckillOrder0
      SeckillOrder seckillOrder0 = mock(SeckillOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(seckillOrder0).getOrderId();
      //mock orderService0
      OrderService orderService0 = mock(OrderService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(seckillOrder0).when(orderService0).getOrderByUserIdGoodsId(anyLong() , anyLong());
      PrivateAccess.setVariable((Class<?>) SeckillService.class, seckillService0, "orderService", (Object) orderService0);
      
      //Call method: getSeckillResult
      long long1 = seckillService0.getSeckillResult(2226L, 87L);
      
      //Test Result Assert
      assertEquals(2548L, long1);
  }

  @Test(timeout = 4000)
  public void test_getSeckillResult_1()  throws Throwable  {
      //caseID:b4aafc81c1a639e982c1347b0f472854
      //CoveredLines: [17, 43, 44, 47, 48, 51, 61]
      //Input_0_long: 1L
      //Input_1_long: 0L
      //Assert: assertEquals(0L, method_result);
      
      SeckillService seckillService0 = new SeckillService();
      //mock redisService0
      RedisService redisService0 = mock(RedisService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock orderService0
      OrderService orderService0 = mock(OrderService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) SeckillService.class, seckillService0, "orderService", (Object) orderService0);
      PrivateAccess.setVariable((Class<?>) SeckillService.class, seckillService0, "redisService", (Object) redisService0);
      
      //Call method: getSeckillResult
      long long0 = seckillService0.getSeckillResult(1L, 0L);
      
      //Test Result Assert
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test_seckill_2()  throws Throwable  {
      //caseID:85aa30d2bf52b351bda8833257ba579b
      //CoveredLines: [17, 32, 33, 35]
      //Input_0_User: {}
      //Input_1_GoodsVo: {}
      //Assert: assertNull(method_result.getDeliveryAddrId());
      
      SeckillService seckillService0 = new SeckillService();
      //mock goodsService0
      GoodsService goodsService0 = mock(GoodsService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(true).when(goodsService0).reduceStock(any(com.jesper.seckill.vo.GoodsVo.class));
      //mock orderInfo0
      OrderInfo orderInfo0 = mock(OrderInfo.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("CkRZ<#:D\"zVLSGe").when(orderInfo0).toString();
      //mock orderService0
      OrderService orderService0 = mock(OrderService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(orderInfo0).when(orderService0).createOrder(any(com.jesper.seckill.bean.User.class) , any(com.jesper.seckill.vo.GoodsVo.class));
      PrivateAccess.setVariable((Class<?>) SeckillService.class, seckillService0, "orderService", (Object) orderService0);
      PrivateAccess.setVariable((Class<?>) SeckillService.class, seckillService0, "goodsService", (Object) goodsService0);
      //mock user0
      User user0 = mock(User.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock goodsVo0
      GoodsVo goodsVo0 = mock(GoodsVo.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: seckill
      OrderInfo orderInfo1 = seckillService0.seckill(user0, goodsVo0);
      
      //Test Result Assert
      assertNull(orderInfo1.getDeliveryAddrId());
  }

  @Test(timeout = 4000)
  public void test_seckill_3()  throws Throwable  {
      //caseID:e8e4950aa4fff82d7906a0a6dfabf4d7
      //CoveredLines: [17, 32, 33, 37, 38, 57, 58]
      //Input_0_User: {}
      //Input_1_GoodsVo: {}
      //Assert: assertNull(method_result);
      
      SeckillService seckillService0 = new SeckillService();
      //mock redisService0
      RedisService redisService0 = mock(RedisService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock goodsService0
      GoodsService goodsService0 = mock(GoodsService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) SeckillService.class, seckillService0, "goodsService", (Object) goodsService0);
      PrivateAccess.setVariable((Class<?>) SeckillService.class, seckillService0, "redisService", (Object) redisService0);
      //mock user0
      User user0 = mock(User.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock goodsVo0
      GoodsVo goodsVo0 = mock(GoodsVo.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: seckill
      OrderInfo orderInfo0 = seckillService0.seckill(user0, goodsVo0);
      
      //Test Result Assert
      assertNull(orderInfo0);
  }
}
