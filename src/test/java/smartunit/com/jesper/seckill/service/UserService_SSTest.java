/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.jesper.seckill.service;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import static org.smartunit.runtime.SmartAssertions.*;
import com.jesper.seckill.bean.User;
import com.jesper.seckill.mapper.UserMapper;
import com.jesper.seckill.redis.RedisService;
import com.jesper.seckill.service.UserService;
import com.jesper.seckill.vo.LoginVo;
import javax.servlet.http.HttpServletResponse;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class UserService_SSTest extends UserService_SSTest_scaffolding {
// allCoveredLines:[23, 35, 36, 37, 40, 42, 43, 45, 53, 54, 55, 58, 59, 60, 61, 63, 64, 65, 66, 70, 71, 73, 74, 76, 77, 78, 81, 82, 83, 84, 85, 98, 99, 100, 101, 102, 103, 109, 110, 112, 114, 115, 117]

  @Test(timeout = 4000)
  public void test_getByToken_0()  throws Throwable  {
      //caseID:84b8a24ae48fd66df22f158cf3c99b13
      //CoveredLines: [23, 109, 110]
      //Input_0_HttpServletResponse: {}
      //Input_1_String: ""
      //Assert: assertNull(method_result);
      
      UserService userService0 = new UserService();
      //mock httpServletResponse0
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: getByToken
      User user0 = userService0.getByToken(httpServletResponse0, "");
      
      //Test Result Assert
      assertNull(user0);
  }

  @Test(timeout = 4000)
  public void test_getByToken_1()  throws Throwable  {
      //caseID:bb85fdca17e13b6a7d8435c93aec554e
      //CoveredLines: [23, 109, 112, 114, 117]
      //Input_0_HttpServletResponse: {}
      //Input_1_String: "4}[YH -/W0SRRbF}!K"
      //Assert: assertNull(method_result);
      
      UserService userService0 = new UserService();
      //mock redisService0
      RedisService redisService0 = mock(RedisService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) UserService.class, userService0, "redisService", (Object) redisService0);
      //mock httpServletResponse0
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: getByToken
      User user0 = userService0.getByToken(httpServletResponse0, "4}[YH -/W0SRRbF}!K");
      
      //Test Result Assert
      assertNull(user0);
  }

  @Test(timeout = 4000)
  public void test_getByToken_2()  throws Throwable  {
      //caseID:856a700056ffd2a4a491a57271a6b27a
      //CoveredLines: [23, 98, 99, 100, 101, 102, 103, 109, 112, 114, 115, 117]
      //Input_0_HttpServletResponse: {}
      //Input_1_String: "BC`fT!)%/'"
      //Assert: assertNotNull(method_result);
      //Assert: assertNull(method_result.getPassword());
      
      UserService userService0 = new UserService();
      //mock user0
      User user0 = mock(User.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock redisService0
      RedisService redisService0 = mock(RedisService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(user0).when(redisService0).get(any(com.jesper.seckill.redis.KeyPrefix.class) , anyString() , any(java.lang.Class.class));
      PrivateAccess.setVariable((Class<?>) UserService.class, userService0, "redisService", (Object) redisService0);
      //mock httpServletResponse0
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: getByToken
      User user1 = userService0.getByToken(httpServletResponse0, "BC`fT!)%/'");
      
      //Test Result Assert
      assertNotNull(user1);
      
      //Test Result Assert
      assertNull(user1.getPassword());
  }

  @Test(timeout = 4000)
  public void test_login_3()  throws Throwable  {
      //caseID:7a3d94d8dc451da088d8bcf816666578
      //CoveredLines: [23, 70, 71]
      //Input_0_HttpServletResponse: {}
      //Input_1_LoginVo: null
      
      UserService userService0 = new UserService();
      //mock httpServletResponse0
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: login
      // Undeclared exception!
      try { 
        userService0.login(httpServletResponse0, (LoginVo) null);
      } catch(Throwable e) {
         verifyException("com.jesper.seckill.service.UserService", e);
         assertEquals("com.jesper.seckill.exception.GlobalException", e.getClass().getName());
         assertEquals("CodeMsg [code=500100, msg=\u670D\u52A1\u7AEF\u5F02\u5E38]", e.getMessage());
      }
  }

  @Test(timeout = 4000)
  public void test_login_4()  throws Throwable  {
      //caseID:a90d70f55b8db704c3ea0a03b26956c2
      //CoveredLines: [23, 35, 36, 40, 42, 45, 70, 73, 74, 76, 77, 78]
      //Input_0_HttpServletResponse: {}
      //Input_1_LoginVo: {getPassword="token", getMobile="1"}
      
      UserService userService0 = new UserService();
      //mock userMapper0
      UserMapper userMapper0 = mock(UserMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock redisService0
      RedisService redisService0 = mock(RedisService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) UserService.class, userService0, "redisService", (Object) redisService0);
      PrivateAccess.setVariable((Class<?>) UserService.class, userService0, "userMapper", (Object) userMapper0);
      //mock httpServletResponse0
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock loginVo0
      LoginVo loginVo0 = mock(LoginVo.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("1").when(loginVo0).getMobile();
      doReturn("token").when(loginVo0).getPassword();
      
      //Call method: login
      // Undeclared exception!
      try { 
        userService0.login(httpServletResponse0, loginVo0);
      } catch(Throwable e) {
         verifyException("com.jesper.seckill.service.UserService", e);
         assertEquals("com.jesper.seckill.exception.GlobalException", e.getClass().getName());
         assertEquals("CodeMsg [code=500214, msg=\u624B\u673A\u53F7\u4E0D\u5B58\u5728]", e.getMessage());
      }
  }

  @Test(timeout = 4000)
  public void test_login_5()  throws Throwable  {
      //caseID:0be9a66e5cd22bca65023573875c0904
      //CoveredLines: [23, 35, 36, 37, 70, 73, 74, 76, 77, 81, 82, 83, 84, 85]
      //Input_0_HttpServletResponse: {}
      //Input_1_LoginVo: {getPassword="token", getMobile="2147483647"}
      
      UserService userService0 = new UserService();
      //mock user0
      User user0 = mock(User.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("token").when(user0).getPassword();
      doReturn("2147483647").when(user0).getSalt();
      doReturn("token").when(user0).toString();
      //mock redisService0
      RedisService redisService0 = mock(RedisService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(user0).when(redisService0).get(any(com.jesper.seckill.redis.KeyPrefix.class) , anyString() , any(java.lang.Class.class));
      PrivateAccess.setVariable((Class<?>) UserService.class, userService0, "redisService", (Object) redisService0);
      //mock httpServletResponse0
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock loginVo0
      LoginVo loginVo0 = mock(LoginVo.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("2147483647").when(loginVo0).getMobile();
      doReturn("token").when(loginVo0).getPassword();
      
      //Call method: login
      // Undeclared exception!
      try { 
        userService0.login(httpServletResponse0, loginVo0);
      } catch(Throwable e) {
         verifyException("com.jesper.seckill.service.UserService", e);
         assertEquals("com.jesper.seckill.exception.GlobalException", e.getClass().getName());
         assertEquals("CodeMsg [code=500215, msg=\u5BC6\u7801\u9519\u8BEF]", e.getMessage());
      }
  }

  @Test(timeout = 4000)
  public void test_updatePassword_6()  throws Throwable  {
      //caseID:4568ece8fd51b79f5302e91fd39789af
      //CoveredLines: [23, 35, 36, 40, 42, 45, 53, 54, 55]
      //Input_0_String: "/"
      //Input_1_long: 1L
      //Input_2_String: "/"
      
      UserService userService0 = new UserService();
      //mock userMapper0
      UserMapper userMapper0 = mock(UserMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((User) null).when(userMapper0).getById(anyLong());
      //mock redisService0
      RedisService redisService0 = mock(RedisService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((User) null).when(redisService0).get(any(com.jesper.seckill.redis.KeyPrefix.class) , anyString() , any(java.lang.Class.class));
      PrivateAccess.setVariable((Class<?>) UserService.class, userService0, "redisService", (Object) redisService0);
      PrivateAccess.setVariable((Class<?>) UserService.class, userService0, "userMapper", (Object) userMapper0);
      
      //Call method: updatePassword
      // Undeclared exception!
      try { 
        userService0.updatePassword("/", 1L, "/");
      } catch(Throwable e) {
         verifyException("com.jesper.seckill.service.UserService", e);
         assertEquals("com.jesper.seckill.exception.GlobalException", e.getClass().getName());
         assertEquals("CodeMsg [code=500214, msg=\u624B\u673A\u53F7\u4E0D\u5B58\u5728]", e.getMessage());
      }
  }

  @Test(timeout = 4000)
  public void test_updatePassword_7()  throws Throwable  {
      //caseID:6dcbbe58c30cede079717560e9e6b9bc
      //CoveredLines: [23, 35, 36, 40, 42, 43, 45, 53, 54, 58, 59, 60]
      //Input_0_String: "com.jesper.seckill.service.UserService"
      //Input_1_long: 539L
      //Input_2_String: "com.alibaba.druid.support.logging.Log4jImpl"
      
      UserService userService0 = new UserService();
      //mock user0
      User user0 = mock(User.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("/").when(user0).getSalt();
      doReturn("864c6fb06c9ce973c3b9f7963e1a54c8").when(user0).toString();
      //mock userMapper0
      UserMapper userMapper0 = mock(UserMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(user0).when(userMapper0).getById(anyLong());
      Boolean boolean0 = Boolean.TRUE;
      //mock redisService0
      RedisService redisService0 = mock(RedisService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((User) null).when(redisService0).get(any(com.jesper.seckill.redis.KeyPrefix.class) , anyString() , any(java.lang.Class.class));
      doReturn(boolean0).when(redisService0).set(any(com.jesper.seckill.redis.KeyPrefix.class) , anyString() , any());
      PrivateAccess.setVariable((Class<?>) UserService.class, userService0, "redisService", (Object) redisService0);
      PrivateAccess.setVariable((Class<?>) UserService.class, userService0, "userMapper", (Object) userMapper0);
      
      //Call method: updatePassword
      // Undeclared exception!
      try { 
        userService0.updatePassword("com.jesper.seckill.service.UserService", 539L, "com.alibaba.druid.support.logging.Log4jImpl");
      } catch(Throwable e) {
         assertEquals("java.lang.StringIndexOutOfBoundsException", e.getClass().getName());
         assertEquals("String index out of range: 2", e.getMessage());
      }
  }

  @Test(timeout = 4000)
  public void test_updatePassword_8()  throws Throwable  {
      //caseID:48b4609cc69e777d1f37bf00a8735e1e
      //CoveredLines: [23, 35, 36, 37, 53, 54, 58, 59, 60, 61, 63, 64, 65, 66]
      //Input_0_String: "79f712bb32e2bb84995c107e0813e8e7"
      //Input_1_long: 338L
      //Input_2_String: "79f712bb32e2bb84995c107e0813e8e7"
      //Assert: assertTrue(method_result);
      
      UserService userService0 = new UserService();
      //mock userMapper0
      UserMapper userMapper0 = mock(UserMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock user0
      User user0 = mock(User.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("79f712bb32e2bb84995c107e0813e8e7").when(user0).getSalt();
      doReturn("token").when(user0).toString();
      Boolean boolean0 = Boolean.FALSE;
      //mock redisService0
      RedisService redisService0 = mock(RedisService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(true).when(redisService0).delete(any(com.jesper.seckill.redis.KeyPrefix.class) , anyString());
      doReturn(user0).when(redisService0).get(any(com.jesper.seckill.redis.KeyPrefix.class) , anyString() , any(java.lang.Class.class));
      doReturn(boolean0).when(redisService0).set(any(com.jesper.seckill.redis.KeyPrefix.class) , anyString() , any());
      PrivateAccess.setVariable((Class<?>) UserService.class, userService0, "redisService", (Object) redisService0);
      PrivateAccess.setVariable((Class<?>) UserService.class, userService0, "userMapper", (Object) userMapper0);
      
      //Call method: updatePassword
      boolean boolean1 = userService0.updatePassword("79f712bb32e2bb84995c107e0813e8e7", 338L, "79f712bb32e2bb84995c107e0813e8e7");
      
      //Test Result Assert
      assertTrue(boolean1);
  }
}
