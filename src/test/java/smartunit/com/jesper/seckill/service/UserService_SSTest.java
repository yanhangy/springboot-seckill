/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.jesper.seckill.service;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import static org.smartunit.runtime.SmartAssertions.*;
import com.jesper.seckill.bean.User;
import com.jesper.seckill.mapper.UserMapper;
import com.jesper.seckill.redis.RedisService;
import com.jesper.seckill.service.UserService;
import com.jesper.seckill.vo.LoginVo;
import javax.servlet.http.HttpServletResponse;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class UserService_SSTest extends UserService_SSTest_scaffolding {
// allCoveredLines:[23, 34, 38, 39, 41, 42, 44, 45, 46, 49, 50, 51, 52, 53, 56, 57, 58, 66, 67, 68, 69, 70, 71, 77, 78, 80, 82, 83, 85]

  @Test(timeout = 4000)
  public void test_getByToken_0()  throws Throwable  {
      //caseID:19be087d78d21c09314feab99913fed7
      //CoveredLines: [23, 77, 78]
      //Input_0_HttpServletResponse: {}
      //Input_1_String: ""
      //Assert: assertNull(method_result);
      
      UserService userService0 = new UserService();
      //mock httpServletResponse0
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: getByToken
      User user0 = userService0.getByToken(httpServletResponse0, "");
      
      //Test Result Assert
      assertNull(user0);
  }

  @Test(timeout = 4000)
  public void test_getByToken_1()  throws Throwable  {
      //caseID:f038fa3e165490e7242556b33611da4b
      //CoveredLines: [23, 77, 80, 82, 85]
      //Input_0_HttpServletResponse: {}
      //Input_1_String: "1"
      //Assert: assertNull(method_result);
      
      UserService userService0 = new UserService();
      //mock redisService0
      RedisService redisService0 = mock(RedisService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) UserService.class, userService0, "redisService", (Object) redisService0);
      //mock httpServletResponse0
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: getByToken
      User user0 = userService0.getByToken(httpServletResponse0, "1");
      
      //Test Result Assert
      assertNull(user0);
  }

  @Test(timeout = 4000)
  public void test_getByToken_2()  throws Throwable  {
      //caseID:7d8426fe921e4fde556fc2c0d7d27f91
      //CoveredLines: [23, 66, 67, 68, 69, 70, 71, 77, 80, 82, 83, 85]
      //Input_0_HttpServletResponse: {}
      //Input_1_String: "B%<@"
      //Assert: assertNotNull(method_result);
      //Assert: assertNull(method_result.getHead());
      
      UserService userService0 = new UserService();
      //mock user0
      User user0 = mock(User.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock redisService0
      RedisService redisService0 = mock(RedisService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(user0).when(redisService0).get(any(com.jesper.seckill.redis.KeyPrefix.class) , anyString() , any(java.lang.Class.class));
      PrivateAccess.setVariable((Class<?>) UserService.class, userService0, "redisService", (Object) redisService0);
      //mock httpServletResponse0
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: getByToken
      User user1 = userService0.getByToken(httpServletResponse0, "B%<@");
      
      //Test Result Assert
      assertNotNull(user1);
      
      //Test Result Assert
      assertNull(user1.getHead());
  }

  @Test(timeout = 4000)
  public void test_login_3()  throws Throwable  {
      //caseID:efe3133629b2cbc99c9a8c00f715e022
      //CoveredLines: [23, 38, 39]
      //Input_0_HttpServletResponse: {}
      //Input_1_LoginVo: null
      
      UserService userService0 = new UserService();
      //mock httpServletResponse0
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: login
      // Undeclared exception!
      try { 
        userService0.login(httpServletResponse0, (LoginVo) null);
      } catch(Throwable e) {
         verifyException("com.jesper.seckill.service.UserService", e);
         assertEquals("com.jesper.seckill.exception.GlobalException", e.getClass().getName());
         assertEquals("CodeMsg [code=500100, msg=\u670D\u52A1\u7AEF\u5F02\u5E38]", e.getMessage());
      }
  }

  @Test(timeout = 4000)
  public void test_login_4()  throws Throwable  {
      //caseID:03b0a87f9d043a85092e8d0321513b2a
      //CoveredLines: [23, 34, 38, 41, 42, 44, 45, 46]
      //Input_0_HttpServletResponse: {}
      //Input_1_LoginVo: {getPassword="token", getMobile="56320"}
      
      UserService userService0 = new UserService();
      //mock userMapper0
      UserMapper userMapper0 = mock(UserMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) UserService.class, userService0, "userMapper", (Object) userMapper0);
      //mock httpServletResponse0
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock loginVo0
      LoginVo loginVo0 = mock(LoginVo.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("56320").when(loginVo0).getMobile();
      doReturn("token").when(loginVo0).getPassword();
      
      //Call method: login
      // Undeclared exception!
      try { 
        userService0.login(httpServletResponse0, loginVo0);
      } catch(Throwable e) {
         verifyException("com.jesper.seckill.service.UserService", e);
         assertEquals("com.jesper.seckill.exception.GlobalException", e.getClass().getName());
         assertEquals("CodeMsg [code=500214, msg=\u624B\u673A\u53F7\u4E0D\u5B58\u5728]", e.getMessage());
      }
  }

  @Test(timeout = 4000)
  public void test_login_5()  throws Throwable  {
      //caseID:6de3451af7981c87026f611b196edf4f
      //CoveredLines: [23, 34, 38, 41, 42, 44, 45, 49, 50, 51, 52, 53]
      //Input_0_HttpServletResponse: {}
      //Input_1_LoginVo: {getPassword="-752413850", getMobile="-752413850"}
      
      UserService userService0 = new UserService();
      //mock user0
      User user0 = mock(User.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("-752413850").when(user0).getPassword();
      doReturn("-752413850").when(user0).getSalt();
      doReturn("-752413850").when(user0).toString();
      //mock userMapper0
      UserMapper userMapper0 = mock(UserMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(user0).when(userMapper0).getById(anyLong());
      PrivateAccess.setVariable((Class<?>) UserService.class, userService0, "userMapper", (Object) userMapper0);
      //mock httpServletResponse0
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock loginVo0
      LoginVo loginVo0 = mock(LoginVo.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("-752413850").when(loginVo0).getMobile();
      doReturn("-752413850").when(loginVo0).getPassword();
      
      //Call method: login
      // Undeclared exception!
      try { 
        userService0.login(httpServletResponse0, loginVo0);
      } catch(Throwable e) {
         verifyException("com.jesper.seckill.service.UserService", e);
         assertEquals("com.jesper.seckill.exception.GlobalException", e.getClass().getName());
         assertEquals("CodeMsg [code=500215, msg=\u5BC6\u7801\u9519\u8BEF]", e.getMessage());
      }
  }

  @Test(timeout = 4000)
  public void test_login_6()  throws Throwable  {
      //caseID:18e79f0f21c8b8d0005eba2c3da019b2
      //CoveredLines: [23, 34, 38, 41, 42, 44, 45, 49, 50, 51, 52, 56, 57, 58, 66, 67, 68, 69, 70, 71]
      //Input_0_HttpServletResponse: {}
      //Input_1_LoginVo: {getPassword="token", getMobile="37"}
      //Assert: assertEquals("f761e2b039c6476b9505231beb5c026b", method_result);
      
      UserService userService0 = new UserService();
      //mock user0
      User user0 = mock(User.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("a30bfb2570fcdc76fb9151e898c0e9a9").when(user0).getPassword();
      doReturn("S`Qi|7Q1<$7i}md").when(user0).getSalt();
      doReturn("token").when(user0).toString();
      //mock userMapper0
      UserMapper userMapper0 = mock(UserMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(user0).when(userMapper0).getById(anyLong());
      //mock redisService0
      RedisService redisService0 = mock(RedisService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) UserService.class, userService0, "redisService", (Object) redisService0);
      PrivateAccess.setVariable((Class<?>) UserService.class, userService0, "userMapper", (Object) userMapper0);
      //mock httpServletResponse0
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock loginVo0
      LoginVo loginVo0 = mock(LoginVo.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("37").when(loginVo0).getMobile();
      doReturn("token").when(loginVo0).getPassword();
      
      //Call method: login
      String string0 = userService0.login(httpServletResponse0, loginVo0);
      //  // Unstable assertion: 
      //Test Result Assert
      assertEquals("f761e2b039c6476b9505231beb5c026b", string0);
  }
}
