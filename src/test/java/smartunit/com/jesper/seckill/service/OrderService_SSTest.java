/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.jesper.seckill.service;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.jesper.seckill.bean.OrderInfo;
import com.jesper.seckill.bean.SeckillOrder;
import com.jesper.seckill.bean.User;
import com.jesper.seckill.mapper.OrderMapper;
import com.jesper.seckill.redis.RedisService;
import com.jesper.seckill.service.OrderService;
import com.jesper.seckill.vo.GoodsVo;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class OrderService_SSTest extends OrderService_SSTest_scaffolding {
// allCoveredLines:[20, 29, 33, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 59, 61]

  @Test(timeout = 4000)
  public void test_createOrder_0()  throws Throwable  {
      //caseID:8f83a78cdf7590111f59c4ab8a65f2bb
      //CoveredLines: [20, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 59, 61]
      //Input_0_User: {}
      //Input_1_GoodsVo: {}
      //Assert: assertEquals(0, (int)method_result.getStatus());
      //Assert: assertEquals(1, (int)method_result.getGoodsCount());
      //Assert: assertEquals(0L, (long)method_result.getDeliveryAddrId());
      //Assert: assertEquals(1, (int)method_result.getOrderChannel());
      
      OrderService orderService0 = new OrderService();
      //mock orderMapper0
      OrderMapper orderMapper0 = mock(OrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock redisService0
      RedisService redisService0 = mock(RedisService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) OrderService.class, orderService0, "redisService", (Object) redisService0);
      PrivateAccess.setVariable((Class<?>) OrderService.class, orderService0, "orderMapper", (Object) orderMapper0);
      //mock user0
      User user0 = mock(User.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock goodsVo0
      GoodsVo goodsVo0 = mock(GoodsVo.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: createOrder
      OrderInfo orderInfo0 = orderService0.createOrder(user0, goodsVo0);
      
      //Test Result Assert
      assertEquals(0, (int)orderInfo0.getStatus());
      
      //Test Result Assert
      assertEquals(1, (int)orderInfo0.getGoodsCount());
      
      //Test Result Assert
      assertEquals(0L, (long)orderInfo0.getDeliveryAddrId());
      
      //Test Result Assert
      assertEquals(1, (int)orderInfo0.getOrderChannel());
  }

  @Test(timeout = 4000)
  public void test_getOrderById_1()  throws Throwable  {
      //caseID:795dfa32ea0bf72574d8e67588d62b63
      //CoveredLines: [20, 33]
      //Input_0_long: 3458L
      //Assert: assertNull(method_result);
      
      OrderService orderService0 = new OrderService();
      //mock orderMapper0
      OrderMapper orderMapper0 = mock(OrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) OrderService.class, orderService0, "orderMapper", (Object) orderMapper0);
      
      //Call method: getOrderById
      OrderInfo orderInfo0 = orderService0.getOrderById(3458L);
      
      //Test Result Assert
      assertNull(orderInfo0);
  }

  @Test(timeout = 4000)
  public void test_getOrderByUserIdGoodsId_2()  throws Throwable  {
      //caseID:800116c1ad3e75d5906aed66ba924dd7
      //CoveredLines: [20, 29]
      //Input_0_long: 1390L
      //Input_1_long: 0L
      //Assert: assertNull(method_result);
      
      OrderService orderService0 = new OrderService();
      //mock redisService0
      RedisService redisService0 = mock(RedisService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) OrderService.class, orderService0, "redisService", (Object) redisService0);
      
      //Call method: getOrderByUserIdGoodsId
      SeckillOrder seckillOrder0 = orderService0.getOrderByUserIdGoodsId(1390L, 0L);
      
      //Test Result Assert
      assertNull(seckillOrder0);
  }
}
