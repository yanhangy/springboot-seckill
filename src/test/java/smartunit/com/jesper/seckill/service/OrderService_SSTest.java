/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.jesper.seckill.service;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.jesper.seckill.bean.OrderInfo;
import com.jesper.seckill.bean.SeckillOrder;
import com.jesper.seckill.bean.User;
import com.jesper.seckill.mapper.OrderMapper;
import com.jesper.seckill.redis.RedisService;
import com.jesper.seckill.service.OrderService;
import com.jesper.seckill.vo.GoodsVo;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class OrderService_SSTest extends OrderService_SSTest_scaffolding {

  @Test(timeout = 4000)
  public void test_getOrderByUserIdGoodsId_0()  throws Throwable  {
      //caseID:7495b92077c80720071884710ba2c0ca
      OrderService orderService0 = new OrderService();

      //prepare data for redisService0
      SeckillOrder seckillOrder0 = mock(SeckillOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      RedisService redisService0 = mock(RedisService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(seckillOrder0).when(redisService0).get(any(com.jesper.seckill.redis.KeyPrefix.class) , anyString() , any(java.lang.Class.class));

      //invoke method for orderService0
      PrivateAccess.setVariable((Class<?>) OrderService.class, orderService0, "redisService", (Object) redisService0);
      SeckillOrder seckillOrder1 = orderService0.getOrderByUserIdGoodsId(0L, 261L);
      assertNull(seckillOrder1.getOrderId());
  }
  @Test(timeout = 4000)
  public void test_getOrderById_1()  throws Throwable  {
      //caseID:7138eb66063c0043b71f1afcca544b55
      OrderService orderService0 = new OrderService();

      //prepare data for orderMapper0
      OrderInfo orderInfo0 = mock(OrderInfo.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      OrderMapper orderMapper0 = mock(OrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(orderInfo0).when(orderMapper0).getOrderById(anyLong());

      //invoke method for orderService0
      PrivateAccess.setVariable((Class<?>) OrderService.class, orderService0, "orderMapper", (Object) orderMapper0);
      OrderInfo orderInfo1 = orderService0.getOrderById(4069L);
      assertNull(orderInfo1.getGoodsName());
  }
  @Test(timeout = 4000)
  public void test_createOrder_2()  throws Throwable  {
      //caseID:c9348bc40a88ac669615ff471795c70a
      OrderService orderService0 = new OrderService();

      //prepare data for orderMapper0
      OrderMapper orderMapper0 = mock(OrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(0L).when(orderMapper0).insert(any(com.jesper.seckill.bean.OrderInfo.class));
      doReturn(86).when(orderMapper0).insertSeckillOrder(any(com.jesper.seckill.bean.SeckillOrder.class));

      //prepare data for redisService0
      Boolean boolean0 = Boolean.valueOf("com.jesper.seckill.service.OrderService");
      RedisService redisService0 = mock(RedisService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(boolean0).when(redisService0).set(any(com.jesper.seckill.redis.KeyPrefix.class) , anyString() , any());

      //invoke method for orderService0
      PrivateAccess.setVariable((Class<?>) OrderService.class, orderService0, "redisService", (Object) redisService0);

      //invoke method for orderService0
      PrivateAccess.setVariable((Class<?>) OrderService.class, orderService0, "orderMapper", (Object) orderMapper0);

      //prepare data for goodsVo0
      Long long0 = new Long(1800000L);
      User user0 = mock(User.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0, long0, long0).when(user0).getId();
      Double double0 = new Double((-839.86598));
      GoodsVo goodsVo0 = mock(GoodsVo.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("111").when(goodsVo0).getGoodsName();
      doReturn(double0).when(goodsVo0).getGoodsPrice();
      doReturn(long0, long0, long0).when(goodsVo0).getId();
      OrderInfo orderInfo0 = orderService0.createOrder(user0, goodsVo0);
      assertEquals(1, (int)orderInfo0.getOrderChannel());
      assertEquals(0, (int)orderInfo0.getStatus());
      assertEquals(0L, (long)orderInfo0.getDeliveryAddrId());
      assertEquals(1, (int)orderInfo0.getGoodsCount());
  }}
