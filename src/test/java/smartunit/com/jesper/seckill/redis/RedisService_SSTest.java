/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.jesper.seckill.redis;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import static org.smartunit.runtime.SmartAssertions.*;
import com.alibaba.fastjson.JSONException;
import com.jesper.seckill.redis.KeyPrefix;
import com.jesper.seckill.redis.RedisService;
import java.awt.Choice;
import java.awt.Component;
import java.awt.Container;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.GraphicsConfiguration;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.dnd.DropTarget;
import java.awt.event.ComponentListener;
import java.awt.event.FocusListener;
import java.awt.event.HierarchyBoundsListener;
import java.awt.event.HierarchyListener;
import java.awt.event.InputMethodListener;
import java.awt.event.ItemListener;
import java.awt.event.KeyListener;
import java.awt.im.InputContext;
import java.awt.im.InputMethodRequests;
import java.awt.image.ColorModel;
import java.util.Locale;
import javax.accessibility.AccessibleContext;
import javax.swing.JLayeredPane;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;
import redis.clients.jedis.Jedis;
import redis.clients.jedis.JedisPool;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class RedisService_SSTest extends RedisService_SSTest_scaffolding {

  @Test(timeout = 4000)
  public void test_stringToBean_00()  throws Throwable  {
      //caseID:e191feaadc4cec22cb223e7920c82870
      RedisService redisService0 = new RedisService();
      Object object0 = RedisService.stringToBean("{}", (Class<Object>) null);
      assertNull(object0);
  }
  @Test(timeout = 4000)
  public void test_stringToBean_01()  throws Throwable  {
      //caseID:150e2e6e1be7018097dad5570440bd7a
      RedisService redisService0 = new RedisService();
      Class<Integer> class0 = Integer.TYPE;
      // Undeclared exception!
      try { 
        RedisService.stringToBean("{}", class0);
      } catch(Throwable e) {
         verifyException("java.lang.NumberFormatException", e);
         assertEquals("java.lang.NumberFormatException", e.getClass().getName());
         assertEquals("For input string: \"{}\"", e.getMessage());
      }
  }
  @Test(timeout = 4000)
  public void test_stringToBean_02()  throws Throwable  {
      //caseID:183449a4b55c9dcf0147a52095d1640a
      RedisService redisService0 = new RedisService();
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        RedisService.stringToBean("com.jesper.seckill.redis.RedisService", class0);
      } catch(Throwable e) {
         verifyException("java.lang.NumberFormatException", e);
         assertEquals("java.lang.NumberFormatException", e.getClass().getName());
         assertEquals("For input string: \"com.jesper.seckill.redis.RedisService\"", e.getMessage());
      }
  }
  @Test(timeout = 4000)
  public void test_stringToBean_03()  throws Throwable  {
      //caseID:88d2155613e493aafaeec1e786ef37ef
      RedisService redisService0 = new RedisService();
      Class<Long> class0 = Long.TYPE;
      // Undeclared exception!
      try { 
        RedisService.stringToBean("com.jesper.seckill.redis.RedisService", class0);
      } catch(Throwable e) {
         verifyException("java.lang.NumberFormatException", e);
         assertEquals("java.lang.NumberFormatException", e.getClass().getName());
         assertEquals("For input string: \"com.jesper.seckill.redis.RedisService\"", e.getMessage());
      }
  }
  @Test(timeout = 4000)
  public void test_stringToBean_04()  throws Throwable  {
      //caseID:8af123583e2ac8f3c731ec458900ca42
      RedisService redisService0 = new RedisService();
      Class<Long> class0 = Long.class;
      // Undeclared exception!
      try { 
        RedisService.stringToBean("1.0", class0);
      } catch(Throwable e) {
         verifyException("java.lang.NumberFormatException", e);
         assertEquals("java.lang.NumberFormatException", e.getClass().getName());
         assertEquals("For input string: \"1.0\"", e.getMessage());
      }
  }
  @Test(timeout = 4000)
  public void test_stringToBean_05()  throws Throwable  {
      //caseID:a3f6896c117723969b6301c21198bc29
      RedisService redisService0 = new RedisService();
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        RedisService.stringToBean("0", class0);
      } catch(Throwable e) {
         verifyException("com.alibaba.fastjson.JSON", e);
         assertEquals("com.alibaba.fastjson.JSONException", e.getClass().getName());
         assertEquals("can not cast to JSONObject.", e.getMessage());
      }
  }
  @Test(timeout = 4000)
  public void test_exists_06()  throws Throwable  {
      //caseID:2148c0270f236de49c753813612f097a
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Boolean boolean0 = Boolean.valueOf("1");
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(boolean0).when(jedis0).exists(anyString());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("17").when(keyPrefix0).getPrefix();
      boolean boolean1 = redisService0.exists(keyPrefix0, "");
      assertFalse(boolean1);
  }
  @Test(timeout = 4000)
  public void test_incr_07()  throws Throwable  {
      //caseID:7150be1e4bfefa8dbc23394966767d18
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("1").when(keyPrefix0).getPrefix();
      Long long0 = redisService0.incr(keyPrefix0, "24EWnF!O");
      assertNull(long0);
  }
  @Test(timeout = 4000)
  public void test_decr_08()  throws Throwable  {
      //caseID:90284c94ba690fb314961217b3564d2b
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("2146440673").when(keyPrefix0).getPrefix();
      Long long0 = redisService0.decr(keyPrefix0, "MiBN");
      assertNull(long0);
  }
  @Test(timeout = 4000)
  public void test_delete_09()  throws Throwable  {
      //caseID:64c6ce7c9b3c9e53941770ec2a275ebe
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Long long0 = new Long(735L);
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(jedis0).del(anyString());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("coyote.").when(keyPrefix0).getPrefix();
      boolean boolean0 = redisService0.delete(keyPrefix0, "coyote.");
      assertTrue(boolean0);
  }
  @Test(timeout = 4000)
  public void test_delete_10()  throws Throwable  {
      //caseID:ea9946500caad06c31027f6ed2f0f5b9
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Long long0 = new Long((-1L));
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(jedis0).del(anyString());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("3").when(keyPrefix0).getPrefix();
      boolean boolean0 = redisService0.delete(keyPrefix0, "1");
      assertFalse(boolean0);
  }
  @Test(timeout = 4000)
  public void test_get_11()  throws Throwable  {
      //caseID:8834dd7a7bbaf6e68d515679064bcc1a
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("com.jesper.seckill.redis.RedisService").when(keyPrefix0).getPrefix();
      Class<String> class0 = String.class;
      String string0 = redisService0.get(keyPrefix0, "1.0", class0);
      assertNull(string0);
  }
  @Test(timeout = 4000)
  public void test_set_12()  throws Throwable  {
      //caseID:a9191811f0de1fc43de0ba39a40b10ff
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());

      //prepare data for choice0
      Dimension dimension0 = mock(Dimension.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Dimension dimension1 = mock(Dimension.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Point point0 = mock(Point.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Point point1 = mock(Point.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Locale locale0 = Locale.FRANCE;
      KeyListener[] keyListenerArray0 = new KeyListener[5];
      InputMethodRequests inputMethodRequests0 = mock(InputMethodRequests.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      InputMethodListener[] inputMethodListenerArray0 = new InputMethodListener[1];
      InputContext inputContext0 = mock(InputContext.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      HierarchyListener[] hierarchyListenerArray0 = new HierarchyListener[8];
      HierarchyBoundsListener[] hierarchyBoundsListenerArray0 = new HierarchyBoundsListener[8];
      GraphicsConfiguration graphicsConfiguration0 = mock(GraphicsConfiguration.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Graphics graphics0 = mock(Graphics.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      FocusListener[] focusListenerArray0 = new FocusListener[0];
      Container container0 = mock(Container.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      DropTarget dropTarget0 = mock(DropTarget.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Cursor cursor0 = mock(Cursor.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      ComponentListener[] componentListenerArray0 = new ComponentListener[9];
      ColorModel colorModel0 = mock(ColorModel.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Rectangle rectangle0 = mock(Rectangle.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Component.BaselineResizeBehavior component_BaselineResizeBehavior0 = Component.BaselineResizeBehavior.CENTER_OFFSET;
      ItemListener[] itemListenerArray0 = new ItemListener[2];
      AccessibleContext accessibleContext0 = mock(AccessibleContext.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Choice choice0 = mock(Choice.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(accessibleContext0).when(choice0).getAccessibleContext();
      doReturn(3943).when(choice0).getItemCount();
      doReturn(itemListenerArray0).when(choice0).getItemListeners();
      doReturn(0.0F).when(choice0).getAlignmentX();
      doReturn(0.0F).when(choice0).getAlignmentY();
      doReturn(component_BaselineResizeBehavior0).when(choice0).getBaselineResizeBehavior();
      doReturn(rectangle0).when(choice0).getBounds();
      doReturn(colorModel0).when(choice0).getColorModel();
      doReturn(componentListenerArray0).when(choice0).getComponentListeners();
      doReturn(cursor0).when(choice0).getCursor();
      doReturn(dropTarget0).when(choice0).getDropTarget();
      doReturn(container0).when(choice0).getFocusCycleRootAncestor();
      doReturn(focusListenerArray0).when(choice0).getFocusListeners();
      doReturn(false).when(choice0).getFocusTraversalKeysEnabled();
      doReturn(graphics0).when(choice0).getGraphics();
      doReturn(graphicsConfiguration0).when(choice0).getGraphicsConfiguration();
      doReturn(1).when(choice0).getHeight();
      doReturn(hierarchyBoundsListenerArray0).when(choice0).getHierarchyBoundsListeners();
      doReturn(hierarchyListenerArray0).when(choice0).getHierarchyListeners();
      doReturn(false).when(choice0).getIgnoreRepaint();
      doReturn(inputContext0).when(choice0).getInputContext();
      doReturn(inputMethodListenerArray0).when(choice0).getInputMethodListeners();
      doReturn(inputMethodRequests0).when(choice0).getInputMethodRequests();
      doReturn(keyListenerArray0).when(choice0).getKeyListeners();
      doReturn(locale0).when(choice0).getLocale();
      doReturn(point1).when(choice0).getLocation();
      doReturn(point0).when(choice0).getLocationOnScreen();
      doReturn(dimension1).when(choice0).getMaximumSize();
      doReturn(dimension0).when(choice0).getMinimumSize();
      doReturn(true).when(choice0).isBackgroundSet();
      doReturn(false).when(choice0).isCursorSet();
      doReturn(false).when(choice0).isDisplayable();
      doReturn(false).when(choice0).isDoubleBuffered();
      doReturn(false).when(choice0).isEnabled();
      doReturn(true).when(choice0).isFocusOwner();
      doReturn(false).when(choice0).isFocusTraversable();
      doReturn(false).when(choice0).isFocusable();
      doReturn(false).when(choice0).isFontSet();
      doReturn(false).when(choice0).isForegroundSet();
      doReturn(false).when(choice0).isLightweight();
      doReturn(true).when(choice0).isMaximumSizeSet();
      doReturn(true).when(choice0).isMinimumSizeSet();
      // Undeclared exception!
      try { 

        //invoke method for redisService0
        redisService0.set(keyPrefix0, " @", choice0);
      } catch(Throwable e) {
      }
  }
  @Test(timeout = 4000)
  public void test_get_13()  throws Throwable  {
      //caseID:1b521cab8ea7c28752902e9810b34f41
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("2223").when(jedis0).get(anyString());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("2223").when(keyPrefix0).getPrefix();
      Class<String> class0 = String.class;
      String string0 = redisService0.get(keyPrefix0, "2223", class0);
      assertNotNull(string0);
      assertEquals("2223", string0);
  }
  @Test(timeout = 4000)
  public void test_set_14()  throws Throwable  {
      //caseID:915aaafbca3aec794988222a2aef31f5
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Boolean boolean0 = redisService0.set(keyPrefix0, "", (Object) "");
      assertFalse(boolean0);
  }
  @Test(timeout = 4000)
  public void test_set_15()  throws Throwable  {
      //caseID:9cefaf135b2a8a73fe3cb93d9677702d
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("Failed to introspect bean class [").when(jedis0).set(anyString() , anyString());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(0).when(keyPrefix0).expireSeconds();
      doReturn("Body event threw error").when(keyPrefix0).getPrefix();
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      Boolean boolean0 = redisService0.set(keyPrefix0, "AHRn&yzhutk+~@8]YSl", integer0);
      assertTrue(boolean0);
  }
  @Test(timeout = 4000)
  public void test_set_16()  throws Throwable  {
      //caseID:99aefdef27cf02950f7057ef3e97d5f2
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(3367).when(keyPrefix0).expireSeconds();
      doReturn("d*pA*M!lcnR{Q]f!]`,").when(keyPrefix0).getPrefix();
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      Boolean boolean0 = redisService0.set(keyPrefix0, "AHRn&yzhutk+~@8]YSl", integer0);
      assertTrue(boolean0);
  }
  @Test(timeout = 4000)
  public void test_set_17()  throws Throwable  {
      //caseID:fb08d868975eae9cbda5b4ed13bdeba6
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("1").when(jedis0).setex(anyString() , anyInt() , anyString());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(4).when(keyPrefix0).expireSeconds();
      doReturn("0").when(keyPrefix0).getPrefix();
      Long long0 = new Long(3261L);
      Boolean boolean0 = redisService0.set(keyPrefix0, "org.springframework.core.io.ClassRelativeResourceLoader", long0);
      assertTrue(boolean0);
  }
  @Test(timeout = 4000)
  public void test_set_18()  throws Throwable  {
      //caseID:ab9c7d2ba3a34dc29f0f72bb2ed829a7
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(78).when(keyPrefix0).expireSeconds();
      doReturn("1").when(keyPrefix0).getPrefix();
      Boolean boolean0 = redisService0.set(keyPrefix0, "com.jesper.seckill.redis.RedisService", (Object) "com.jesper.seckill.redis.RedisService");
      assertTrue(boolean0);
  }
  @Test(timeout = 4000)
  public void test_set_19()  throws Throwable  {
      //caseID:c42a87b104713ac406311c2b3644bbcc
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("").when(jedis0).get(anyString());
      Jedis jedis1 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0, jedis1).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("0").when(keyPrefix0).getPrefix();
      Class<Long> class0 = Long.class;
      Long long0 = redisService0.get(keyPrefix0, "1352", class0);
      assertNull(long0);
      
      Boolean boolean0 = redisService0.set(keyPrefix0, "com.jesper.seckill.redis.RedisService", (Object) null);
      assertFalse(boolean0);
  }}
