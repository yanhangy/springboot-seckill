/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.jesper.seckill.redis;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import static org.smartunit.runtime.SmartAssertions.*;
import com.alibaba.fastjson.JSONException;
import com.jesper.seckill.redis.KeyPrefix;
import com.jesper.seckill.redis.RedisService;
import java.awt.Component;
import java.awt.Container;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.GraphicsConfiguration;
import java.awt.List;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.dnd.DropTarget;
import java.awt.event.ActionListener;
import java.awt.event.ComponentListener;
import java.awt.event.FocusListener;
import java.awt.event.HierarchyBoundsListener;
import java.awt.event.HierarchyListener;
import java.awt.event.InputMethodListener;
import java.awt.event.ItemListener;
import java.awt.event.KeyListener;
import java.awt.im.InputContext;
import java.awt.im.InputMethodRequests;
import java.awt.image.ColorModel;
import java.util.Locale;
import javax.accessibility.AccessibleContext;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;
import redis.clients.jedis.Jedis;
import redis.clients.jedis.JedisPool;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class RedisService_SSTest extends RedisService_SSTest_scaffolding {

  @Test(timeout = 4000)
  public void test_stringToBean_00()  throws Throwable  {
      //caseID:0641c3c688b3ff4a3c70c25c58525d5f
      RedisService redisService0 = new RedisService();
      Class<List> class0 = List.class;
      List list0 = RedisService.stringToBean("", class0);
      assertNull(list0);
  }
  @Test(timeout = 4000)
  public void test_stringToBean_01()  throws Throwable  {
      //caseID:3a0935aa92f031fae6664666704880d0
      RedisService redisService0 = new RedisService();
      Class<Integer> class0 = Integer.TYPE;
      // Undeclared exception!
      try { 
        RedisService.stringToBean("1.0", class0);
      } catch(Throwable e) {
         verifyException("java.lang.NumberFormatException", e);
         assertEquals("java.lang.NumberFormatException", e.getClass().getName());
         assertEquals("For input string: \"1.0\"", e.getMessage());
      }
  }
  @Test(timeout = 4000)
  public void test_stringToBean_02()  throws Throwable  {
      //caseID:cc029be0eeeb10d1d8c193906ad1a26e
      RedisService redisService0 = new RedisService();
      Class<Long> class0 = Long.class;
      Long long0 = RedisService.stringToBean("6", class0);
      assertNotNull(long0);
      assertEquals(6L, (long)long0);
  }
  @Test(timeout = 4000)
  public void test_beanToString_03()  throws Throwable  {
      //caseID:5f4e99d4ad25210695e4c01768b50f0b
      RedisService redisService0 = new RedisService();
      Long long0 = new Long(2935L);
      String string0 = RedisService.beanToString(long0);
      assertEquals("2935", string0);
  }
  @Test(timeout = 4000)
  public void test_exists_04()  throws Throwable  {
      //caseID:b8776a2fee01b1dc06f024eca4619ce2
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Boolean boolean0 = Boolean.valueOf(false);
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(boolean0).when(jedis0).exists(anyString());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("!)OZs4").when(keyPrefix0).getPrefix();
      boolean boolean1 = redisService0.exists(keyPrefix0, "org.apache.catalina.core.ContainerBase$StopChild");
      assertFalse(boolean1);
  }
  @Test(timeout = 4000)
  public void test_incr_05()  throws Throwable  {
      //caseID:e96709218f023a55b9c4210a450507a1
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("2146127913").when(keyPrefix0).getPrefix();
      Long long0 = redisService0.incr(keyPrefix0, "1");
      assertNull(long0);
  }
  @Test(timeout = 4000)
  public void test_decr_06()  throws Throwable  {
      //caseID:4c2aaa3a843a9ccbd03ee231745f3276
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("zyDG3hM6f80a5c.").when(keyPrefix0).getPrefix();
      Long long0 = redisService0.decr(keyPrefix0, "1");
      assertNull(long0);
  }
  @Test(timeout = 4000)
  public void test_delete_07()  throws Throwable  {
      //caseID:9e994ceb74a8da860d7854954538c1fd
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Long long0 = new Long(183L);
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(jedis0).del(anyString());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("1.0").when(keyPrefix0).getPrefix();
      boolean boolean0 = redisService0.delete(keyPrefix0, "0");
      assertTrue(boolean0);
  }
  @Test(timeout = 4000)
  public void test_delete_08()  throws Throwable  {
      //caseID:dcc0c8e2afad4ba36e7b49c7f535f039
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Long long0 = new Long((-1L));
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(jedis0).del(anyString());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("264").when(keyPrefix0).getPrefix();
      boolean boolean0 = redisService0.delete(keyPrefix0, "0");
      assertFalse(boolean0);
  }
  @Test(timeout = 4000)
  public void test_get_09()  throws Throwable  {
      //caseID:bedaabfa91b07fb10254526094eeeb3e
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("0").when(keyPrefix0).getPrefix();
      Class<Integer> class0 = Integer.class;
      Integer integer0 = redisService0.get(keyPrefix0, "Could not resolve placeholder '", class0);
      assertNull(integer0);
  }
  @Test(timeout = 4000)
  public void test_get_10()  throws Throwable  {
      //caseID:20279866901a44a3fff37af70ea24c08
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("0/lPSmpzJ;l%'").when(jedis0).get(anyString());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("1").when(keyPrefix0).getPrefix();
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 

        //invoke method for redisService0
        redisService0.get(keyPrefix0, "Could not resolve placeholder '", class0);
      } catch(Throwable e) {
         verifyException("java.lang.NumberFormatException", e);
         assertEquals("java.lang.NumberFormatException", e.getClass().getName());
         assertEquals("For input string: \"0/lPSmpzJ;l%'\"", e.getMessage());
      }
  }
  @Test(timeout = 4000)
  public void test_set_11()  throws Throwable  {
      //caseID:c6bc6f9762148f7acbef421b1145b1e8
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      RedisService.stringToBean("5(Zze5b;&]0~kl1", (Class<String>) null);
      Boolean boolean0 = redisService0.set(keyPrefix0, "1", (Object) null);
      assertFalse(boolean0);
  }
  @Test(timeout = 4000)
  public void test_set_12()  throws Throwable  {
      //caseID:fbe7c196a37f4bbbb639f2b64ff33efe
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());

      //prepare data for list0
      Dimension dimension0 = mock(Dimension.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      String[] stringArray0 = new String[9];
      ItemListener[] itemListenerArray0 = new ItemListener[5];
      ActionListener[] actionListenerArray0 = new ActionListener[6];
      AccessibleContext accessibleContext0 = mock(AccessibleContext.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Dimension dimension1 = mock(Dimension.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Point point0 = mock(Point.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Point point1 = mock(Point.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      KeyListener[] keyListenerArray0 = new KeyListener[4];
      InputMethodRequests inputMethodRequests0 = mock(InputMethodRequests.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      InputMethodListener[] inputMethodListenerArray0 = new InputMethodListener[1];
      InputContext inputContext0 = mock(InputContext.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      HierarchyListener[] hierarchyListenerArray0 = new HierarchyListener[7];
      HierarchyBoundsListener[] hierarchyBoundsListenerArray0 = new HierarchyBoundsListener[8];
      GraphicsConfiguration graphicsConfiguration0 = mock(GraphicsConfiguration.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Graphics graphics0 = mock(Graphics.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      FocusListener[] focusListenerArray0 = new FocusListener[0];
      Container container0 = mock(Container.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      DropTarget dropTarget0 = mock(DropTarget.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Cursor cursor0 = mock(Cursor.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      ComponentListener[] componentListenerArray0 = new ComponentListener[0];
      ColorModel colorModel0 = mock(ColorModel.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Rectangle rectangle0 = mock(Rectangle.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Component.BaselineResizeBehavior component_BaselineResizeBehavior0 = Component.BaselineResizeBehavior.OTHER;
      List list0 = mock(List.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1969.935F).when(list0).getAlignmentX();
      doReturn(0.0F).when(list0).getAlignmentY();
      doReturn(component_BaselineResizeBehavior0).when(list0).getBaselineResizeBehavior();
      doReturn(rectangle0).when(list0).getBounds();
      doReturn(colorModel0).when(list0).getColorModel();
      doReturn(componentListenerArray0).when(list0).getComponentListeners();
      doReturn(cursor0).when(list0).getCursor();
      doReturn(dropTarget0).when(list0).getDropTarget();
      doReturn(container0).when(list0).getFocusCycleRootAncestor();
      doReturn(focusListenerArray0).when(list0).getFocusListeners();
      doReturn(true).when(list0).getFocusTraversalKeysEnabled();
      doReturn(graphics0).when(list0).getGraphics();
      doReturn(graphicsConfiguration0).when(list0).getGraphicsConfiguration();
      doReturn(0).when(list0).getHeight();
      doReturn(hierarchyBoundsListenerArray0).when(list0).getHierarchyBoundsListeners();
      doReturn(hierarchyListenerArray0).when(list0).getHierarchyListeners();
      doReturn(true).when(list0).getIgnoreRepaint();
      doReturn(inputContext0).when(list0).getInputContext();
      doReturn(inputMethodListenerArray0).when(list0).getInputMethodListeners();
      doReturn(inputMethodRequests0).when(list0).getInputMethodRequests();
      doReturn(keyListenerArray0).when(list0).getKeyListeners();
      doReturn(locale0).when(list0).getLocale();
      doReturn(point1).when(list0).getLocation();
      doReturn(point0).when(list0).getLocationOnScreen();
      doReturn(dimension1).when(list0).getMaximumSize();
      doReturn(false).when(list0).isBackgroundSet();
      doReturn(false).when(list0).isCursorSet();
      doReturn(true).when(list0).isDisplayable();
      doReturn(false).when(list0).isDoubleBuffered();
      doReturn(true).when(list0).isEnabled();
      doReturn(false).when(list0).isFocusOwner();
      doReturn(false).when(list0).isFocusTraversable();
      doReturn(false).when(list0).isFocusable();
      doReturn(true).when(list0).isFontSet();
      doReturn(true).when(list0).isForegroundSet();
      doReturn(true).when(list0).isLightweight();
      doReturn(false).when(list0).isMaximumSizeSet();
      doReturn(false).when(list0).isMinimumSizeSet();
      doReturn(accessibleContext0).when(list0).getAccessibleContext();
      doReturn(actionListenerArray0).when(list0).getActionListeners();
      doReturn(1).when(list0).getItemCount();
      doReturn(itemListenerArray0).when(list0).getItemListeners();
      doReturn(stringArray0).when(list0).getItems();
      doReturn(dimension0).when(list0).getMinimumSize();
      // Undeclared exception!
      try { 

        //invoke method for redisService0
        redisService0.set(keyPrefix0, "", list0);
      } catch(Throwable e) {
      }
  }
  @Test(timeout = 4000)
  public void test_get_13()  throws Throwable  {
      //caseID:cd0eda56bd90b4ef39da4962d2a7f5de
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("1.0").when(jedis0).get(anyString());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("1.0").when(keyPrefix0).getPrefix();
      Class<Long> class0 = Long.TYPE;
      // Undeclared exception!
      try { 

        //invoke method for redisService0
        redisService0.get(keyPrefix0, "com.jesper.seckill.redis.RedisService", class0);
      } catch(Throwable e) {
         verifyException("java.lang.NumberFormatException", e);
         assertEquals("java.lang.NumberFormatException", e.getClass().getName());
         assertEquals("For input string: \"1.0\"", e.getMessage());
      }
  }
  @Test(timeout = 4000)
  public void test_set_14()  throws Throwable  {
      //caseID:e08231d10f591e715c7f0ee2c76bcf80
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("TGmQr@!B'cZ:%=-N9").when(jedis0).get(anyString());
      Jedis jedis1 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(" -> ").when(keyPrefix0).getPrefix();
      String string0 = "  No applicable constraints defined";
      Class<List> class0 = List.class;
      // Undeclared exception!
      try { 

        //invoke method for redisService0
        redisService0.get(keyPrefix0, "shutdown", class0);
      } catch(Throwable e) {
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
         assertEquals("com.alibaba.fastjson.JSONException", e.getClass().getName());
         assertEquals("syntax error, pos 5, json : TGmQr@!B'cZ:%=-N9", e.getMessage());
      }
  }
  @Test(timeout = 4000)
  public void test_get_15()  throws Throwable  {
      //caseID:0d3440f40e8ee9ff9bc4d91c4d384a13
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("1.0").when(jedis0).get(anyString());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("1.0").when(keyPrefix0).getPrefix();
      Class<String> class0 = String.class;
      String string0 = redisService0.get(keyPrefix0, "1.0", class0);
      assertNotNull(string0);
      assertEquals("1.0", string0);
  }
  @Test(timeout = 4000)
  public void test_set_16()  throws Throwable  {
      //caseID:f7c3ebeca74fd5492d46cbd5b3c6a9a2
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Boolean boolean0 = redisService0.set(keyPrefix0, "0", (Object) "");
      assertFalse(boolean0);
  }
  @Test(timeout = 4000)
  public void test_set_17()  throws Throwable  {
      //caseID:11fc3a892f431208b26d46179a380f73
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1).when(keyPrefix0).expireSeconds();
      doReturn("0").when(keyPrefix0).getPrefix();
      Integer integer0 = new Integer(0);
      Boolean boolean0 = redisService0.set(keyPrefix0, "BGREWRITEAOF", integer0);
      assertTrue(boolean0);
  }
  @Test(timeout = 4000)
  public void test_set_18()  throws Throwable  {
      //caseID:da43f7ae3bdc6fd1032ca00707ca1132
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("1").when(jedis0).setex(anyString() , anyInt() , anyString());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(29).when(keyPrefix0).expireSeconds();
      doReturn("1", "1").when(keyPrefix0).getPrefix();
      Boolean boolean0 = redisService0.set(keyPrefix0, "@kOl|u1c:", (Object) keyPrefix0);
      assertTrue(boolean0);
  }
  @Test(timeout = 4000)
  public void test_set_19()  throws Throwable  {
      //caseID:1b6a1f85049052d3f815595db7a6c6e8
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("1.0").when(jedis0).set(anyString() , anyString());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(0).when(keyPrefix0).expireSeconds();
      doReturn("1").when(keyPrefix0).getPrefix();
      Boolean boolean0 = redisService0.set(keyPrefix0, "0", (Object) "0");
      assertTrue(boolean0);
  }
  @Test(timeout = 4000)
  public void test_set_20()  throws Throwable  {
      //caseID:0630658a90dec4406e9e362f1a2c81c4
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(0).when(keyPrefix0).expireSeconds();
      doReturn("com.jesper.seckill.redis.RedisService", "T]/7]ssV<").when(keyPrefix0).getPrefix();
      Boolean boolean0 = redisService0.set(keyPrefix0, "@kOl|u1c:", (Object) keyPrefix0);
      assertTrue(boolean0);
  }}
