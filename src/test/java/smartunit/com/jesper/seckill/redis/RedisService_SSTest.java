/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.jesper.seckill.redis;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import static org.smartunit.runtime.SmartAssertions.*;
import com.alibaba.fastjson.JSONException;
import com.jesper.seckill.redis.KeyPrefix;
import com.jesper.seckill.redis.OrderKey;
import com.jesper.seckill.redis.RedisService;
import javax.swing.JLayeredPane;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;
import redis.clients.jedis.Jedis;
import redis.clients.jedis.JedisPool;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class RedisService_SSTest extends RedisService_SSTest_scaffolding {

  @Test(timeout = 4000)
  public void test_stringToBean_00()  throws Throwable  {
      RedisService redisService0 = new RedisService();
      Object object0 = RedisService.stringToBean("{}", (Class<Object>) null);
      assertNull(object0);
  }
  @Test(timeout = 4000)
  public void test_stringToBean_01()  throws Throwable  {
      RedisService redisService0 = new RedisService();
      Class<Integer> class0 = Integer.class;
      Integer integer0 = RedisService.stringToBean("", class0);
      assertNull(integer0);
  }
  @Test(timeout = 4000)
  public void test_beanToString_02()  throws Throwable  {
      RedisService redisService0 = new RedisService();
      String string0 = RedisService.beanToString((Object) null);
      assertNull(string0);
  }
  @Test(timeout = 4000)
  public void test_stringToBean_03()  throws Throwable  {
      RedisService redisService0 = new RedisService();
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        RedisService.stringToBean("{}", class0);
      
      } catch(Throwable e) {
         //
         // Exception Name: NumberFormatException
         // For input string: \"{}\"
         //
      }
  }
  @Test(timeout = 4000)
  public void test_decr_04()  throws Throwable  {
      RedisService redisService0 = new RedisService();
      Class<Long> class0 = Long.class;
      // Undeclared exception!
      try { 
        RedisService.stringToBean("1.0", class0);
      
      } catch(Throwable e) {
         //
         // Exception Name: NumberFormatException
         // For input string: \"1.0\"
         //
      }
  }
  @Test(timeout = 4000)
  public void test_exists_05()  throws Throwable  {
      RedisService redisService0 = new RedisService();
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      // Undeclared exception!
      try { 

        //invoke method for redisService0
        redisService0.set(keyPrefix0, "Y", "1");
      
      } catch(Throwable e) {
         //
         // Exception Name: NullPointerException
         // no message in exception (getMessage() returned null)
         //
      }
  }
  @Test(timeout = 4000)
  public void test_decr_06()  throws Throwable  {
      RedisService redisService0 = new RedisService();
      OrderKey orderKey0 = new OrderKey("1.0");
      // Undeclared exception!
      try { 

        //invoke method for redisService0
        redisService0.decr((KeyPrefix) orderKey0, "com.jesper.seckill.redis.RedisService");
      
      } catch(Throwable e) {
         //
         // Exception Name: NullPointerException
         // no message in exception (getMessage() returned null)
         //
      }
  }
  @Test(timeout = 4000)
  public void test_incr_08()  throws Throwable  {
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("SADD").when(keyPrefix0).getPrefix();
      Long long0 = redisService0.incr(keyPrefix0, "1.0");
      assertNull(long0);
  }
  @Test(timeout = 4000)
  public void test_delete_09()  throws Throwable  {
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("I").when(keyPrefix0).getPrefix();
      // Undeclared exception!
      try { 

        //invoke method for redisService0
        redisService0.delete(keyPrefix0, "0");
      
      } catch(Throwable e) {
         //
         // Exception Name: NullPointerException
         // no message in exception (getMessage() returned null)
         //
      }
  }
  @Test(timeout = 4000)
  public void test_exists_10()  throws Throwable  {
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("2751").when(keyPrefix0).getPrefix();
      // Undeclared exception!
      try { 

        //invoke method for redisService0
        redisService0.exists(keyPrefix0, "0");
      
      } catch(Throwable e) {
         //
         // Exception Name: NullPointerException
         // no message in exception (getMessage() returned null)
         //
      }
  }
  @Test(timeout = 4000)
  public void test_delete_11()  throws Throwable  {
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Long long0 = new Long(2415L);
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(jedis0).del(nullable(java.lang.String.class));
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("14").when(keyPrefix0).getPrefix();
      boolean boolean0 = redisService0.delete(keyPrefix0, "1899");
      assertTrue(boolean0);
  }
  @Test(timeout = 4000)
  public void test_delete_12()  throws Throwable  {
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Long long0 = new Long(0L);
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(jedis0).del(nullable(java.lang.String.class));
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("14").when(keyPrefix0).getPrefix();
      boolean boolean0 = redisService0.delete(keyPrefix0, "0");
      assertFalse(boolean0);
  }
  @Test(timeout = 4000)
  public void test_get_13()  throws Throwable  {
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("org.springframework.core.env.MissingRequiredPropertiesException").when(keyPrefix0).getPrefix();
      Class<String> class0 = String.class;
      String string0 = redisService0.get(keyPrefix0, "1", class0);
      assertNull(string0);
  }
  @Test(timeout = 4000)
  public void test_decr_14()  throws Throwable  {
      RedisService redisService0 = new RedisService();
      Class<Long> class0 = Long.TYPE;
      Long long0 = RedisService.stringToBean("-1", class0);
      assertNotNull(long0);
      

      //prepare data for jedisPool0
      Jedis jedis0 = new Jedis();
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("-1").when(keyPrefix0).getPrefix();
      // Undeclared exception!
      try { 

        //invoke method for redisService0
        redisService0.decr(keyPrefix0, "com.jesper.seckill.redis.RedisService");
      
      } catch(Throwable e) {
         //
         // Exception Name: RuntimeException
         // java.io.IOException: Remote address/port is not opened: org.smartunit.runtime.vnet.EndPointInfo@87839382
         //
      }
  }
  @Test(timeout = 4000)
  public void test_get_15()  throws Throwable  {
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("e").when(jedis0).get(nullable(java.lang.String.class));
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);
      OrderKey orderKey0 = new OrderKey("0");
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 

        //invoke method for redisService0
        redisService0.get((KeyPrefix) orderKey0, "1", class0);
      
      } catch(Throwable e) {
         //
         // Exception Name: JSONException
         // syntax error, pos 1, json : e
         //
      }
  }
  @Test(timeout = 4000)
  public void test_get_16()  throws Throwable  {
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("+HV);r=$|lnMrg").when(jedis0).get(nullable(java.lang.String.class));
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("0").when(keyPrefix0).getPrefix();
      Class<String> class0 = String.class;
      String string0 = redisService0.get(keyPrefix0, "1", class0);
      assertNotNull(string0);
      assertEquals("+HV);r=$|lnMrg", string0);
  }
  @Test(timeout = 4000)
  public void test_set_17()  throws Throwable  {
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);
      OrderKey orderKey0 = OrderKey.getSeckillOrderByUidGid;
      Boolean boolean0 = redisService0.set((KeyPrefix) orderKey0, "", "");
      assertFalse(boolean0);
  }
  @Test(timeout = 4000)
  public void test_set_18()  throws Throwable  {
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(327680).when(keyPrefix0).expireSeconds();
      doReturn("org.springframework.core.convert.support.ArrayToObjectConverter").when(keyPrefix0).getPrefix();
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      Boolean boolean0 = redisService0.set(keyPrefix0, "1", integer0);
      assertTrue(boolean0);
  }
  @Test(timeout = 4000)
  public void test_set_19()  throws Throwable  {
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((-1)).when(keyPrefix0).expireSeconds();
      doReturn("0").when(keyPrefix0).getPrefix();
      Long long0 = new Long(0L);
      Boolean boolean0 = redisService0.set(keyPrefix0, "com.jesper.seckill.redis.RedisService", long0);
      assertTrue(boolean0);
  }
  @Test(timeout = 4000)
  public void test_set_20()  throws Throwable  {
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(0).when(keyPrefix0).expireSeconds();
      doReturn("-686").when(keyPrefix0).getPrefix();
      Boolean boolean0 = redisService0.set(keyPrefix0, "", "rO'2`s9Yj");
      assertTrue(boolean0);
  }}
