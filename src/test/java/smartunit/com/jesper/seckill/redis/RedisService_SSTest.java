/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.jesper.seckill.redis;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import static org.smartunit.runtime.SmartAssertions.*;
import com.alibaba.fastjson.JSONException;
import com.jesper.seckill.redis.KeyPrefix;
import com.jesper.seckill.redis.RedisService;
import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.GraphicsConfiguration;
import java.awt.Insets;
import java.awt.LayoutManager;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.dnd.DropTarget;
import java.awt.event.ActionListener;
import java.awt.event.ComponentListener;
import java.awt.event.ContainerListener;
import java.awt.event.FocusListener;
import java.awt.event.HierarchyBoundsListener;
import java.awt.event.HierarchyListener;
import java.awt.event.InputMethodListener;
import java.awt.event.KeyListener;
import java.awt.im.InputContext;
import java.awt.im.InputMethodRequests;
import java.awt.image.ColorModel;
import java.util.Locale;
import javax.accessibility.AccessibleContext;
import javax.swing.Action;
import javax.swing.BoundedRangeModel;
import javax.swing.InputVerifier;
import javax.swing.JFormattedTextField;
import javax.swing.JLayeredPane;
import javax.swing.JPopupMenu;
import javax.swing.border.Border;
import javax.swing.event.AncestorListener;
import javax.swing.event.CaretListener;
import javax.swing.text.Document;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;
import redis.clients.jedis.Jedis;
import redis.clients.jedis.JedisPool;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class RedisService_SSTest extends RedisService_SSTest_scaffolding {

  @Test(timeout = 4000)
  public void test_stringToBean_00()  throws Throwable  {
      //caseID:3e7708860fa6b8dca74bc91c6de7e2c2
      RedisService redisService0 = new RedisService();
      Class<JFormattedTextField> class0 = JFormattedTextField.class;
      JFormattedTextField jFormattedTextField0 = RedisService.stringToBean("", class0);
      assertNull(jFormattedTextField0);
  }
  @Test(timeout = 4000)
  public void test_stringToBean_01()  throws Throwable  {
      //caseID:fe5f607729b96596c9c03ed99c160682
      RedisService redisService0 = new RedisService();
      Object object0 = RedisService.stringToBean("{}", (Class<Object>) null);
      assertNull(object0);
  }
  @Test(timeout = 4000)
  public void test_stringToBean_02()  throws Throwable  {
      //caseID:0edd35a014fe2d6a50ba06f761b88e43
      RedisService redisService0 = new RedisService();
      Class<Integer> class0 = Integer.TYPE;
      // Undeclared exception!
      try { 
        RedisService.stringToBean("1.0", class0);
      } catch(Throwable e) {
         verifyException("java.lang.NumberFormatException", e);
         assertEquals("java.lang.NumberFormatException", e.getClass().getName());
         assertEquals("For input string: \"1.0\"", e.getMessage());
      }
  }
  @Test(timeout = 4000)
  public void test_stringToBean_03()  throws Throwable  {
      //caseID:4d58bebc5889bb7061d9702d370ab07c
      RedisService redisService0 = new RedisService();
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        RedisService.stringToBean("1.0", class0);
      } catch(Throwable e) {
         verifyException("java.lang.NumberFormatException", e);
         assertEquals("java.lang.NumberFormatException", e.getClass().getName());
         assertEquals("For input string: \"1.0\"", e.getMessage());
      }
  }
  @Test(timeout = 4000)
  public void test_stringToBean_04()  throws Throwable  {
      //caseID:17526a89c08b57d9057c973d3e4a3ba2
      RedisService redisService0 = new RedisService();
      Class<Long> class0 = Long.TYPE;
      // Undeclared exception!
      try { 
        RedisService.stringToBean("{}", class0);
      } catch(Throwable e) {
         verifyException("java.lang.NumberFormatException", e);
         assertEquals("java.lang.NumberFormatException", e.getClass().getName());
         assertEquals("For input string: \"{}\"", e.getMessage());
      }
  }
  @Test(timeout = 4000)
  public void test_stringToBean_05()  throws Throwable  {
      //caseID:8e6bd4a9f9e61d7755cd4b06612c09fa
      RedisService redisService0 = new RedisService();
      Class<Long> class0 = Long.class;
      // Undeclared exception!
      try { 
        RedisService.stringToBean("m3w2&,DYF?GXw7", class0);
      } catch(Throwable e) {
         verifyException("java.lang.NumberFormatException", e);
         assertEquals("java.lang.NumberFormatException", e.getClass().getName());
         assertEquals("For input string: \"m3w2&,DYF?GXw7\"", e.getMessage());
      }
  }
  @Test(timeout = 4000)
  public void test_beanToString_06()  throws Throwable  {
      //caseID:29a0a35f7b83896b5e73c68fb924c80c
      RedisService redisService0 = new RedisService();
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      String string0 = RedisService.beanToString(integer0);
      assertEquals("200", string0);
  }
  @Test(timeout = 4000)
  public void test_beanToString_07()  throws Throwable  {
      //caseID:5316fdd49f3e1b49941b10718e59070b
      RedisService redisService0 = new RedisService();
      Long long0 = new Long(2417L);
      String string0 = RedisService.beanToString(long0);
      assertEquals("2417", string0);
  }
  @Test(timeout = 4000)
  public void test_exists_08()  throws Throwable  {
      //caseID:94f4dbb79af05acd000b3516da0985e3
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Boolean boolean0 = Boolean.TRUE;
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(boolean0).when(jedis0).exists(anyString());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("Expired credentials detected").when(keyPrefix0).getPrefix();
      boolean boolean1 = redisService0.exists(keyPrefix0, "saltLength");
      assertTrue(boolean1);
  }
  @Test(timeout = 4000)
  public void test_incr_09()  throws Throwable  {
      //caseID:2e9d23d9ba0ac776f7ce719aa09a424a
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("V1Q=sb").when(keyPrefix0).getPrefix();
      Long long0 = redisService0.incr(keyPrefix0, "f|a22z3eHv_#u");
      assertNull(long0);
  }
  @Test(timeout = 4000)
  public void test_decr_10()  throws Throwable  {
      //caseID:73151178f1a57ce36e161656e6570b7b
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("coyoteRequest.maxPostSizeExceeded").when(keyPrefix0).getPrefix();
      Long long0 = redisService0.decr(keyPrefix0, ", new = ");
      assertNull(long0);
  }
  @Test(timeout = 4000)
  public void test_delete_11()  throws Throwable  {
      //caseID:0d92bd2630aadebc245cf62f03953930
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Long long0 = new Long(0L);
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(jedis0).del(anyString());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("1.0").when(keyPrefix0).getPrefix();
      boolean boolean0 = redisService0.delete(keyPrefix0, "");
      assertFalse(boolean0);
  }
  @Test(timeout = 4000)
  public void test_delete_12()  throws Throwable  {
      //caseID:0b74badc9dde114a008215824180939e
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Long long0 = new Long(3292L);
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(jedis0).del(anyString());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("").when(keyPrefix0).getPrefix();
      boolean boolean0 = redisService0.delete(keyPrefix0, "");
      assertTrue(boolean0);
  }
  @Test(timeout = 4000)
  public void test_set_13()  throws Throwable  {
      //caseID:972ba14081c99f98d6e392abf748aec5
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Boolean boolean0 = redisService0.set(keyPrefix0, "1.0", (Object) null);
      assertFalse(boolean0);
  }
  @Test(timeout = 4000)
  public void test_get_14()  throws Throwable  {
      //caseID:82bab28bff40b5f465d78461c3931bb4
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("2145804614").when(keyPrefix0).getPrefix();
      Class<Object> class0 = Object.class;
      Object object0 = redisService0.get(keyPrefix0, "", class0);
      assertNull(object0);
  }
  @Test(timeout = 4000)
  public void test_set_15()  throws Throwable  {
      //caseID:7ed63648818e1c723b44b5b79b195165
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());

      //prepare data for jFormattedTextField0
      Insets insets0 = mock(Insets.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      InputMethodRequests inputMethodRequests0 = mock(InputMethodRequests.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Document document0 = mock(Document.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Color color0 = mock(Color.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      CaretListener[] caretListenerArray0 = new CaretListener[4];
      Color color1 = mock(Color.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      BoundedRangeModel boundedRangeModel0 = mock(BoundedRangeModel.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      ActionListener[] actionListenerArray0 = new ActionListener[3];
      Action action0 = mock(Action.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      AccessibleContext accessibleContext0 = mock(AccessibleContext.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      JFormattedTextField.AbstractFormatterFactory jFormattedTextField_AbstractFormatterFactory0 = mock(JFormattedTextField.AbstractFormatterFactory.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      JFormattedTextField.AbstractFormatter jFormattedTextField_AbstractFormatter0 = mock(JFormattedTextField.AbstractFormatter.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Action[] actionArray0 = new Action[3];
      Dimension dimension0 = mock(Dimension.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Dimension dimension1 = mock(Dimension.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Insets insets1 = mock(Insets.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      InputVerifier inputVerifier0 = mock(InputVerifier.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Graphics graphics0 = mock(Graphics.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      JPopupMenu jPopupMenu0 = mock(JPopupMenu.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Border border0 = mock(Border.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Component.BaselineResizeBehavior component_BaselineResizeBehavior0 = Component.BaselineResizeBehavior.CONSTANT_DESCENT;
      AncestorListener[] ancestorListenerArray0 = new AncestorListener[8];
      LayoutManager layoutManager0 = mock(LayoutManager.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      ContainerListener[] containerListenerArray0 = new ContainerListener[2];
      Component[] componentArray0 = new Component[7];
      Point point0 = mock(Point.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Point point1 = mock(Point.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Locale locale0 = Locale.KOREAN;
      KeyListener[] keyListenerArray0 = new KeyListener[1];
      InputMethodListener[] inputMethodListenerArray0 = new InputMethodListener[9];
      InputContext inputContext0 = mock(InputContext.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      HierarchyListener[] hierarchyListenerArray0 = new HierarchyListener[7];
      HierarchyBoundsListener[] hierarchyBoundsListenerArray0 = new HierarchyBoundsListener[8];
      GraphicsConfiguration graphicsConfiguration0 = mock(GraphicsConfiguration.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      FocusListener[] focusListenerArray0 = new FocusListener[8];
      Container container0 = mock(Container.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      DropTarget dropTarget0 = mock(DropTarget.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Cursor cursor0 = mock(Cursor.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      ComponentListener[] componentListenerArray0 = new ComponentListener[1];
      ColorModel colorModel0 = mock(ColorModel.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Rectangle rectangle0 = mock(Rectangle.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      JFormattedTextField jFormattedTextField0 = mock(JFormattedTextField.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(rectangle0).when(jFormattedTextField0).getBounds();
      doReturn(colorModel0).when(jFormattedTextField0).getColorModel();
      doReturn(componentListenerArray0).when(jFormattedTextField0).getComponentListeners();
      doReturn(cursor0).when(jFormattedTextField0).getCursor();
      doReturn(dropTarget0).when(jFormattedTextField0).getDropTarget();
      doReturn(container0).when(jFormattedTextField0).getFocusCycleRootAncestor();
      doReturn(focusListenerArray0).when(jFormattedTextField0).getFocusListeners();
      doReturn(true).when(jFormattedTextField0).getFocusTraversalKeysEnabled();
      doReturn(graphicsConfiguration0).when(jFormattedTextField0).getGraphicsConfiguration();
      doReturn(hierarchyBoundsListenerArray0).when(jFormattedTextField0).getHierarchyBoundsListeners();
      doReturn(hierarchyListenerArray0).when(jFormattedTextField0).getHierarchyListeners();
      doReturn(false).when(jFormattedTextField0).getIgnoreRepaint();
      doReturn(inputContext0).when(jFormattedTextField0).getInputContext();
      doReturn(inputMethodListenerArray0).when(jFormattedTextField0).getInputMethodListeners();
      doReturn(keyListenerArray0).when(jFormattedTextField0).getKeyListeners();
      doReturn(locale0).when(jFormattedTextField0).getLocale();
      doReturn(point1).when(jFormattedTextField0).getLocation();
      doReturn(point0).when(jFormattedTextField0).getLocationOnScreen();
      doReturn(true).when(jFormattedTextField0).isBackgroundSet();
      doReturn(false).when(jFormattedTextField0).isCursorSet();
      doReturn(false).when(jFormattedTextField0).isDisplayable();
      doReturn(true).when(jFormattedTextField0).isEnabled();
      doReturn(false).when(jFormattedTextField0).isFocusOwner();
      doReturn(false).when(jFormattedTextField0).isFocusTraversable();
      doReturn(true).when(jFormattedTextField0).isFocusable();
      doReturn(false).when(jFormattedTextField0).isFontSet();
      doReturn(false).when(jFormattedTextField0).isForegroundSet();
      doReturn(false).when(jFormattedTextField0).isLightweight();
      doReturn(true).when(jFormattedTextField0).isMaximumSizeSet();
      doReturn(false).when(jFormattedTextField0).isMinimumSizeSet();
      doReturn(1).when(jFormattedTextField0).getComponentCount();
      doReturn(componentArray0).when(jFormattedTextField0).getComponents();
      doReturn(containerListenerArray0).when(jFormattedTextField0).getContainerListeners();
      doReturn(layoutManager0).when(jFormattedTextField0).getLayout();
      doReturn(true).when(jFormattedTextField0).isFocusCycleRoot();
      doReturn(false).when(jFormattedTextField0).isFocusTraversalPolicySet();
      doReturn((-404.25058F)).when(jFormattedTextField0).getAlignmentX();
      doReturn((-424.773F)).when(jFormattedTextField0).getAlignmentY();
      doReturn(ancestorListenerArray0).when(jFormattedTextField0).getAncestorListeners();
      doReturn(false).when(jFormattedTextField0).getAutoscrolls();
      doReturn(component_BaselineResizeBehavior0).when(jFormattedTextField0).getBaselineResizeBehavior();
      doReturn(border0).when(jFormattedTextField0).getBorder();
      doReturn(jPopupMenu0).when(jFormattedTextField0).getComponentPopupMenu();
      doReturn(60).when(jFormattedTextField0).getDebugGraphicsOptions();
      doReturn(graphics0).when(jFormattedTextField0).getGraphics();
      doReturn(47).when(jFormattedTextField0).getHeight();
      doReturn(true).when(jFormattedTextField0).getInheritsPopupMenu();
      doReturn(inputVerifier0).when(jFormattedTextField0).getInputVerifier();
      doReturn(insets1).when(jFormattedTextField0).getInsets();
      doReturn(dimension1).when(jFormattedTextField0).getMaximumSize();
      doReturn(dimension0).when(jFormattedTextField0).getMinimumSize();
      doReturn(false).when(jFormattedTextField0).isDoubleBuffered();
      doReturn(true).when(jFormattedTextField0).isManagingFocus();
      doReturn(actionArray0).when(jFormattedTextField0).getActions();
      doReturn(1512).when(jFormattedTextField0).getFocusLostBehavior();
      doReturn(jFormattedTextField_AbstractFormatter0).when(jFormattedTextField0).getFormatter();
      doReturn(jFormattedTextField_AbstractFormatterFactory0).when(jFormattedTextField0).getFormatterFactory();
      doReturn(false).when(jFormattedTextField0).isEditValid();
      doReturn(accessibleContext0).when(jFormattedTextField0).getAccessibleContext();
      doReturn(action0).when(jFormattedTextField0).getAction();
      doReturn(actionListenerArray0).when(jFormattedTextField0).getActionListeners();
      doReturn(25).when(jFormattedTextField0).getColumns();
      doReturn(661).when(jFormattedTextField0).getHorizontalAlignment();
      doReturn(boundedRangeModel0).when(jFormattedTextField0).getHorizontalVisibility();
      doReturn(color1).when(jFormattedTextField0).getCaretColor();
      doReturn(caretListenerArray0).when(jFormattedTextField0).getCaretListeners();
      doReturn(100).when(jFormattedTextField0).getCaretPosition();
      doReturn(color0).when(jFormattedTextField0).getDisabledTextColor();
      doReturn(document0).when(jFormattedTextField0).getDocument();
      doReturn(false).when(jFormattedTextField0).getDragEnabled();
      doReturn('Y').when(jFormattedTextField0).getFocusAccelerator();
      doReturn(inputMethodRequests0).when(jFormattedTextField0).getInputMethodRequests();
      doReturn(insets0).when(jFormattedTextField0).getMargin();
      doReturn(false).when(jFormattedTextField0).isEditable();
      // Undeclared exception!
      try { 

        //invoke method for redisService0
        redisService0.set(keyPrefix0, "1.0", jFormattedTextField0);
      } catch(Throwable e) {
      }
  }
  @Test(timeout = 4000)
  public void test_get_16()  throws Throwable  {
      //caseID:72ef07956b796987decc276077c8bb53
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("1").when(jedis0).get(anyString());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("Dq`)W!h(Pz,e").when(keyPrefix0).getPrefix();
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 

        //invoke method for redisService0
        redisService0.get(keyPrefix0, "^#Zz~A&wZ", class0);
      } catch(Throwable e) {
         verifyException("com.alibaba.fastjson.JSON", e);
         assertEquals("com.alibaba.fastjson.JSONException", e.getClass().getName());
         assertEquals("can not cast to JSONObject.", e.getMessage());
      }
  }
  @Test(timeout = 4000)
  public void test_get_17()  throws Throwable  {
      //caseID:7c96b021e19f5b060f15a9f2504248cb
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("0").when(jedis0).get(anyString());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("0").when(keyPrefix0).getPrefix();
      Class<String> class0 = String.class;
      String string0 = redisService0.get(keyPrefix0, "0", class0);
      assertEquals("0", string0);
      assertNotNull(string0);
  }
  @Test(timeout = 4000)
  public void test_set_18()  throws Throwable  {
      //caseID:5c6d2659b9330d0d66c31862ed903c11
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Boolean boolean0 = redisService0.set(keyPrefix0, "", (Object) "");
      assertFalse(boolean0);
  }
  @Test(timeout = 4000)
  public void test_set_19()  throws Throwable  {
      //caseID:bd1ab1627378a4dc3c1c2ef721d57c68
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("com.jesper.seckill.redis.RedisService").when(jedis0).set(anyString() , anyString());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(0).when(keyPrefix0).expireSeconds();
      doReturn("com.jesper.seckill.redis.RedisService").when(keyPrefix0).getPrefix();
      Boolean boolean0 = redisService0.set(keyPrefix0, "sZkb", (Object) "sZkb");
      assertTrue(boolean0);
  }
  @Test(timeout = 4000)
  public void test_set_20()  throws Throwable  {
      //caseID:d9ac052c98f1f2fff36fac2de44c52be
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1).when(keyPrefix0).expireSeconds();
      doReturn("9").when(keyPrefix0).getPrefix();
      Boolean boolean0 = redisService0.set(keyPrefix0, "1", (Object) "1");
      assertTrue(boolean0);
  }}
