/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.jesper.seckill.redis;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import static org.smartunit.runtime.SmartAssertions.*;
import com.jesper.seckill.redis.KeyPrefix;
import com.jesper.seckill.redis.RedisService;
import javax.swing.JLayeredPane;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;
import redis.clients.jedis.Jedis;
import redis.clients.jedis.JedisPool;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class RedisService_SSTest extends RedisService_SSTest_scaffolding {

  @Test(timeout = 4000)
  public void test_exists_00()  throws Throwable  {
      //caseID:5949587b3db625dae4fff6429210777a
      RedisService redisService0 = new RedisService();
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Long long0 = new Long(1845L);
      // Undeclared exception!
      try { 

        //invoke method for redisService0
        redisService0.set(keyPrefix0, "|g,]Fq`+;B n", long0);
      } catch(Throwable e) {
         verifyException("com.jesper.seckill.redis.RedisService", e);
         assertEquals("java.lang.NullPointerException", e.getClass().getName());
      }
  }
  @Test(timeout = 4000)
  public void test_stringToBean_01()  throws Throwable  {
      //caseID:e9de259207e5ad299a26d96489900a1a
      RedisService redisService0 = new RedisService();
      Class<Integer> class0 = Integer.class;
      Integer integer0 = RedisService.stringToBean("", class0);
      assertNull(integer0);
  }
  @Test(timeout = 4000)
  public void test_stringToBean_02()  throws Throwable  {
      //caseID:86c57b20a0dbd70a1bdde39900391613
      RedisService redisService0 = new RedisService();
      Object object0 = RedisService.stringToBean("{}", (Class<Object>) null);
      assertNull(object0);
  }
  @Test(timeout = 4000)
  public void test_stringToBean_03()  throws Throwable  {
      //caseID:bf50796282ca6952b5a0cb7d9e9b7488
      RedisService redisService0 = new RedisService();
      Class<Integer> class0 = Integer.TYPE;
      // Undeclared exception!
      try { 
        RedisService.stringToBean("com.google.common.reflect.Types", class0);
      } catch(Throwable e) {
         verifyException("java.lang.NumberFormatException", e);
         assertEquals("java.lang.NumberFormatException", e.getClass().getName());
         assertEquals("For input string: \"com.google.common.reflect.Types\"", e.getMessage());
      }
  }
  @Test(timeout = 4000)
  public void test_stringToBean_04()  throws Throwable  {
      //caseID:ed4c05a9c7af86250e40248b159a765b
      RedisService redisService0 = new RedisService();
      Class<Long> class0 = Long.TYPE;
      Long long0 = RedisService.stringToBean("1", class0);
      assertNotNull(long0);
      assertEquals(1L, (long)long0);
  }
  @Test(timeout = 4000)
  public void test_stringToBean_05()  throws Throwable  {
      //caseID:908358fdd0191450b5ed7798c5ee3590
      RedisService redisService0 = new RedisService();
      Class<Object> class0 = Object.class;
      Object object0 = RedisService.stringToBean("{}", class0);
      assertNotNull(object0);
  }
  @Test(timeout = 4000)
  public void test_beanToString_06()  throws Throwable  {
      //caseID:2a8416a9bb34ece8ebd9368c8118d0e2
      RedisService redisService0 = new RedisService();
      Long long0 = new Long(0L);
      String string0 = RedisService.beanToString(long0);
      assertEquals("0", string0);
  }
  @Test(timeout = 4000)
  public void test_exists_07()  throws Throwable  {
      //caseID:87729c4dbad302614cd0b1fbd3648cb5
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Boolean boolean0 = Boolean.valueOf("com.jesper.seckill.redis.RedisService");
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(boolean0).when(jedis0).exists(anyString());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("1").when(keyPrefix0).getPrefix();
      boolean boolean1 = redisService0.exists(keyPrefix0, "com.jesper.seckill.redis.RedisService");
      assertFalse(boolean1);
  }
  @Test(timeout = 4000)
  public void test_incr_08()  throws Throwable  {
      //caseID:038f59d2d307660674e40f26a35e317c
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("").when(keyPrefix0).getPrefix();
      Long long0 = redisService0.incr(keyPrefix0, "97");
      assertNull(long0);
  }
  @Test(timeout = 4000)
  public void test_decr_09()  throws Throwable  {
      //caseID:1549677ce5bfc3acab9c4d84c6cf7721
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("0").when(keyPrefix0).getPrefix();
      Long long0 = redisService0.decr(keyPrefix0, "com.jesper.seckill.redis.RedisService");
      assertNull(long0);
  }
  @Test(timeout = 4000)
  public void test_delete_10()  throws Throwable  {
      //caseID:d3df60765167cc22aab8c0373826905b
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Long long0 = new Long((-4107L));
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(jedis0).del(anyString());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("0").when(keyPrefix0).getPrefix();
      boolean boolean0 = redisService0.delete(keyPrefix0, "0");
      assertFalse(boolean0);
  }
  @Test(timeout = 4000)
  public void test_delete_11()  throws Throwable  {
      //caseID:e3e918358b950e6d2e684140c43e223e
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Long long0 = new Long(1L);
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(jedis0).del(anyString());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("Property name must not be null").when(keyPrefix0).getPrefix();
      boolean boolean0 = redisService0.delete(keyPrefix0, "Property name must not be null");
      assertTrue(boolean0);
  }
  @Test(timeout = 4000)
  public void test_set_12()  throws Throwable  {
      //caseID:36f40a6069146af20d5c13e106a53b3c
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Boolean boolean0 = redisService0.set(keyPrefix0, "17", (Object) null);
      assertFalse(boolean0);
  }
  @Test(timeout = 4000)
  public void test_set_13()  throws Throwable  {
      //caseID:c6d9bca6904e4d4851d2415008b13d84
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Boolean boolean0 = redisService0.set(keyPrefix0, "", (Object) null);
      assertFalse(boolean0);
  }
  @Test(timeout = 4000)
  public void test_get_14()  throws Throwable  {
      //caseID:30eb3976e39e3fc163ffa61f321e1e25
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("com.jesper.seckill.redis.RedisService").when(keyPrefix0).getPrefix();
      Class<Integer> class0 = Integer.class;
      Integer integer0 = redisService0.get(keyPrefix0, "34", class0);
      assertNull(integer0);
  }
  @Test(timeout = 4000)
  public void test_get_15()  throws Throwable  {
      //caseID:20bbb02be31da874aec3d391117a3791
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("1").when(jedis0).get(anyString());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("1").when(keyPrefix0).getPrefix();
      Class<Integer> class0 = Integer.class;
      Integer integer0 = redisService0.get(keyPrefix0, "1", class0);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
  }
  @Test(timeout = 4000)
  public void test_get_16()  throws Throwable  {
      //caseID:19e04992986394cedb69583dbf525ce9
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("tomcat/jdbc/").when(jedis0).get(anyString());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("11").when(keyPrefix0).getPrefix();
      Class<Long> class0 = Long.class;
      // Undeclared exception!
      try { 

        //invoke method for redisService0
        redisService0.get(keyPrefix0, "1.0", class0);
      } catch(Throwable e) {
         verifyException("java.lang.NumberFormatException", e);
         assertEquals("java.lang.NumberFormatException", e.getClass().getName());
         assertEquals("For input string: \"tomcat/jdbc/\"", e.getMessage());
      }
  }
  @Test(timeout = 4000)
  public void test_get_17()  throws Throwable  {
      //caseID:d8ab75d02c5ef74d1ec7f97981cf37a2
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("CP'1d[]").when(jedis0).get(anyString());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("").when(keyPrefix0).getPrefix();
      Class<String> class0 = String.class;
      String string0 = redisService0.get(keyPrefix0, "", class0);
      assertNotNull(string0);
      assertEquals("CP'1d[]", string0);
  }
  @Test(timeout = 4000)
  public void test_set_18()  throws Throwable  {
      //caseID:20015c419239dc0fe8f90b40b8c29287
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Boolean boolean0 = redisService0.set(keyPrefix0, "", (Object) "");
      assertFalse(boolean0);
  }
  @Test(timeout = 4000)
  public void test_set_19()  throws Throwable  {
      //caseID:ebc731fc3523ee8bae038aca71f78a09
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("").when(jedis0).setex(anyString() , anyInt() , anyString());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(3749).when(keyPrefix0).expireSeconds();
      doReturn("1.0").when(keyPrefix0).getPrefix();
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      Boolean boolean0 = redisService0.set(keyPrefix0, "1.0", integer0);
      assertTrue(boolean0);
  }
  @Test(timeout = 4000)
  public void test_set_20()  throws Throwable  {
      //caseID:7f14e4db0ba9c83161330ae1f90741fb
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("735").when(jedis0).set(anyString() , anyString());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(2000).when(keyPrefix0).expireSeconds();
      doReturn("0").when(keyPrefix0).getPrefix();
      Boolean boolean0 = redisService0.set(keyPrefix0, "1.0", (Object) "1.0");
      assertTrue(boolean0);
  }
  }
