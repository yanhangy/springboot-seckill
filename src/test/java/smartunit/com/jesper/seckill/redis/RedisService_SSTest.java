/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.jesper.seckill.redis;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import static org.smartunit.runtime.SmartAssertions.*;
import com.alibaba.fastjson.JSONException;
import com.jesper.seckill.redis.KeyPrefix;
import com.jesper.seckill.redis.RedisService;
import javax.swing.JLayeredPane;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;
import redis.clients.jedis.Jedis;
import redis.clients.jedis.JedisPool;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class RedisService_SSTest extends RedisService_SSTest_scaffolding {
// allCoveredLines:[15, 24, 26, 28, 29, 30, 31, 33, 42, 44, 45, 46, 47, 49, 50, 51, 52, 54, 57, 59, 68, 70, 72, 73, 75, 84, 86, 88, 89, 91, 99, 101, 103, 104, 106, 112, 115, 116, 117, 118, 119, 120, 121, 123, 129, 130, 132, 133, 134, 135, 136, 137, 139, 144, 145, 147]

  @Test(timeout = 4000)
  public void test_beanToString_00()  throws Throwable  {
      //caseID:7bffea66627bef765c66fece76e8da23
      //CoveredLines: [15, 112, 115, 116, 117]
      //Input_0_Object: JLayeredPane.POPUP_LAYER
      //Assert: assertNotNull(method_result);
      //Assert: assertEquals("300", method_result);
      
      RedisService redisService0 = new RedisService();
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      
      //Call method: beanToString
      Object object0 = PrivateAccess.callMethod((Class<RedisService>) RedisService.class, redisService0, "beanToString", (Object) integer0, (Class<?>) Object.class);
      
      //Test Result Assert
      assertNotNull(object0);
      
      //Test Result Assert
      assertEquals("300", object0);
  }

  @Test(timeout = 4000)
  public void test_beanToString_01()  throws Throwable  {
      //caseID:de1ff4aed0cafe4638c4acbd25d4e842
      //CoveredLines: [15, 112, 115, 116, 118, 119]
      //Input_0_Object: 0L
      //Assert: assertNotNull(method_result);
      //Assert: assertEquals("0", method_result);
      
      RedisService redisService0 = new RedisService();
      Long long0 = new Long(0L);
      
      //Call method: beanToString
      Object object0 = PrivateAccess.callMethod((Class<RedisService>) RedisService.class, redisService0, "beanToString", (Object) long0, (Class<?>) Object.class);
      
      //Test Result Assert
      assertNotNull(object0);
      
      //Test Result Assert
      assertEquals("0", object0);
  }

  @Test(timeout = 4000)
  public void test_decr_02()  throws Throwable  {
      //caseID:4ea59b9afa2ff66b9209a0cf1b12a300
      //CoveredLines: [15, 99, 101, 103, 104, 106, 144, 145, 147]
      //Input_0_KeyPrefix: {getPrefix=\"`,pW]J3Fj\\\"0dMXxyh9\"}
      //Input_1_String: 3,[<
      //Assert: assertNull(method_result);
      
      RedisService redisService0 = new RedisService();
      //mock jedis0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock jedisPool0
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();
      
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);
      //mock keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("`,pW]J3Fj\"0dMXxyh9").when(keyPrefix0).getPrefix();
      
      //Call method: decr
      Long long0 = redisService0.decr(keyPrefix0, "3,[<");
      
      //Test Result Assert
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test_exists_03()  throws Throwable  {
      //caseID:4906cd4bd2fc5f65900e2f131db9f276
      //CoveredLines: [15, 68, 70, 72, 73, 75, 144, 145, 147]
      //Input_0_KeyPrefix: {getPrefix=\"o/S@t$Z::eili<e\"}
      //Input_1_String: org.apache.catalina.loader.WebappClassLoaderBase
      //Assert: assertFalse(method_result);
      
      RedisService redisService0 = new RedisService();
      Boolean boolean0 = Boolean.FALSE;
      //mock jedis0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(boolean0).when(jedis0).exists(anyString());
      //mock jedisPool0
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();
      
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);
      //mock keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("o/S@t$Z::eili<e").when(keyPrefix0).getPrefix();
      
      //Call method: exists
      boolean boolean1 = redisService0.exists(keyPrefix0, "org.apache.catalina.loader.WebappClassLoaderBase");
      
      //Test Result Assert
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test_get_04()  throws Throwable  {
      //caseID:1569dad4e930db0d56a69ea1a56fdd01
      //CoveredLines: [15, 24, 26, 28, 29, 30, 31, 33, 129, 130, 144, 145, 147]
      //Input_0_KeyPrefix: {getPrefix=\"1\"}
      //Input_1_String: 
      //Input_2_Class<String>: String.class
      //Assert: assertNull(method_result);
      
      RedisService redisService0 = new RedisService();
      //mock jedis0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock jedisPool0
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();
      
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);
      //mock keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("1").when(keyPrefix0).getPrefix();
      Class<String> class0 = String.class;
      
      //Call method: get
      String string0 = redisService0.get(keyPrefix0, "", class0);
      
      //Test Result Assert
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test_get_05()  throws Throwable  {
      //caseID:83f1b5e89da6b4a1d4d132800c899905
      //CoveredLines: [15, 24, 26, 28, 29, 30, 31, 33, 129, 132, 134, 136, 137, 144, 145, 147]
      //Input_0_KeyPrefix: {getPrefix=\"148\"}
      //Input_1_String: 
      //Input_2_Class<String>: String.class
      //Assert: assertEquals("1", method_result);
      //Assert: assertNotNull(method_result);
      
      RedisService redisService0 = new RedisService();
      //mock jedis0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("1").when(jedis0).get(anyString());
      //mock jedisPool0
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();
      
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);
      //mock keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("148").when(keyPrefix0).getPrefix();
      Class<String> class0 = String.class;
      
      //Call method: get
      String string0 = redisService0.get(keyPrefix0, "", class0);
      
      //Test Result Assert
      assertEquals("1", string0);
      
      //Test Result Assert
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test_incr_06()  throws Throwable  {
      //caseID:91ab5bf112935618748765d67352eea8
      //CoveredLines: [15, 84, 86, 88, 89, 91, 144, 145, 147]
      //Input_0_KeyPrefix: {getPrefix=\"6T\"}
      //Input_1_String: 1
      //Assert: assertNull(method_result);
      
      RedisService redisService0 = new RedisService();
      //mock jedis0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock jedisPool0
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();
      
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);
      //mock keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("6T").when(keyPrefix0).getPrefix();
      
      //Call method: incr
      Long long0 = redisService0.incr(keyPrefix0, "1");
      
      //Test Result Assert
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test_set_07()  throws Throwable  {
      //caseID:b68f58c57846d830177feb22d91c12bb
      //CoveredLines: [15, 42, 44, 45, 46, 47, 59, 112, 115, 116, 118, 120, 121, 144, 147]
      //Input_0_KeyPrefix: {}
      //Input_1_String: 
      //Input_2_String: 
      //Assert: assertFalse(method_result);
      
      RedisService redisService0 = new RedisService();
      //mock jedisPool0
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);
      //mock keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: set
      Boolean boolean0 = redisService0.set(keyPrefix0, "", "");
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test_set_08()  throws Throwable  {
      //caseID:e3026385e5802ca5e900ed50ad398574
      //CoveredLines: [15, 42, 44, 45, 46, 47, 59, 112, 115, 116, 118, 120, 121, 144, 145, 147]
      //Input_0_KeyPrefix: {}
      //Input_1_String: 
      //Input_2_String: 
      //Assert: assertFalse(method_result);
      
      RedisService redisService0 = new RedisService();
      //mock jedis0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock jedisPool0
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();
      
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);
      //mock keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: set
      Boolean boolean0 = redisService0.set(keyPrefix0, "", "");
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test_set_09()  throws Throwable  {
      //caseID:a22b3670a459c28ab906a22a3995c88c
      //CoveredLines: [15, 42, 44, 45, 46, 49, 50, 51, 52, 57, 59, 112, 115, 116, 118, 120, 121, 144, 145, 147]
      //Input_0_KeyPrefix: {}
      //Input_1_String: 
      //Input_2_String: V&R q}?o[.?vUJ0j
      //Assert: assertTrue(method_result);
      
      RedisService redisService0 = new RedisService();
      //mock jedis0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock jedisPool0
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();
      
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);
      //mock keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: set
      Boolean boolean0 = redisService0.set(keyPrefix0, "", "V&R q}?o[.?vUJ0j");
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test_set_10()  throws Throwable  {
      //caseID:a47c0be814a52dfc68660b720f186e2c
      //CoveredLines: [15, 42, 44, 45, 46, 49, 50, 51, 54, 57, 59, 112, 115, 116, 118, 120, 123, 144, 145, 147]
      //Input_0_KeyPrefix: {getPrefix=\"1.0\" (String) null, expireSeconds=1987}
      //Input_1_String: 
      //Input_2_Object: {getPrefix=\"1.0\" (String) null, expireSeconds=1987}
      //Assert: assertTrue(method_result);
      
      RedisService redisService0 = new RedisService();
      //mock jedis0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((String) null).when(jedis0).setex(anyString() , anyInt() , anyString());
      //mock jedisPool0
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();
      
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);
      //mock keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1987).when(keyPrefix0).expireSeconds();
      doReturn("1.0", (String) null).when(keyPrefix0).getPrefix();
      
      //Call method: set
      Boolean boolean0 = redisService0.set(keyPrefix0, "", (Object) keyPrefix0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test_set_11()  throws Throwable  {
      //caseID:af3270b29fd7b9e7ab9bfaab4e3618ef
      //CoveredLines: [15, 42, 44, 45, 46, 49, 50, 51, 54, 57, 59, 112, 115, 116, 118, 120, 121, 144, 145, 147]
      //Input_0_KeyPrefix: {getPrefix=\"1\", expireSeconds=1}
      //Input_1_String: 1.0
      //Input_2_Object: 1.0
      //Assert: assertTrue(method_result);
      
      RedisService redisService0 = new RedisService();
      //mock jedis0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("6").when(jedis0).setex(anyString() , anyInt() , anyString());
      //mock jedisPool0
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();
      
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);
      //mock keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1).when(keyPrefix0).expireSeconds();
      doReturn("1").when(keyPrefix0).getPrefix();
      
      //Call method: set
      Boolean boolean0 = redisService0.set(keyPrefix0, "1.0", (Object) "1.0");
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test_stringToBean_12()  throws Throwable  {
      //caseID:d7cc83a0f09d3c9947b17c61865aab40
      //CoveredLines: [15, 129, 130]
      //Input_0_String: 
      //Input_1_Class<?>: Integer.class
      //Assert: assertNull(method_result);
      
      RedisService redisService0 = new RedisService();
      Class<Integer> class0 = Integer.class;
      
      //Call method: stringToBean
      Object object0 = PrivateAccess.callMethod((Class<RedisService>) RedisService.class, redisService0, "stringToBean", (Object) "", (Class<?>) String.class, (Object) class0, (Class<?>) Class.class);
      
      //Test Result Assert
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test_stringToBean_13()  throws Throwable  {
      //caseID:3e72a055b830f60e102e9b00f9eb8349
      //CoveredLines: [15, 129, 132, 133]
      //Input_0_String: 5:N4Ez=TU35z<}5y
      //Input_1_Class<?>: Integer.class
      
      RedisService redisService0 = new RedisService();
      Class<Integer> class0 = Integer.class;
      
      //Call method: stringToBean
      try { 
        PrivateAccess.callMethod((Class<RedisService>) RedisService.class, redisService0, "stringToBean", (Object) "5:N4Ez=TU35z<}5y", (Class<?>) String.class, (Object) class0, (Class<?>) Class.class);
      } catch(Throwable e) {
         verifyException("java.lang.NumberFormatException", e);
         assertEquals("java.lang.NumberFormatException", e.getClass().getName());
         assertEquals("For input string: \"5:N4Ez=TU35z<}5y\"", e.getMessage());
      }
  }

  @Test(timeout = 4000)
  public void test_stringToBean_14()  throws Throwable  {
      //caseID:10821872a9d098aba3180edc211efa09
      //CoveredLines: [15, 129, 132, 134, 135]
      //Input_0_String: nodes
      //Input_1_Class<?>: Long.class
      
      RedisService redisService0 = new RedisService();
      Class<Long> class0 = Long.class;
      
      //Call method: stringToBean
      try { 
        PrivateAccess.callMethod((Class<RedisService>) RedisService.class, redisService0, "stringToBean", (Object) "nodes", (Class<?>) String.class, (Object) class0, (Class<?>) Class.class);
      } catch(Throwable e) {
         verifyException("java.lang.NumberFormatException", e);
         assertEquals("java.lang.NumberFormatException", e.getClass().getName());
         assertEquals("For input string: \"nodes\"", e.getMessage());
      }
  }

  @Test(timeout = 4000)
  public void test_stringToBean_15()  throws Throwable  {
      //caseID:b0187e3d084c2263a4bfd6d3924bd450
      //CoveredLines: [15, 129, 132, 134, 136, 139]
      //Input_0_String: P4WH8wN1
      //Input_1_Class<?>: Object.class
      
      RedisService redisService0 = new RedisService();
      Class<Object> class0 = Object.class;
      
      //Call method: stringToBean
      try { 
        PrivateAccess.callMethod((Class<RedisService>) RedisService.class, redisService0, "stringToBean", (Object) "P4WH8wN1", (Class<?>) String.class, (Object) class0, (Class<?>) Class.class);
      } catch(Throwable e) {
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
         assertEquals("com.alibaba.fastjson.JSONException", e.getClass().getName());
         assertEquals("syntax error, pos 1, json : P4WH8wN1", e.getMessage());
      }
  }
}
