/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.jesper.seckill.redis;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import static org.smartunit.runtime.SmartAssertions.*;
import com.alibaba.fastjson.JSONException;
import com.jesper.seckill.redis.KeyPrefix;
import com.jesper.seckill.redis.RedisService;
import javax.swing.JLayeredPane;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;
import redis.clients.jedis.Jedis;
import redis.clients.jedis.JedisPool;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class RedisService_SSTest extends RedisService_SSTest_scaffolding {

  @Test(timeout = 4000)
  public void test_stringToBean_00()  throws Throwable  {
      //caseID:db253e1ebd25bd9994c45aaf260d82c7
      RedisService redisService0 = new RedisService();
      Long long0 = RedisService.stringToBean("{}", (Class<Long>) null);
      assertNull(long0);
  }
  @Test(timeout = 4000)
  public void test_stringToBean_01()  throws Throwable  {
      //caseID:9d291edaca2fa115e607f1395014b33c
      RedisService redisService0 = new RedisService();
      Class<Integer> class0 = Integer.TYPE;
      // Undeclared exception!
      try { 
        RedisService.stringToBean("Il", class0);
      } catch(Throwable e) {
         verifyException("java.lang.NumberFormatException", e);
         assertEquals("java.lang.NumberFormatException", e.getClass().getName());
         assertEquals("For input string: \"Il\"", e.getMessage());
      }
  }
  @Test(timeout = 4000)
  public void test_stringToBean_02()  throws Throwable  {
      //caseID:7f6ff4dbbec80a8c16f2a86b13efe5b2
      RedisService redisService0 = new RedisService();
      Class<Long> class0 = Long.TYPE;
      // Undeclared exception!
      try { 
        RedisService.stringToBean("Path must not be null", class0);
      } catch(Throwable e) {
         verifyException("java.lang.NumberFormatException", e);
         assertEquals("java.lang.NumberFormatException", e.getClass().getName());
         assertEquals("For input string: \"Path must not be null\"", e.getMessage());
      }
  }
  @Test(timeout = 4000)
  public void test_beanToString_03()  throws Throwable  {
      //caseID:2cbc3019009babaf654f6a5269370fc0
      RedisService redisService0 = new RedisService();
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      String string0 = RedisService.beanToString(integer0);
      assertEquals("100", string0);
  }
  @Test(timeout = 4000)
  public void test_stringToBean_04()  throws Throwable  {
      //caseID:ebcee7603f69b61c8a98503e7c8ea3bf
      RedisService redisService0 = new RedisService();
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        RedisService.stringToBean(":\u0005I0MR", class0);
      } catch(Throwable e) {
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
         assertEquals("com.alibaba.fastjson.JSONException", e.getClass().getName());
         assertEquals("syntax error, pos 1, json : :\u0005I0MR", e.getMessage());
      }
  }
  @Test(timeout = 4000)
  public void test_beanToString_05()  throws Throwable  {
      //caseID:782b8bc90235f6c40308c322f7ad53b6
      RedisService redisService0 = new RedisService();
      Long long0 = new Long(20L);
      String string0 = RedisService.beanToString(long0);
      assertEquals("20", string0);
  }
  @Test(timeout = 4000)
  public void test_beanToString_06()  throws Throwable  {
      //caseID:74f10d09add91b38a79d64b1a8082c6d
      RedisService redisService0 = new RedisService();
      String string0 = RedisService.beanToString((Object) redisService0);
      assertEquals("{}", string0);
  }
  @Test(timeout = 4000)
  public void test_exists_07()  throws Throwable  {
      //caseID:e6712a8aa9c8e523e3cf0c204eaa295f
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Boolean boolean0 = Boolean.TRUE;
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(boolean0).when(jedis0).exists(anyString());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("12").when(keyPrefix0).getPrefix();
      boolean boolean1 = redisService0.exists(keyPrefix0, "SPu/TkA0(,PZSxq7CN");
      assertTrue(boolean1);
  }
  @Test(timeout = 4000)
  public void test_decr_08()  throws Throwable  {
      //caseID:b572648a7d51b5507c56d7dffb945fb4
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("2145527834").when(keyPrefix0).getPrefix();
      Long long0 = redisService0.decr(keyPrefix0, "SCRIPT");
      assertNull(long0);
  }
  @Test(timeout = 4000)
  public void test_incr_09()  throws Throwable  {
      //caseID:38073d5c470cee782bb72c5492f2b436
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("webappClassLoader.transformError").when(keyPrefix0).getPrefix();
      Long long0 = redisService0.incr(keyPrefix0, "e:HgvM6uhV}");
      assertNull(long0);
  }
  @Test(timeout = 4000)
  public void test_delete_10()  throws Throwable  {
      //caseID:52f67cf0c967e6bf87bb67c6d25e3ebc
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Long long0 = new Long((-2469L));
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(jedis0).del(anyString());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("1").when(keyPrefix0).getPrefix();
      boolean boolean0 = redisService0.delete(keyPrefix0, "1");
      assertFalse(boolean0);
  }
  @Test(timeout = 4000)
  public void test_delete_11()  throws Throwable  {
      //caseID:e7d32e1090c3eb2e286dc4fba68519d8
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Long long0 = new Long(1411L);
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(jedis0).del(anyString());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("").when(keyPrefix0).getPrefix();
      boolean boolean0 = redisService0.delete(keyPrefix0, "");
      assertTrue(boolean0);
  }
  @Test(timeout = 4000)
  public void test_set_12()  throws Throwable  {
      //caseID:275719350f59ba1798e9530550895f82
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Boolean boolean0 = redisService0.set(keyPrefix0, "4", (Object) null);
      assertFalse(boolean0);
  }
  @Test(timeout = 4000)
  public void test_set_13()  throws Throwable  {
      //caseID:9624e47d0d822387364396433a0c72be
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Boolean boolean0 = redisService0.set(keyPrefix0, "com.jesper.seckill.redis.RedisService", (Object) null);
      assertFalse(boolean0);
  }
  @Test(timeout = 4000)
  public void test_get_14()  throws Throwable  {
      //caseID:7f0131b27d28dfc3a6067e0abb6695de
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("").when(jedis0).get(anyString());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("2fI1Jkx]h^").when(keyPrefix0).getPrefix();
      Class<Object> class0 = Object.class;
      Object object0 = redisService0.get(keyPrefix0, "1", class0);
      assertNull(object0);
  }
  @Test(timeout = 4000)
  public void test_get_15()  throws Throwable  {
      //caseID:99917e660013448c6f54b1008835c476
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("com.jesper.seckill.redis.RedisService").when(keyPrefix0).getPrefix();
      Class<Integer> class0 = Integer.class;
      Integer integer0 = redisService0.get(keyPrefix0, "", class0);
      assertNull(integer0);
  }
  @Test(timeout = 4000)
  public void test_get_16()  throws Throwable  {
      //caseID:bb8a9925294cc4c5efe6ff8457187058
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("1").when(jedis0).get(anyString());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("org.springframework.core.convert.ConversionException").when(keyPrefix0).getPrefix();
      Class<Integer> class0 = Integer.class;
      Integer integer0 = redisService0.get(keyPrefix0, "", class0);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
  }
  @Test(timeout = 4000)
  public void test_get_17()  throws Throwable  {
      //caseID:fb58c81d7c487c370c70dece65c3ace3
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("oAbHixMk/QP=vPOL").when(jedis0).get(anyString());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("oAbHixMk/QP=vPOL").when(keyPrefix0).getPrefix();
      Class<Long> class0 = Long.class;
      // Undeclared exception!
      try { 

        //invoke method for redisService0
        redisService0.get(keyPrefix0, "FactoryBean is not fully initialized yet", class0);
      } catch(Throwable e) {
         verifyException("java.lang.NumberFormatException", e);
         assertEquals("java.lang.NumberFormatException", e.getClass().getName());
         assertEquals("For input string: \"oAbHixMk/QP=vPOL\"", e.getMessage());
      }
  }
  @Test(timeout = 4000)
  public void test_get_18()  throws Throwable  {
      //caseID:42a34a8dcd5314db2194d3b01934593a
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("2").when(jedis0).get(anyString());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("6@6").when(keyPrefix0).getPrefix();
      Class<Long> class0 = Long.class;
      Long long0 = redisService0.get(keyPrefix0, "", class0);
      assertNotNull(long0);
      assertEquals(2L, (long)long0);
  }
  @Test(timeout = 4000)
  public void test_get_19()  throws Throwable  {
      //caseID:5836ed3692c11e46f4523e0c597adf93
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("11").when(jedis0).get(anyString());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("1").when(keyPrefix0).getPrefix();
      Class<String> class0 = String.class;
      String string0 = redisService0.get(keyPrefix0, "0", class0);
      assertEquals("11", string0);
      assertNotNull(string0);
  }
  @Test(timeout = 4000)
  public void test_set_20()  throws Throwable  {
      //caseID:4994bc9bb8f4421c9c9a9083feb8853a
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Boolean boolean0 = redisService0.set(keyPrefix0, "", (Object) "");
      assertFalse(boolean0);
  }
  @Test(timeout = 4000)
  public void test_set_21()  throws Throwable  {
      //caseID:b8297fed16c732e0bedaadf398e3ec3d
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("AFTER").when(jedis0).set(anyString() , anyString());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(0).when(keyPrefix0).expireSeconds();
      doReturn("10").when(keyPrefix0).getPrefix();
      Boolean boolean0 = redisService0.set(keyPrefix0, "4", (Object) "4");
      assertTrue(boolean0);
  }
  @Test(timeout = 4000)
  public void test_set_22()  throws Throwable  {
      //caseID:8bada4003e619a3e804c5909dde7cfe0
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(825).when(keyPrefix0).expireSeconds();
      doReturn("\"#Q]h").when(keyPrefix0).getPrefix();
      Boolean boolean0 = redisService0.set(keyPrefix0, "com.jesper.seckill.redis.RedisService", (Object) "com.jesper.seckill.redis.RedisService");
      assertTrue(boolean0);
  }}
