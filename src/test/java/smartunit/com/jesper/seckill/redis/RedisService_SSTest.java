/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.jesper.seckill.redis;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import static org.smartunit.runtime.SmartAssertions.*;
import com.jesper.seckill.redis.KeyPrefix;
import com.jesper.seckill.redis.RedisService;
import javax.swing.JLayeredPane;
import javax.swing.JOptionPane;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;
import redis.clients.jedis.Jedis;
import redis.clients.jedis.JedisPool;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class RedisService_SSTest extends RedisService_SSTest_scaffolding {

  @Test(timeout = 4000)
  public void test_exists_00()  throws Throwable  {
      //caseID:b60be1b56b5da8dde14d331bef54adaf
      RedisService redisService0 = new RedisService();
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Long long0 = new Long(0L);
      // Undeclared exception!
      try { 

        //invoke method for redisService0
        redisService0.set(keyPrefix0, ">ZY&", long0);
      } catch(Throwable e) {
         verifyException("com.jesper.seckill.redis.RedisService", e);
         assertEquals("java.lang.NullPointerException", e.getClass().getName());
      }
  }
  @Test(timeout = 4000)
  public void test_stringToBean_01()  throws Throwable  {
      //caseID:e3f805075682a31da9a177803b59f4bf
      RedisService redisService0 = new RedisService();
      String string0 = RedisService.stringToBean("{}", (Class<String>) null);
      assertNull(string0);
  }
  @Test(timeout = 4000)
  public void test_stringToBean_02()  throws Throwable  {
      //caseID:e9488dc8f1c71c71f8b6ef82412761c2
      RedisService redisService0 = new RedisService();
      Class<Integer> class0 = Integer.TYPE;
      // Undeclared exception!
      try { 
        RedisService.stringToBean("1.0", class0);
      } catch(Throwable e) {
         verifyException("java.lang.NumberFormatException", e);
         assertEquals("java.lang.NumberFormatException", e.getClass().getName());
         assertEquals("For input string: \"1.0\"", e.getMessage());
      }
  }
  @Test(timeout = 4000)
  public void test_stringToBean_03()  throws Throwable  {
      //caseID:35a0ac72381835a62ad1381329e02bd5
      RedisService redisService0 = new RedisService();
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        RedisService.stringToBean("1.0", class0);
      } catch(Throwable e) {
         verifyException("java.lang.NumberFormatException", e);
         assertEquals("java.lang.NumberFormatException", e.getClass().getName());
         assertEquals("For input string: \"1.0\"", e.getMessage());
      }
  }
  @Test(timeout = 4000)
  public void test_stringToBean_04()  throws Throwable  {
      //caseID:4b24f335fc3bc0d71c7a405385e86081
      RedisService redisService0 = new RedisService();
      Class<Long> class0 = Long.class;
      // Undeclared exception!
      try { 
        RedisService.stringToBean("Unknown", class0);
      } catch(Throwable e) {
         verifyException("java.lang.NumberFormatException", e);
         assertEquals("java.lang.NumberFormatException", e.getClass().getName());
         assertEquals("For input string: \"Unknown\"", e.getMessage());
      }
  }
  @Test(timeout = 4000)
  public void test_beanToString_05()  throws Throwable  {
      //caseID:3d69771ad399f851c4f0ae0766c35f20
      RedisService redisService0 = new RedisService();
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      String string0 = RedisService.beanToString(integer0);
      assertEquals("400", string0);
  }
  @Test(timeout = 4000)
  public void test_stringToBean_06()  throws Throwable  {
      //caseID:dbb292dc728f6106a4ff3053a1839f8e
      RedisService redisService0 = new RedisService();
      Class<JOptionPane> class0 = JOptionPane.class;
      JOptionPane jOptionPane0 = RedisService.stringToBean("{}", class0);
      assertNotNull(jOptionPane0);
      assertFalse(jOptionPane0.isFocusTraversalPolicyProvider());
  }
  @Test(timeout = 4000)
  public void test_exists_07()  throws Throwable  {
      //caseID:f401e460ec4b250f4e3efe3d047ec248
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Boolean boolean0 = new Boolean(true);
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(boolean0).when(jedis0).exists(anyString());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("war").when(keyPrefix0).getPrefix();
      boolean boolean1 = redisService0.exists(keyPrefix0, " `4pY6yTj(");
      assertTrue(boolean1);
  }
  @Test(timeout = 4000)
  public void test_decr_08()  throws Throwable  {
      //caseID:52ee763e98975ad608523f5b10b3b577
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("1").when(keyPrefix0).getPrefix();
      Long long0 = redisService0.decr(keyPrefix0, "1.0");
      assertNull(long0);
  }
  @Test(timeout = 4000)
  public void test_incr_09()  throws Throwable  {
      //caseID:e002edcdd98935db018ca16eabd29d6b
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("@>8X)=rD}a^+:;").when(keyPrefix0).getPrefix();
      Long long0 = redisService0.incr(keyPrefix0, "securityConstraint.uncoveredHttpOmittedMethodFix");
      assertNull(long0);
  }
  @Test(timeout = 4000)
  public void test_delete_10()  throws Throwable  {
      //caseID:bf6655dec1c4cb84b946dec031524bb4
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Long long0 = new Long(3089L);
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(jedis0).del(anyString());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("1.0").when(keyPrefix0).getPrefix();
      boolean boolean0 = redisService0.delete(keyPrefix0, "gzu21fl");
      assertTrue(boolean0);
  }
  @Test(timeout = 4000)
  public void test_delete_11()  throws Throwable  {
      //caseID:61eb0513b76d52a0931ce40cd8537ca2
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Long long0 = new Long(0L);
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(jedis0).del(anyString());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("N,3y:VjAi$*P-4").when(keyPrefix0).getPrefix();
      boolean boolean0 = redisService0.delete(keyPrefix0, "0");
      assertFalse(boolean0);
  }
  @Test(timeout = 4000)
  public void test_set_12()  throws Throwable  {
      //caseID:3786bdee872404358454f5b6f35decc8
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Boolean boolean0 = redisService0.set(keyPrefix0, "1", (String) null);
      assertFalse(boolean0);
  }
  @Test(timeout = 4000)
  public void test_set_13()  throws Throwable  {
      //caseID:ffbf23e95328a607fc6cb326831e7d52
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Boolean boolean0 = redisService0.set(keyPrefix0, "", (Object) null);
      assertFalse(boolean0);
  }
  @Test(timeout = 4000)
  public void test_get_14()  throws Throwable  {
      //caseID:261893e5438f971a77dd8701772e6087
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("").when(jedis0).get(anyString());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("multipart/form-data").when(keyPrefix0).getPrefix();
      Class<Object> class0 = Object.class;
      Object object0 = redisService0.get(keyPrefix0, "", class0);
      assertNull(object0);
  }
  @Test(timeout = 4000)
  public void test_get_15()  throws Throwable  {
      //caseID:10f3a1f4a97ea0d0f6d3f6ae5cb01b98
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("1").when(keyPrefix0).getPrefix();
      Class<String> class0 = String.class;
      String string0 = redisService0.get(keyPrefix0, "1", class0);
      assertNull(string0);
  }
  @Test(timeout = 4000)
  public void test_get_16()  throws Throwable  {
      //caseID:3704016d7fc57b43ad7f260ff82fd179
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(";").when(jedis0).get(anyString());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(";").when(keyPrefix0).getPrefix();
      Class<Long> class0 = Long.TYPE;
      // Undeclared exception!
      try { 

        //invoke method for redisService0
        redisService0.get(keyPrefix0, ";", class0);
      } catch(Throwable e) {
         verifyException("java.lang.NumberFormatException", e);
         assertEquals("java.lang.NumberFormatException", e.getClass().getName());
         assertEquals("For input string: \";\"", e.getMessage());
      }
  }
  @Test(timeout = 4000)
  public void test_get_17()  throws Throwable  {
      //caseID:c4a6f5f62faec0b5dfef782d29fee516
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("0").when(jedis0).get(anyString());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("0").when(keyPrefix0).getPrefix();
      Class<Long> class0 = Long.TYPE;
      Long long0 = redisService0.get(keyPrefix0, "0", class0);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
  }
  @Test(timeout = 4000)
  public void test_get_18()  throws Throwable  {
      //caseID:6534f28d2f83d8f611735b4241f7edcc
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("1.0").when(jedis0).get(anyString());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("};XLLZ>(").when(keyPrefix0).getPrefix();
      Class<String> class0 = String.class;
      String string0 = redisService0.get(keyPrefix0, "1", class0);
      assertEquals("1.0", string0);
      assertNotNull(string0);
  }
  @Test(timeout = 4000)
  public void test_set_19()  throws Throwable  {
      //caseID:b2f8ab287957335245fde32ffc046d36
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Boolean boolean0 = redisService0.set(keyPrefix0, "", (Object) "");
      assertFalse(boolean0);
  }
  @Test(timeout = 4000)
  public void test_set_20()  throws Throwable  {
      //caseID:4101e5d51d8e0ddade780e1896eebbde
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(0).when(keyPrefix0).expireSeconds();
      doReturn("1").when(keyPrefix0).getPrefix();
      Long long0 = new Long(736L);
      Boolean boolean0 = redisService0.set(keyPrefix0, "1.0", long0);
      assertTrue(boolean0);
  }
  @Test(timeout = 4000)
  public void test_set_21()  throws Throwable  {
      //caseID:019a7fb70e20002ea55ef84bf34f4a8a
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("1").when(jedis0).set(anyString() , anyString());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(0).when(keyPrefix0).expireSeconds();
      doReturn("com.jesper.seckill.redis.RedisService", "3").when(keyPrefix0).getPrefix();
      Boolean boolean0 = redisService0.set(keyPrefix0, "1.0", (Object) keyPrefix0);
      assertTrue(boolean0);
  }
  @Test(timeout = 4000)
  public void test_set_22()  throws Throwable  {
      //caseID:fc4fc07400a8a4b24bc1ab386226af80
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("Token had invalid integrity check").when(jedis0).set(anyString() , anyString());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1).when(keyPrefix0).expireSeconds();
      doReturn("EBKl|l+kv2").when(keyPrefix0).getPrefix();
      Boolean boolean0 = redisService0.set(keyPrefix0, "request.asyncNotSupported", (Object) "request.asyncNotSupported");
      assertTrue(boolean0);
  }
  @Test(timeout = 4000)
  public void test_set_23()  throws Throwable  {
      //caseID:8bc35e9931c0e8780f3582d4ec79d6fe
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(255).when(keyPrefix0).expireSeconds();
      doReturn("java.naming.factory.initial", "3^D=Q*/+n3Fj)A.U#").when(keyPrefix0).getPrefix();
      Boolean boolean0 = redisService0.set(keyPrefix0, "1.0", (Object) keyPrefix0);
      assertTrue(boolean0);
  }}
