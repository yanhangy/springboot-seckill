/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.jesper.seckill.redis;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import static org.smartunit.runtime.SmartAssertions.*;
import com.alibaba.fastjson.JSONException;
import com.jesper.seckill.redis.KeyPrefix;
import com.jesper.seckill.redis.RedisService;
import javax.swing.JLayeredPane;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;
import redis.clients.jedis.Jedis;
import redis.clients.jedis.JedisPool;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class RedisService_SSTest extends RedisService_SSTest_scaffolding {

  @Test(timeout = 4000)
  public void test_exists_00()  throws Throwable  {
      //caseID:8eac1b2a82214b7d6899f2070b950e65
      RedisService redisService0 = new RedisService();
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      // Undeclared exception!
      try { 

        //invoke method for redisService0
        redisService0.set(keyPrefix0, "3943", integer0);
      } catch(Throwable e) {
         verifyException("com.jesper.seckill.redis.RedisService", e);
         assertEquals("java.lang.NullPointerException", e.getClass().getName());
      }
  }
  @Test(timeout = 4000)
  public void test_stringToBean_01()  throws Throwable  {
      //caseID:44117958dca58dd15f9cd62ab7192062
      RedisService redisService0 = new RedisService();
      Class<Object> class0 = Object.class;
      Object object0 = RedisService.stringToBean("", class0);
      assertNull(object0);
  }
  @Test(timeout = 4000)
  public void test_stringToBean_02()  throws Throwable  {
      //caseID:a2af3e7322b01a3e3224b2a0801cd19e
      RedisService redisService0 = new RedisService();
      Object object0 = RedisService.stringToBean("{}", (Class<Object>) null);
      assertNull(object0);
  }
  @Test(timeout = 4000)
  public void test_stringToBean_03()  throws Throwable  {
      //caseID:60dbb26ac642d31798829761a6e17801
      RedisService redisService0 = new RedisService();
      Class<Integer> class0 = Integer.TYPE;
      // Undeclared exception!
      try { 
        RedisService.stringToBean("E\"()]pAW", class0);
      } catch(Throwable e) {
         verifyException("java.lang.NumberFormatException", e);
         assertEquals("java.lang.NumberFormatException", e.getClass().getName());
         assertEquals("For input string: \"E\"()]pAW\"", e.getMessage());
      }
  }
  @Test(timeout = 4000)
  public void test_stringToBean_04()  throws Throwable  {
      //caseID:4659ebf9f2a446c7916aae390406a78c
      RedisService redisService0 = new RedisService();
      Class<Long> class0 = Long.TYPE;
      // Undeclared exception!
      try { 
        RedisService.stringToBean("com.jesper.seckill.redis.RedisService", class0);
      } catch(Throwable e) {
         verifyException("java.lang.NumberFormatException", e);
         assertEquals("java.lang.NumberFormatException", e.getClass().getName());
         assertEquals("For input string: \"com.jesper.seckill.redis.RedisService\"", e.getMessage());
      }
  }
  @Test(timeout = 4000)
  public void test_beanToString_05()  throws Throwable  {
      //caseID:f2ef2103657d275816338cc53535df33
      RedisService redisService0 = new RedisService();
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      String string0 = RedisService.beanToString(integer0);
      assertEquals("200", string0);
  }
  @Test(timeout = 4000)
  public void test_exists_06()  throws Throwable  {
      //caseID:a5b4f62ba7d1f0bda7d212a5d2dee332
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Boolean boolean0 = Boolean.valueOf("1.0");
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(boolean0).when(jedis0).exists(anyString());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("1.0").when(keyPrefix0).getPrefix();
      boolean boolean1 = redisService0.exists(keyPrefix0, "1.0");
      assertFalse(boolean1);
  }
  @Test(timeout = 4000)
  public void test_decr_07()  throws Throwable  {
      //caseID:8a9f1caa3d8205482d07bc7c72060796
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("").when(keyPrefix0).getPrefix();
      Long long0 = redisService0.decr(keyPrefix0, "ZINCRBY");
      assertNull(long0);
  }
  @Test(timeout = 4000)
  public void test_incr_08()  throws Throwable  {
      //caseID:d5570159a955aab63fd89e1aadeacc5c
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("-2132034124").when(keyPrefix0).getPrefix();
      Long long0 = redisService0.incr(keyPrefix0, "1");
      assertNull(long0);
  }
  @Test(timeout = 4000)
  public void test_delete_09()  throws Throwable  {
      //caseID:23609c844b523b51c7740e5df9738112
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Long long0 = new Long((-1L));
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(jedis0).del(anyString());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("2;;Q;7oPw,,Q").when(keyPrefix0).getPrefix();
      boolean boolean0 = redisService0.delete(keyPrefix0, "");
      assertFalse(boolean0);
  }
  @Test(timeout = 4000)
  public void test_delete_10()  throws Throwable  {
      //caseID:e7ce1d40e88ac80efd3bdfac72d61acb
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Long long0 = new Long(1375L);
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(jedis0).del(anyString());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("com.jesper.seckill.redis.RedisService").when(keyPrefix0).getPrefix();
      boolean boolean0 = redisService0.delete(keyPrefix0, "com.jesper.seckill.redis.RedisService");
      assertTrue(boolean0);
  }
  @Test(timeout = 4000)
  public void test_set_11()  throws Throwable  {
      //caseID:a99e307cdd18a56cb4d0aee20a21796c
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Boolean boolean0 = redisService0.set(keyPrefix0, "Host", (Object) null);
      assertFalse(boolean0);
  }
  @Test(timeout = 4000)
  public void test_set_12()  throws Throwable  {
      //caseID:3c1d5708ff3845195bc69588d21ec8a9
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Boolean boolean0 = redisService0.set(keyPrefix0, "", (Object) null);
      assertFalse(boolean0);
  }
  @Test(timeout = 4000)
  public void test_get_13()  throws Throwable  {
      //caseID:6e7d04538eee3102aee454284caa3413
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("com.jesper.seckill.redis.RedisService").when(keyPrefix0).getPrefix();
      Class<Integer> class0 = Integer.class;
      Integer integer0 = redisService0.get(keyPrefix0, "1", class0);
      assertNull(integer0);
  }
  @Test(timeout = 4000)
  public void test_get_14()  throws Throwable  {
      //caseID:0b5376cade757c1a48aa8bbf14fb1ae2
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("1").when(jedis0).get(anyString());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("1").when(keyPrefix0).getPrefix();
      Class<Integer> class0 = Integer.class;
      Integer integer0 = redisService0.get(keyPrefix0, "1", class0);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
  }
  @Test(timeout = 4000)
  public void test_get_15()  throws Throwable  {
      //caseID:587a8299f36c9efd30ef77ae69d46743
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("1.0").when(jedis0).get(anyString());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("1.0").when(keyPrefix0).getPrefix();
      Class<Long> class0 = Long.class;
      // Undeclared exception!
      try { 

        //invoke method for redisService0
        redisService0.get(keyPrefix0, "Cannot replace existing scopes 'singleton' and 'prototype'", class0);
      } catch(Throwable e) {
         verifyException("java.lang.NumberFormatException", e);
         assertEquals("java.lang.NumberFormatException", e.getClass().getName());
         assertEquals("For input string: \"1.0\"", e.getMessage());
      }
  }
  @Test(timeout = 4000)
  public void test_beanToString_16()  throws Throwable  {
      //caseID:3ed6b111d089a1e0e9bb8d5d12f16a16
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("1.0").when(jedis0).get(anyString());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("uh!t;\"1{K,='ksM4&g").when(keyPrefix0).getPrefix();
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 

        //invoke method for redisService0
        redisService0.get(keyPrefix0, "2147148627", class0);
      } catch(Throwable e) {
         verifyException("com.alibaba.fastjson.JSON", e);
         assertEquals("com.alibaba.fastjson.JSONException", e.getClass().getName());
         assertEquals("can not cast to JSONObject.", e.getMessage());
      }
  }
  @Test(timeout = 4000)
  public void test_get_17()  throws Throwable  {
      //caseID:c578b6feb0f0d5077d5d5d7dbefb79bc
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("1.0").when(jedis0).get(anyString());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("").when(keyPrefix0).getPrefix();
      Class<String> class0 = String.class;
      String string0 = redisService0.get(keyPrefix0, "com.jesper.seckill.redis.RedisService", class0);
      assertNotNull(string0);
      assertEquals("1.0", string0);
  }
  @Test(timeout = 4000)
  public void test_set_18()  throws Throwable  {
      //caseID:fc3d8428f0cd572cf3be736912edde69
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Boolean boolean0 = redisService0.set(keyPrefix0, "", (Object) "");
      assertFalse(boolean0);
  }
  @Test(timeout = 4000)
  public void test_set_19()  throws Throwable  {
      //caseID:8b362fae0652f996bd692633f5fee21a
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1).when(keyPrefix0).expireSeconds();
      doReturn("Name must not be null").when(keyPrefix0).getPrefix();
      Long long0 = new Long(5717L);
      Boolean boolean0 = redisService0.set(keyPrefix0, "B", long0);
      assertTrue(boolean0);
  }
  @Test(timeout = 4000)
  public void test_set_20()  throws Throwable  {
      //caseID:084e37048b52ec6c8d05719e10b695e3
      RedisService redisService0 = new RedisService();

      //prepare data for jedisPool0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("143").when(jedis0).set(anyString() , anyString());
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();

      //invoke method for redisService0
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);

      //prepare data for keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(57).when(keyPrefix0).expireSeconds();
      doReturn("com.jesper.seckill.redis.RedisService").when(keyPrefix0).getPrefix();
      Boolean boolean0 = redisService0.set(keyPrefix0, "10", (Object) "10");
      assertTrue(boolean0);
  }
  }
