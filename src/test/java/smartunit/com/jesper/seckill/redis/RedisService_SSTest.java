/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.jesper.seckill.redis;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import static org.smartunit.runtime.SmartAssertions.*;
import com.alibaba.fastjson.JSONException;
import com.jesper.seckill.redis.KeyPrefix;
import com.jesper.seckill.redis.RedisService;
import javax.swing.JLayeredPane;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;
import redis.clients.jedis.Jedis;
import redis.clients.jedis.JedisPool;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class RedisService_SSTest extends RedisService_SSTest_scaffolding {
// allCoveredLines:[15, 24, 26, 28, 29, 30, 31, 33, 34, 42, 44, 45, 46, 49, 50, 51, 54, 57, 59, 68, 70, 72, 73, 75, 84, 86, 88, 89, 91, 99, 101, 103, 104, 106, 112, 113, 115, 116, 117, 118, 119, 120, 121, 123, 129, 130, 132, 133, 134, 135, 136, 137, 139, 144, 145, 147]

  @Test(timeout = 4000)
  public void test_beanToString_00()  throws Throwable  {
      //caseID:b0b1659ad74c59de87cd35b4cb44a11e
      //CoveredLines: [15, 112, 115, 116, 117]
      //Input_0_?: JLayeredPane.FRAME_CONTENT_LAYER
      //Assert: assertEquals("-30000", method_result);
      
      RedisService redisService0 = new RedisService();
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      
      //Call method: beanToString
      Object object0 = PrivateAccess.callMethod((Class<RedisService>) RedisService.class, redisService0, "beanToString", (Object) integer0, (Class<?>) Object.class);
      
      //Test Result Assert
      assertEquals("-30000", object0);
  }

  @Test(timeout = 4000)
  public void test_beanToString_01()  throws Throwable  {
      //caseID:36889fb40c35dce3841682bffef08d05
      //CoveredLines: [15, 112, 115, 116, 118, 119]
      //Input_0_?: 0L
      //Assert: assertEquals("0", method_result);
      
      RedisService redisService0 = new RedisService();
      Long long0 = new Long(0L);
      
      //Call method: beanToString
      Object object0 = PrivateAccess.callMethod((Class<RedisService>) RedisService.class, redisService0, "beanToString", (Object) long0, (Class<?>) Object.class);
      
      //Test Result Assert
      assertEquals("0", object0);
  }

  @Test(timeout = 4000)
  public void test_beanToString_02()  throws Throwable  {
      //caseID:24a14bbd68a2825bf4ac8a17123f10bd
      //CoveredLines: [15, 112, 115, 116, 118, 120, 121]
      //Input_0_?: ""
      //Assert: assertEquals("", method_result);
      
      RedisService redisService0 = new RedisService();
      
      //Call method: beanToString
      Object object0 = PrivateAccess.callMethod((Class<RedisService>) RedisService.class, redisService0, "beanToString", (Object) "", (Class<?>) Object.class);
      
      //Test Result Assert
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test_beanToString_03()  throws Throwable  {
      //caseID:65f01552aa8cb98faf11ccdbded87cc3
      //CoveredLines: [15, 24, 26, 28, 29, 30, 31, 33, 112, 113, 129, 130, 144, 145, 147]
      //Input_0_?: null
      //Assert: assertNull(method_result);
      
      RedisService redisService0 = new RedisService();
      //mock jedis0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock jedisPool0
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);
      //mock keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("com.jesper.seckill.redis.RedisService").when(keyPrefix0).getPrefix();
      Class<String> class0 = String.class;
      String string0 = redisService0.get(keyPrefix0, "1.0", class0);
      
      //Test Result Assert
      assertNull(string0);
      
      
      //Call method: beanToString
      Object object0 = PrivateAccess.callMethod((Class<RedisService>) RedisService.class, redisService0, "beanToString", (Object) null, (Class<?>) Object.class);
      
      //Test Result Assert
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test_decr_04()  throws Throwable  {
      //caseID:f97ce2fbc10d7abd8995cabc10f09f67
      //CoveredLines: [15, 99, 101, 103, 104, 106, 144, 145, 147]
      //Input_0_KeyPrefix: {getPrefix="10"}
      //Input_1_String: ""
      //Assert: assertNull(method_result);
      
      RedisService redisService0 = new RedisService();
      //mock jedis0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock jedisPool0
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);
      //mock keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("10").when(keyPrefix0).getPrefix();
      
      //Call method: decr
      Long long0 = redisService0.decr(keyPrefix0, "");
      
      //Test Result Assert
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test_exists_05()  throws Throwable  {
      //caseID:87d1357c03e3cf528c0b40e03e458ad3
      //CoveredLines: [15, 68, 70, 72, 73, 75, 144, 145, 147]
      //Input_0_KeyPrefix: {getPrefix="1"}
      //Input_1_String: ""
      //Assert: assertFalse(method_result);
      
      RedisService redisService0 = new RedisService();
      Boolean boolean0 = Boolean.FALSE;
      //mock jedis0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(boolean0).when(jedis0).exists(anyString());
      //mock jedisPool0
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);
      //mock keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("1").when(keyPrefix0).getPrefix();
      
      //Call method: exists
      boolean boolean1 = redisService0.exists(keyPrefix0, "");
      
      //Test Result Assert
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test_get_06()  throws Throwable  {
      //caseID:70844b0a4a8bfd34e4f4013b34e19ce0
      //CoveredLines: [15, 24, 26, 28, 29, 30, 31, 33, 129, 132, 134, 135, 144, 145, 147]
      //Input_0_KeyPrefix: {getPrefix="1.0"}
      //Input_1_String: "1"
      //Input_2_Long>: Long.TYPE
      //Assert: assertNotNull(method_result);
      //Assert: assertEquals(120L, (long)method_result);
      
      RedisService redisService0 = new RedisService();
      //mock jedis0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("120").when(jedis0).get(anyString());
      //mock jedisPool0
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);
      //mock keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("1.0").when(keyPrefix0).getPrefix();
      Class<Long> class0 = Long.TYPE;
      
      //Call method: get
      Long long0 = redisService0.get(keyPrefix0, "1", class0);
      
      //Test Result Assert
      assertNotNull(long0);
      
      //Test Result Assert
      assertEquals(120L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test_get_07()  throws Throwable  {
      //caseID:d99e05805d5eea8c7f7ef90396782237
      //CoveredLines: [15, 24, 26, 28, 29, 30, 33, 34, 129, 132, 134, 136, 139, 144, 145, 147]
      //Input_0_KeyPrefix: {getPrefix="close"}
      //Input_1_String: "1"
      //Input_2_Object>: Object.class
      
      RedisService redisService0 = new RedisService();
      //mock jedis0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("E1lfeJ:").when(jedis0).get(anyString());
      //mock jedisPool0
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);
      //mock keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("close").when(keyPrefix0).getPrefix();
      Class<Object> class0 = Object.class;
      
      //Call method: get
      // Undeclared exception!
      try { 
        redisService0.get(keyPrefix0, "1", class0);
      } catch(Throwable e) {
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
         assertEquals("com.alibaba.fastjson.JSONException", e.getClass().getName());
         assertEquals("syntax error, pos 1, json : E1lfeJ:", e.getMessage());
      }
  }

  @Test(timeout = 4000)
  public void test_get_08()  throws Throwable  {
      //caseID:8d63ad43c71726e9c429a344f6dfbc9c
      //CoveredLines: [15, 24, 26, 28, 29, 30, 31, 33, 129, 132, 134, 136, 137, 144, 145, 147]
      //Input_0_KeyPrefix: {getPrefix="8"}
      //Input_1_String: "jaasRealm.failedLogin"
      //Input_2_String>: String.class
      //Assert: assertNotNull(method_result);
      //Assert: assertEquals("1", method_result);
      
      RedisService redisService0 = new RedisService();
      //mock jedis0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("1").when(jedis0).get(anyString());
      //mock jedisPool0
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);
      //mock keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("8").when(keyPrefix0).getPrefix();
      Class<String> class0 = String.class;
      
      //Call method: get
      String string0 = redisService0.get(keyPrefix0, "jaasRealm.failedLogin", class0);
      
      //Test Result Assert
      assertNotNull(string0);
      
      //Test Result Assert
      assertEquals("1", string0);
  }

  @Test(timeout = 4000)
  public void test_incr_09()  throws Throwable  {
      //caseID:3ef4b13cf45da5c312604ed1786f76ba
      //CoveredLines: [15, 84, 86, 88, 89, 91, 144, 145, 147]
      //Input_0_KeyPrefix: {getPrefix="com.jesper.seckill.redis.RedisService"}
      //Input_1_String: "1.0"
      //Assert: assertNull(method_result);
      
      RedisService redisService0 = new RedisService();
      //mock jedis0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock jedisPool0
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);
      //mock keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("com.jesper.seckill.redis.RedisService").when(keyPrefix0).getPrefix();
      
      //Call method: incr
      Long long0 = redisService0.incr(keyPrefix0, "1.0");
      
      //Test Result Assert
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test_set_10()  throws Throwable  {
      //caseID:6b2c7ceb9748ce871ed9e7d56b0fc297
      //CoveredLines: [15, 42, 44, 45, 46, 49, 50, 51, 54, 57, 59, 112, 115, 116, 118, 120, 123, 144, 145, 147]
      //Input_0_KeyPrefix: {getPrefix="" "", expireSeconds=4346}
      //Input_1_String: "Z"
      //Input_2_Object: {getPrefix="" "", expireSeconds=4346}
      //Assert: assertTrue(method_result);
      
      RedisService redisService0 = new RedisService();
      //mock jedis0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock jedisPool0
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);
      //mock keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(4346).when(keyPrefix0).expireSeconds();
      doReturn("", "").when(keyPrefix0).getPrefix();
      
      //Call method: set
      Boolean boolean0 = redisService0.set(keyPrefix0, "Z", (Object) keyPrefix0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test_stringToBean_11()  throws Throwable  {
      //caseID:bb2b470e1919423fd83a2528129800ba
      //CoveredLines: [15, 129, 130]
      //Input_0_String: ""
      //Input_1_Class<?>: Object.class
      //Assert: assertNull(method_result);
      
      RedisService redisService0 = new RedisService();
      Class<Object> class0 = Object.class;
      
      //Call method: stringToBean
      Object object0 = PrivateAccess.callMethod((Class<RedisService>) RedisService.class, redisService0, "stringToBean", (Object) "", (Class<?>) String.class, (Object) class0, (Class<?>) Class.class);
      
      //Test Result Assert
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test_stringToBean_12()  throws Throwable  {
      //caseID:0a09917a13ab5f09fa50b789c5b67aef
      //CoveredLines: [15, 129, 132, 133]
      //Input_0_String: "0"
      //Input_1_Class<?>: Integer.class
      //Assert: assertNotNull(method_result);
      //Assert: assertEquals(0, method_result);
      
      RedisService redisService0 = new RedisService();
      Class<Integer> class0 = Integer.class;
      
      //Call method: stringToBean
      Object object0 = PrivateAccess.callMethod((Class<RedisService>) RedisService.class, redisService0, "stringToBean", (Object) "0", (Class<?>) String.class, (Object) class0, (Class<?>) Class.class);
      
      //Test Result Assert
      assertNotNull(object0);
      
      //Test Result Assert
      assertEquals(0, object0);
  }

  @Test(timeout = 4000)
  public void test_stringToBean_13()  throws Throwable  {
      //caseID:bee3355e60c3bc205c6652511f5634b3
      //CoveredLines: [15, 129, 132, 134, 135]
      //Input_0_String: "1"
      //Input_1_Class<?>: Long.class
      //Assert: assertNotNull(method_result);
      //Assert: assertEquals(1L, method_result);
      
      RedisService redisService0 = new RedisService();
      Class<Long> class0 = Long.class;
      
      //Call method: stringToBean
      Object object0 = PrivateAccess.callMethod((Class<RedisService>) RedisService.class, redisService0, "stringToBean", (Object) "1", (Class<?>) String.class, (Object) class0, (Class<?>) Class.class);
      
      //Test Result Assert
      assertNotNull(object0);
      
      //Test Result Assert
      assertEquals(1L, object0);
  }
}
