/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.jesper.seckill.redis;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import static org.smartunit.runtime.SmartAssertions.*;
import com.alibaba.fastjson.JSONException;
import com.jesper.seckill.redis.KeyPrefix;
import com.jesper.seckill.redis.RedisService;
import javax.swing.JLayeredPane;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;
import redis.clients.jedis.Jedis;
import redis.clients.jedis.JedisPool;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class RedisService_SSTest extends RedisService_SSTest_scaffolding {
// allCoveredLines:[15, 24, 26, 28, 29, 30, 31, 33, 34, 42, 44, 45, 46, 47, 49, 50, 51, 52, 54, 57, 59, 68, 70, 72, 73, 74, 76, 84, 86, 88, 89, 91, 100, 102, 104, 105, 107, 115, 117, 119, 120, 122, 128, 129, 131, 132, 133, 134, 135, 136, 137, 139, 145, 146, 148, 149, 150, 151, 152, 153, 155, 160, 161, 163]

  @Test(timeout = 4000)
  public void test_beanToString_00()  throws Throwable  {
      //caseID:1872b461360b34450219d878ded48c5f
      //CoveredLines: [15, 128, 131, 132, 134, 136, 139]
      //Input_0_Object: redisService0
      //Assert: assertEquals("{}", method_result);
      
      RedisService redisService0 = new RedisService();
      
      //Call method: beanToString
      String string0 = RedisService.beanToString((Object) redisService0);
      
      //Test Result Assert
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test_decr_01()  throws Throwable  {
      //caseID:c8ad5e9bcbf235ae2f414d304f762d40
      //CoveredLines: [15, 115, 117, 119, 120, 122, 160, 161, 163]
      //Input_0_KeyPrefix: {getPrefix="1.0"}
      //Input_1_String: "com.jesper.seckill.redis.RedisService"
      //Assert: assertNull(method_result);
      
      RedisService redisService0 = new RedisService();
      //mock jedis0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock jedisPool0
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);
      //mock keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("1.0").when(keyPrefix0).getPrefix();
      
      //Call method: decr
      Long long0 = redisService0.decr(keyPrefix0, "com.jesper.seckill.redis.RedisService");
      
      //Test Result Assert
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test_delete_02()  throws Throwable  {
      //caseID:ba7b8c0fb13265a5b0f0762e4a7abc3b
      //CoveredLines: [15, 68, 70, 72, 73, 74, 76, 160, 161, 163]
      //Input_0_KeyPrefix: {getPrefix="30"}
      //Input_1_String: "Ts|>,xj"
      //Assert: assertFalse(method_result);
      
      RedisService redisService0 = new RedisService();
      Long long0 = new Long(0L);
      //mock jedis0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(jedis0).del(anyString());
      //mock jedisPool0
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);
      //mock keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("30").when(keyPrefix0).getPrefix();
      
      //Call method: delete
      boolean boolean0 = redisService0.delete(keyPrefix0, "Ts|>,xj");
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test_delete_03()  throws Throwable  {
      //caseID:977d6835e3ad5ea13729ac3669e6f390
      //CoveredLines: [15, 68, 70, 72, 73, 74, 76, 160, 161, 163]
      //Input_0_KeyPrefix: {getPrefix=""}
      //Input_1_String: ""
      //Assert: assertTrue(method_result);
      
      RedisService redisService0 = new RedisService();
      Long long0 = new Long(1L);
      //mock jedis0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(jedis0).del(anyString());
      //mock jedisPool0
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);
      //mock keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("").when(keyPrefix0).getPrefix();
      
      //Call method: delete
      boolean boolean0 = redisService0.delete(keyPrefix0, "");
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test_exists_04()  throws Throwable  {
      //caseID:93c402aa6359c116352c7a4b9e0aaf11
      //CoveredLines: [15, 84, 86, 88, 89, 91, 160, 161, 163]
      //Input_0_KeyPrefix: {getPrefix="jndiRealm.cipherSuites"}
      //Input_1_String: "1.0"
      //Assert: assertFalse(method_result);
      
      RedisService redisService0 = new RedisService();
      Boolean boolean0 = Boolean.FALSE;
      //mock jedis0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(boolean0).when(jedis0).exists(anyString());
      //mock jedisPool0
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);
      //mock keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("jndiRealm.cipherSuites").when(keyPrefix0).getPrefix();
      
      //Call method: exists
      boolean boolean1 = redisService0.exists(keyPrefix0, "1.0");
      
      //Test Result Assert
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test_get_05()  throws Throwable  {
      //caseID:3e224d5cff8ae4cad272b818780c5787
      //CoveredLines: [15, 24, 26, 28, 29, 30, 31, 33, 145, 146, 160, 161, 163]
      //Input_0_KeyPrefix: {getPrefix="Property 'serviceType' is required"}
      //Input_1_String: "1"
      //Input_2_Long>: Long.class
      //Assert: assertNull(method_result);
      
      RedisService redisService0 = new RedisService();
      //mock jedis0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock jedisPool0
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);
      //mock keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("Property 'serviceType' is required").when(keyPrefix0).getPrefix();
      Class<Long> class0 = Long.class;
      
      //Call method: get
      Long long0 = redisService0.get(keyPrefix0, "1", class0);
      
      //Test Result Assert
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test_get_06()  throws Throwable  {
      //caseID:003dcca4f3a106b3bfb99d661122f409
      //CoveredLines: [15, 24, 26, 28, 29, 30, 31, 33, 145, 148, 150, 151, 160, 161, 163]
      //Input_0_KeyPrefix: {getPrefix="Init"}
      //Input_1_String: "1.0"
      //Input_2_Long>: Long.class
      //Assert: assertNotNull(method_result);
      //Assert: assertEquals(1L, (long)method_result);
      
      RedisService redisService0 = new RedisService();
      //mock jedis0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("1").when(jedis0).get(anyString());
      //mock jedisPool0
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);
      //mock keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("Init").when(keyPrefix0).getPrefix();
      Class<Long> class0 = Long.class;
      
      //Call method: get
      Long long0 = redisService0.get(keyPrefix0, "1.0", class0);
      
      //Test Result Assert
      assertNotNull(long0);
      
      //Test Result Assert
      assertEquals(1L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test_get_07()  throws Throwable  {
      //caseID:b7efb635711e3a36c262d02529a0000c
      //CoveredLines: [15, 24, 26, 28, 29, 30, 33, 34, 145, 148, 150, 152, 155, 160, 161, 163]
      //Input_0_KeyPrefix: {getPrefix="Zr~gV~w%N=\u00058t(9Q"}
      //Input_1_String: "1.0"
      //Input_2_Object>: Object.class
      
      RedisService redisService0 = new RedisService();
      //mock jedis0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("r").when(jedis0).get(anyString());
      //mock jedisPool0
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);
      //mock keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("Zr~gV~w%N=\u00058t(9Q").when(keyPrefix0).getPrefix();
      Class<Object> class0 = Object.class;
      
      //Call method: get
      // Undeclared exception!
      try { 
        redisService0.get(keyPrefix0, "1.0", class0);
      } catch(Throwable e) {
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
         assertEquals("com.alibaba.fastjson.JSONException", e.getClass().getName());
         assertEquals("syntax error, pos 1, json : r", e.getMessage());
      }
  }

  @Test(timeout = 4000)
  public void test_get_08()  throws Throwable  {
      //caseID:2a47d05dc118273a7328f203062c8290
      //CoveredLines: [15, 24, 26, 28, 29, 30, 31, 33, 145, 148, 150, 152, 153, 160, 161, 163]
      //Input_0_KeyPrefix: {getPrefix="R [z`6d>`E"}
      //Input_1_String: "R [z`6d>`E"
      //Input_2_String>: String.class
      //Assert: assertNotNull(method_result);
      //Assert: assertEquals("R [z`6d>`E", method_result);
      
      RedisService redisService0 = new RedisService();
      //mock jedis0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("R [z`6d>`E").when(jedis0).get(anyString());
      //mock jedisPool0
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);
      //mock keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("R [z`6d>`E").when(keyPrefix0).getPrefix();
      Class<String> class0 = String.class;
      
      //Call method: get
      String string0 = redisService0.get(keyPrefix0, "R [z`6d>`E", class0);
      
      //Test Result Assert
      assertNotNull(string0);
      
      //Test Result Assert
      assertEquals("R [z`6d>`E", string0);
  }

  @Test(timeout = 4000)
  public void test_incr_09()  throws Throwable  {
      //caseID:e9f9af38740f878213470284b3675025
      //CoveredLines: [15, 100, 102, 104, 105, 107, 160, 161, 163]
      //Input_0_KeyPrefix: {getPrefix="J&w/:?!7l"}
      //Input_1_String: "1.0"
      //Assert: assertNull(method_result);
      
      RedisService redisService0 = new RedisService();
      //mock jedis0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock jedisPool0
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);
      //mock keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("J&w/:?!7l").when(keyPrefix0).getPrefix();
      
      //Call method: incr
      Long long0 = redisService0.incr(keyPrefix0, "1.0");
      
      //Test Result Assert
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test_set_10()  throws Throwable  {
      //caseID:ebba53ef6f1022242e78ae3f73a8e13c
      //CoveredLines: [15, 42, 44, 45, 46, 47, 59, 128, 129, 160, 161, 163]
      //Input_0_KeyPrefix: {}
      //Input_1_String: "1"
      //Input_2_String: null
      //Assert: assertFalse(method_result);
      
      RedisService redisService0 = new RedisService();
      //mock jedis0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock jedisPool0
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);
      //mock keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: set
      Boolean boolean0 = redisService0.set(keyPrefix0, "1", (String) null);
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test_set_11()  throws Throwable  {
      //caseID:29ca7d4f9970bf36d88b764d3e2ab29f
      //CoveredLines: [15, 42, 44, 45, 46, 47, 59, 128, 131, 132, 134, 136, 137, 160, 161, 163]
      //Input_0_KeyPrefix: {}
      //Input_1_String: ""
      //Input_2_Object: ""
      //Assert: assertFalse(method_result);
      
      RedisService redisService0 = new RedisService();
      //mock jedis0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock jedisPool0
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);
      //mock keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: set
      Boolean boolean0 = redisService0.set(keyPrefix0, "", (Object) "");
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test_set_12()  throws Throwable  {
      //caseID:3a912e774de3e26b1cf9fa263d4fcc4c
      //CoveredLines: [15, 42, 44, 45, 46, 49, 50, 51, 54, 57, 59, 128, 131, 132, 133, 160, 161, 163]
      //Input_0_KeyPrefix: {getPrefix="com.jesper.seckill.redis.RedisService", expireSeconds=804}
      //Input_1_String: "1.0"
      //Input_2_Integer: JLayeredPane.MODAL_LAYER
      //Assert: assertTrue(method_result);
      
      RedisService redisService0 = new RedisService();
      //mock jedis0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("o(M3zSFEiG2mvJC").when(jedis0).setex(anyString() , anyInt() , anyString());
      //mock jedisPool0
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);
      //mock keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(804).when(keyPrefix0).expireSeconds();
      doReturn("com.jesper.seckill.redis.RedisService").when(keyPrefix0).getPrefix();
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      
      //Call method: set
      Boolean boolean0 = redisService0.set(keyPrefix0, "1.0", integer0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test_set_13()  throws Throwable  {
      //caseID:6834bd5b6e43ec37c4dc1531d2ab7bc4
      //CoveredLines: [15, 42, 44, 45, 46, 49, 50, 51, 52, 57, 59, 128, 131, 132, 134, 135, 160, 161, 163]
      //Input_0_KeyPrefix: {getPrefix="1", expireSeconds=0}
      //Input_1_String: "1.0"
      //Input_2_Long: 1L
      //Assert: assertTrue(method_result);
      
      RedisService redisService0 = new RedisService();
      //mock jedis0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((String) null).when(jedis0).set(anyString() , anyString());
      //mock jedisPool0
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);
      //mock keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(0).when(keyPrefix0).expireSeconds();
      doReturn("1").when(keyPrefix0).getPrefix();
      Long long0 = new Long(1L);
      
      //Call method: set
      Boolean boolean0 = redisService0.set(keyPrefix0, "1.0", long0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test_set_14()  throws Throwable  {
      //caseID:d9b18df6c5112dffd9eab1d68b01eaaa
      //CoveredLines: [15, 42, 44, 45, 46, 49, 50, 51, 54, 57, 59, 128, 131, 132, 134, 136, 137, 160, 161, 163]
      //Input_0_KeyPrefix: {getPrefix="1.0", expireSeconds=3}
      //Input_1_String: "com.jesper.seckill.redis.RedisService"
      //Input_2_Object: "com.jesper.seckill.redis.RedisService"
      //Assert: assertTrue(method_result);
      
      RedisService redisService0 = new RedisService();
      //mock jedis0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock jedisPool0
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);
      //mock keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(3).when(keyPrefix0).expireSeconds();
      doReturn("1.0").when(keyPrefix0).getPrefix();
      
      //Call method: set
      Boolean boolean0 = redisService0.set(keyPrefix0, "com.jesper.seckill.redis.RedisService", (Object) "com.jesper.seckill.redis.RedisService");
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test_set_15()  throws Throwable  {
      //caseID:eafae4e013a67c8b5c0721c58ae5dfac
      //CoveredLines: [15, 42, 44, 45, 46, 49, 50, 51, 52, 57, 59, 128, 131, 132, 134, 136, 137, 160, 161, 163]
      //Input_0_KeyPrefix: {}
      //Input_1_String: "Unexpected source/target types"
      //Input_2_Object: "Unexpected source/target types"
      //Assert: assertTrue(method_result);
      
      RedisService redisService0 = new RedisService();
      //mock jedis0
      Jedis jedis0 = mock(Jedis.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock jedisPool0
      JedisPool jedisPool0 = mock(JedisPool.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(jedis0).when(jedisPool0).getResource();
      PrivateAccess.setVariable((Class<?>) RedisService.class, redisService0, "jedisPool", (Object) jedisPool0);
      //mock keyPrefix0
      KeyPrefix keyPrefix0 = mock(KeyPrefix.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: set
      Boolean boolean0 = redisService0.set(keyPrefix0, "Unexpected source/target types", (Object) "Unexpected source/target types");
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test_stringToBean_16()  throws Throwable  {
      //caseID:9caa4ca82d354b7d92649126cf6cbfdc
      //CoveredLines: [15, 145, 146]
      //Input_0_String: ""
      //Input_1_Object>: Object.class
      //Assert: assertNull(method_result);
      
      RedisService redisService0 = new RedisService();
      Class<Object> class0 = Object.class;
      
      //Call method: stringToBean
      Object object0 = RedisService.stringToBean("", class0);
      
      //Test Result Assert
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test_stringToBean_17()  throws Throwable  {
      //caseID:5d72ecea6e512202318b20716d9f9bed
      //CoveredLines: [15, 145, 146]
      //Input_0_String: "{}"
      //Input_1_Object>: null
      //Assert: assertNull(method_result);
      
      RedisService redisService0 = new RedisService();
      
      //Call method: stringToBean
      Object object0 = RedisService.stringToBean("{}", (Class<Object>) null);
      
      //Test Result Assert
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test_stringToBean_18()  throws Throwable  {
      //caseID:6c301c1983e0ecc0d3546fc7fe1b498c
      //CoveredLines: [15, 145, 148, 149]
      //Input_0_String: "1.0"
      //Input_1_Integer>: Integer.TYPE
      
      RedisService redisService0 = new RedisService();
      Class<Integer> class0 = Integer.TYPE;
      
      //Call method: stringToBean
      // Undeclared exception!
      try { 
        RedisService.stringToBean("1.0", class0);
      } catch(Throwable e) {
         verifyException("java.lang.NumberFormatException", e);
         assertEquals("java.lang.NumberFormatException", e.getClass().getName());
         assertEquals("For input string: \"1.0\"", e.getMessage());
      }
  }

  @Test(timeout = 4000)
  public void test_stringToBean_19()  throws Throwable  {
      //caseID:d001ffb879f612a9244a6ed9a4c37a34
      //CoveredLines: [15, 145, 148, 149]
      //Input_0_String: "1.0"
      //Input_1_Integer>: Integer.class
      
      RedisService redisService0 = new RedisService();
      Class<Integer> class0 = Integer.class;
      
      //Call method: stringToBean
      // Undeclared exception!
      try { 
        RedisService.stringToBean("1.0", class0);
      } catch(Throwable e) {
         verifyException("java.lang.NumberFormatException", e);
         assertEquals("java.lang.NumberFormatException", e.getClass().getName());
         assertEquals("For input string: \"1.0\"", e.getMessage());
      }
  }

  @Test(timeout = 4000)
  public void test_stringToBean_20()  throws Throwable  {
      //caseID:cf7e57d596d065e9175329977729939c
      //CoveredLines: [15, 145, 148, 150, 151]
      //Input_0_String: "1"
      //Input_1_Long>: Long.TYPE
      //Assert: assertNotNull(method_result);
      //Assert: assertEquals(1L, (long)method_result);
      
      RedisService redisService0 = new RedisService();
      Class<Long> class0 = Long.TYPE;
      
      //Call method: stringToBean
      Long long0 = RedisService.stringToBean("1", class0);
      
      //Test Result Assert
      assertNotNull(long0);
      
      //Test Result Assert
      assertEquals(1L, (long)long0);
  }
}
