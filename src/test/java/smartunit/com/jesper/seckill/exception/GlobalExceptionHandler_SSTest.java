/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.jesper.seckill.exception;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.jesper.seckill.exception.GlobalException;
import com.jesper.seckill.exception.GlobalExceptionHandler;
import com.jesper.seckill.result.CodeMsg;
import com.jesper.seckill.result.Result;
import javax.servlet.http.HttpServletRequest;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;
import org.springframework.validation.BindException;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class GlobalExceptionHandler_SSTest extends GlobalExceptionHandler_SSTest_scaffolding {
// allCoveredLines:[21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36]

  @Test(timeout = 4000)
  public void test_exceptionHandler_0()  throws Throwable  {
      //caseID:6eb7f4648227bbbd5b8f40a0a60a8144
      //CoveredLines: [21, 25, 26, 27, 28]
      //Input_0_HttpServletRequest: {}
      //Input_1_Exception: codeMsg0
      //Assert: assertEquals(0, method_result.getCode());
      
      GlobalExceptionHandler globalExceptionHandler0 = new GlobalExceptionHandler();
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      GlobalException globalException0 = new GlobalException(codeMsg0);
      
      //Call method: exceptionHandler
      Result<String> result0 = globalExceptionHandler0.exceptionHandler(httpServletRequest0, globalException0);
      
      //Test Result Assert
      assertEquals(0, result0.getCode());
  }

  @Test(timeout = 4000)
  public void test_exceptionHandler_1()  throws Throwable  {
      //caseID:f91bec33e5413b1886bbe44466225fd2
      //CoveredLines: [21, 25, 26, 29, 36]
      //Input_0_HttpServletRequest: {}
      //Input_1_Exception: {}
      //Assert: assertEquals("\u670D\u52A1\u7AEF\u5F02\u5E38", method_result.getMsg());
      
      GlobalExceptionHandler globalExceptionHandler0 = new GlobalExceptionHandler();
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock exception0
      Exception exception0 = mock(Exception.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: exceptionHandler
      Result<String> result0 = globalExceptionHandler0.exceptionHandler(httpServletRequest0, exception0);
      
      //Test Result Assert
      assertEquals("\u670D\u52A1\u7AEF\u5F02\u5E38", result0.getMsg());
  }

  @Test(timeout = 4000)
  public void test_exceptionHandler_2()  throws Throwable  {
      //caseID:f1d205e0b474b4bbdaa16d8a0a254c03
      //CoveredLines: [21, 25, 26, 29, 30, 31, 32, 33, 34]
      //Input_0_HttpServletRequest: {}
      //Input_1_Exception: httpServletRequest0, "$$"
      //Assert: assertEquals("\u53C2\u6570\u6821\u9A8C\u5F02\u5E38\uFF1Anull", method_result.getMsg());
      
      GlobalExceptionHandler globalExceptionHandler0 = new GlobalExceptionHandler();
      //mock httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      BindException bindException0 = new BindException(httpServletRequest0, "$$");
      bindException0.reject("$$");
      
      //Call method: exceptionHandler
      Result<String> result0 = globalExceptionHandler0.exceptionHandler(httpServletRequest0, bindException0);
      
      //Test Result Assert
      assertEquals("\u53C2\u6570\u6821\u9A8C\u5F02\u5E38\uFF1Anull", result0.getMsg());
  }
}
