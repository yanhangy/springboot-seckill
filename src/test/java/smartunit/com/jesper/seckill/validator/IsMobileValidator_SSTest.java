/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.jesper.seckill.validator;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.jesper.seckill.validator.IsMobile;
import com.jesper.seckill.validator.IsMobileValidator;
import javax.validation.ConstraintValidatorContext;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class IsMobileValidator_SSTest extends IsMobileValidator_SSTest_scaffolding {
// allCoveredLines:[14, 16, 21, 22, 26, 27, 29, 30, 32]

  @Test(timeout = 4000)
  public void test_initialize_0()  throws Throwable  {
      //caseID:a70cc19074de621bc20c3b48e4903ae1
      //CoveredLines: [14, 16, 21, 22]
      //Input_0_IsMobile: {}
      
      IsMobileValidator isMobileValidator0 = new IsMobileValidator();
      //mock isMobile0
      IsMobile isMobile0 = mock(IsMobile.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: initialize
      isMobileValidator0.initialize(isMobile0);
  }

  @Test(timeout = 4000)
  public void test_isValid_1()  throws Throwable  {
      //caseID:924f6e86cd638f997e89edb201ae6520
      //CoveredLines: [14, 16, 26, 27]
      //Input_0_String: "com.jesper.seckill.validator.IsMobileValidator"
      //Input_1_ConstraintValidatorContext: {}
      //Assert: assertFalse(method_result);
      
      IsMobileValidator isMobileValidator0 = new IsMobileValidator();
      PrivateAccess.setVariable((Class<?>) IsMobileValidator.class, isMobileValidator0, "required", (Object) true);
      //mock constraintValidatorContext0
      ConstraintValidatorContext constraintValidatorContext0 = mock(ConstraintValidatorContext.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: isValid
      boolean boolean0 = isMobileValidator0.isValid("com.jesper.seckill.validator.IsMobileValidator", constraintValidatorContext0);
      
      //Test Result Assert
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test_isValid_2()  throws Throwable  {
      //caseID:d7ed36f0af907b769ad801d2df316c0f
      //CoveredLines: [14, 16, 26, 29, 30]
      //Input_0_String: ""
      //Input_1_ConstraintValidatorContext: {}
      //Assert: assertTrue(method_result);
      
      IsMobileValidator isMobileValidator0 = new IsMobileValidator();
      //mock constraintValidatorContext0
      ConstraintValidatorContext constraintValidatorContext0 = mock(ConstraintValidatorContext.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: isValid
      boolean boolean0 = isMobileValidator0.isValid("", constraintValidatorContext0);
      
      //Test Result Assert
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test_isValid_3()  throws Throwable  {
      //caseID:99f99dd0cc49fd15e38a9d2bbdd6dccd
      //CoveredLines: [14, 16, 26, 29, 32]
      //Input_0_String: "W'"
      //Input_1_ConstraintValidatorContext: {}
      //Assert: assertFalse(method_result);
      
      IsMobileValidator isMobileValidator0 = new IsMobileValidator();
      //mock constraintValidatorContext0
      ConstraintValidatorContext constraintValidatorContext0 = mock(ConstraintValidatorContext.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: isValid
      boolean boolean0 = isMobileValidator0.isValid("W'", constraintValidatorContext0);
      
      //Test Result Assert
      assertFalse(boolean0);
  }
}
