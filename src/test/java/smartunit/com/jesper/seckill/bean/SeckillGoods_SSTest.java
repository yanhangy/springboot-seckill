/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.jesper.seckill.bean;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.jesper.seckill.bean.SeckillGoods;
import java.util.Date;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class SeckillGoods_SSTest extends SeckillGoods_SSTest_scaffolding {
// allCoveredLines:[8, 17, 21, 22, 25, 29, 30, 33, 37, 38, 41, 45, 46, 49, 53, 54, 57, 61, 62]

  @Test(timeout = 4000)
  public void test_getEndDate_00()  throws Throwable  {
      //caseID:758a0c63af6aaa13fab58527572b3668
      //CoveredLines: [8, 57]
      //Assert: assertNull(method_result);
      
      SeckillGoods seckillGoods0 = new SeckillGoods();
      
      //Call method: getEndDate
      Date date0 = seckillGoods0.getEndDate();
      
      //Test Result Assert
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test_getGoodsId_01()  throws Throwable  {
      //caseID:6b02e8b01002a8665c0fcf00b539228f
      //CoveredLines: [8, 33]
      //Assert: assertNull(method_result);
      
      SeckillGoods seckillGoods0 = new SeckillGoods();
      
      //Call method: getGoodsId
      Long long0 = seckillGoods0.getGoodsId();
      
      //Test Result Assert
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test_getId_02()  throws Throwable  {
      //caseID:6b0cb133f8d3cc923841389b5a6e637b
      //CoveredLines: [8, 25]
      //Assert: assertNull(method_result);
      
      SeckillGoods seckillGoods0 = new SeckillGoods();
      
      //Call method: getId
      Long long0 = seckillGoods0.getId();
      
      //Test Result Assert
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test_getStartDate_03()  throws Throwable  {
      //caseID:4808b72c3864055754e9aee74057df58
      //CoveredLines: [8, 49]
      //Assert: assertNull(method_result);
      
      SeckillGoods seckillGoods0 = new SeckillGoods();
      
      //Call method: getStartDate
      Date date0 = seckillGoods0.getStartDate();
      
      //Test Result Assert
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test_getStockCount_04()  throws Throwable  {
      //caseID:036ccee358ae1d16b30950d0f9c92164
      //CoveredLines: [8, 41]
      //Assert: assertNull(method_result);
      
      SeckillGoods seckillGoods0 = new SeckillGoods();
      
      //Call method: getStockCount
      Integer integer0 = seckillGoods0.getStockCount();
      
      //Test Result Assert
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test_getVersion_05()  throws Throwable  {
      //caseID:2e239d27013fd3ecbf0d097217036a6f
      //CoveredLines: [8, 17]
      //Assert: assertEquals(0, method_result);
      
      SeckillGoods seckillGoods0 = new SeckillGoods();
      
      //Call method: getVersion
      int int0 = seckillGoods0.getVersion();
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_setEndDate_06()  throws Throwable  {
      //caseID:f4a6b8a7294ff7b5b9fac1c36f93f677
      //CoveredLines: [8, 61, 62]
      //Input_0_Date: {}
      
      SeckillGoods seckillGoods0 = new SeckillGoods();
      //mock date0
      Date date0 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: setEndDate
      seckillGoods0.setEndDate(date0);
      
      //Test Result Assert
      assertEquals(0, seckillGoods0.getVersion());
  }

  @Test(timeout = 4000)
  public void test_setGoodsId_07()  throws Throwable  {
      //caseID:a036487a02705920dbb09cff8f798b8d
      //CoveredLines: [8, 37, 38]
      //Input_0_Long: 532
      
      SeckillGoods seckillGoods0 = new SeckillGoods();
      Long long0 = new Long(532);
      
      //Call method: setGoodsId
      seckillGoods0.setGoodsId(long0);
      
      //Test Result Assert
      assertNull(seckillGoods0.getStockCount());
  }

  @Test(timeout = 4000)
  public void test_setId_08()  throws Throwable  {
      //caseID:0d428017e8a11469c20fcd7be8b705e4
      //CoveredLines: [8, 29, 30]
      //Input_0_Long: 55296
      
      SeckillGoods seckillGoods0 = new SeckillGoods();
      Long long0 = new Long(55296);
      
      //Call method: setId
      seckillGoods0.setId(long0);
      
      //Test Result Assert
      assertEquals(0, seckillGoods0.getVersion());
  }

  @Test(timeout = 4000)
  public void test_setStartDate_09()  throws Throwable  {
      //caseID:48fd004319b18d9c4ed1875dda7cb385
      //CoveredLines: [8, 53, 54]
      //Input_0_Date: {}
      
      SeckillGoods seckillGoods0 = new SeckillGoods();
      //mock date0
      Date date0 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: setStartDate
      seckillGoods0.setStartDate(date0);
      
      //Test Result Assert
      assertNull(seckillGoods0.getGoodsId());
  }

  @Test(timeout = 4000)
  public void test_setStockCount_10()  throws Throwable  {
      //caseID:8ea75a74945b2451b2d327e32f536e3e
      //CoveredLines: [8, 45, 46]
      //Input_0_Integer: 0
      
      SeckillGoods seckillGoods0 = new SeckillGoods();
      Integer integer0 = new Integer(0);
      
      //Call method: setStockCount
      seckillGoods0.setStockCount(integer0);
      
      //Test Result Assert
      assertEquals(0, (int)seckillGoods0.getStockCount());
  }

  @Test(timeout = 4000)
  public void test_setVersion_11()  throws Throwable  {
      //caseID:c02d2b36fab41bd529ff44973e59f5a0
      //CoveredLines: [8, 21, 22]
      //Input_0_int: 
      
      SeckillGoods seckillGoods0 = new SeckillGoods();
      
      //Call method: setVersion
      seckillGoods0.setVersion((-1));
      
      //Test Result Assert
      assertEquals((-1), seckillGoods0.getVersion());
  }
}
