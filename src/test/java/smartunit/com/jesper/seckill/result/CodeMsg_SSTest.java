/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.jesper.seckill.result;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import com.jesper.seckill.result.CodeMsg;
import org.junit.runner.RunWith;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class CodeMsg_SSTest extends CodeMsg_SSTest_scaffolding {
// allCoveredLines:[34, 35, 36, 37, 40, 44, 45, 48, 52, 53, 61, 62, 63, 68]

  @Test(timeout = 4000)
  public void test_getCode_0()  throws Throwable  {
      //caseID:27c6cb81eac045b3196d78004abef2a9
      //CoveredLines: [34, 35, 36, 37, 40, 61, 62, 63]
      //Assert: assertEquals(500501, method_result);
      
      CodeMsg codeMsg0 = CodeMsg.REPEATE_SECKILL;
      Object[] objectArray0 = new Object[6];
      CodeMsg codeMsg1 = codeMsg0.fillArgs(objectArray0);
      
      //Call method: getCode
      int int0 = codeMsg1.getCode();
      
      //Test Result Assert
      assertEquals(500501, int0);
  }

  @Test(timeout = 4000)
  public void test_getMsg_1()  throws Throwable  {
      //caseID:fd04bb29ab9f1250924195483b594d71
      //CoveredLines: [34, 35, 36, 37, 48, 61, 62, 63]
      //Assert: assertEquals("Session\u4E0D\u5B58\u5728\u6216\u8005\u5DF2\u7ECF\u5931\u6548", method_result);
      
      CodeMsg codeMsg0 = CodeMsg.SESSION_ERROR;
      Object[] objectArray0 = new Object[9];
      CodeMsg codeMsg1 = codeMsg0.fillArgs(objectArray0);
      
      //Test Result Assert
      assertEquals(500210, codeMsg1.getCode());
      
      
      //Call method: getMsg
      String string0 = codeMsg0.getMsg();
      
      //Test Result Assert
      assertEquals("Session\u4E0D\u5B58\u5728\u6216\u8005\u5DF2\u7ECF\u5931\u6548", string0);
  }

  @Test(timeout = 4000)
  public void test_setCode_2()  throws Throwable  {
      //caseID:e0fb10c493fa55c9be4e5d93b9c67593
      //CoveredLines: [44, 45]
      //Input_0_int: 49
      
      CodeMsg codeMsg0 = CodeMsg.MOBILE_EMPTY;
      
      //Call method: setCode
      codeMsg0.setCode(49);
      
      //Test Result Assert
      assertEquals(49, codeMsg0.getCode());
  }

  @Test(timeout = 4000)
  public void test_setMsg_3()  throws Throwable  {
      //caseID:59bdd1fd3e29431b8eb7f519ab653c91
      //CoveredLines: [52, 53]
      //Input_0_String: "0101"
      
      CodeMsg codeMsg0 = CodeMsg.PRIMARY_ERROR;
      
      //Call method: setMsg
      codeMsg0.setMsg("0101");
      
      //Test Result Assert
      assertEquals(500216, codeMsg0.getCode());
  }

  @Test(timeout = 4000)
  public void test_toString_4()  throws Throwable  {
      //caseID:d40ef7c5d377e630d818b23dd8e23d6b
      //CoveredLines: [68]
      //Assert: assertEquals("CodeMsg [code=500215, msg=\u5BC6\u7801\u9519\u8BEF]", method_result);
      
      CodeMsg codeMsg0 = CodeMsg.PASSWORD_ERROR;
      
      //Call method: toString
      String string0 = codeMsg0.toString();
      
      //Test Result Assert
      assertEquals("CodeMsg [code=500215, msg=\u5BC6\u7801\u9519\u8BEF]", string0);
  }
}
