/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.jesper.seckill.result;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import com.jesper.seckill.result.CodeMsg;
import org.junit.runner.RunWith;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class CodeMsg_SSTest extends CodeMsg_SSTest_scaffolding {
// allCoveredLines:[34, 35, 36, 37, 40, 44, 45, 48, 52, 53, 61, 62, 63, 68]

  @Test(timeout = 4000)
  public void test_getCode_0()  throws Throwable  {
      //caseID:50564a3c2968ed7b07383b9074db12c6
      //CoveredLines: [40]
      //Assert: assertEquals(500501, method_result);
      
      CodeMsg codeMsg0 = CodeMsg.REPEATE_SECKILL;
      
      //Call method: getCode
      int int0 = codeMsg0.getCode();
      
      //Test Result Assert
      assertEquals(500501, int0);
  }

  @Test(timeout = 4000)
  public void test_getMsg_1()  throws Throwable  {
      //caseID:f8ebcf85e4f119b05703e90a2a8fef85
      //CoveredLines: [34, 35, 36, 37, 48, 61, 62, 63]
      //Assert: assertEquals("\u53C2\u6570\u6821\u9A8C\u5F02\u5E38\uFF1A%s", method_result);
      
      CodeMsg codeMsg0 = CodeMsg.BIND_ERROR;
      Object[] objectArray0 = new Object[1];
      CodeMsg codeMsg1 = codeMsg0.fillArgs(objectArray0);
      
      //Test Result Assert
      assertEquals(500101, codeMsg1.getCode());
      
      
      //Call method: getMsg
      String string0 = codeMsg0.getMsg();
      
      //Test Result Assert
      assertEquals("\u53C2\u6570\u6821\u9A8C\u5F02\u5E38\uFF1A%s", string0);
  }

  @Test(timeout = 4000)
  public void test_setCode_2()  throws Throwable  {
      //caseID:a4649da4b6ba42d8916d146e701d93bf
      //CoveredLines: [44, 45]
      //Input_0_int: 
      
      CodeMsg codeMsg0 = CodeMsg.PASSWORD_EMPTY;
      
      //Call method: setCode
      codeMsg0.setCode((-30));
      
      //Test Result Assert
      assertEquals((-30), codeMsg0.getCode());
  }

  @Test(timeout = 4000)
  public void test_setMsg_3()  throws Throwable  {
      //caseID:648423cbea23d707c7ef078facd9ef5c
      //CoveredLines: [52, 53]
      //Input_0_String: "500213"
      
      CodeMsg codeMsg0 = CodeMsg.SECKILL_OVER;
      
      //Call method: setMsg
      codeMsg0.setMsg("500213");
      
      //Test Result Assert
      assertEquals("500213", codeMsg0.getMsg());
  }

  @Test(timeout = 4000)
  public void test_toString_4()  throws Throwable  {
      //caseID:45c6b993ba33eee541bd393848b1656d
      //CoveredLines: [34, 35, 36, 37, 61, 62, 63, 68]
      
      CodeMsg codeMsg0 = CodeMsg.BIND_ERROR;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) codeMsg0;
      CodeMsg codeMsg1 = codeMsg0.fillArgs(objectArray0);
      
      //Test Result Assert
      assertEquals(500101, codeMsg1.getCode());
      
      //Test Result Assert
      assertEquals("\u53C2\u6570\u6821\u9A8C\u5F02\u5E38\uFF1ACodeMsg [code=500101, msg=\u53C2\u6570\u6821\u9A8C\u5F02\u5E38\uFF1A%s]", codeMsg1.getMsg());
  }
}
