/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.jesper.seckill.result;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import com.jesper.seckill.result.CodeMsg;
import org.junit.runner.RunWith;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class CodeMsg_SSTest extends CodeMsg_SSTest_scaffolding {

  @Test(timeout = 4000)
  public void test_getMsg_0()  throws Throwable  {
      //caseID:2812de1e2d069d42ebfb4b3a22c54444
      CodeMsg codeMsg0 = CodeMsg.SUCCESS;
      String string0 = codeMsg0.getMsg();
      assertEquals("success", string0);
  }
  @Test(timeout = 4000)
  public void test_getCode_1()  throws Throwable  {
      //caseID:a4545753f8fe49142b08d1e33ee57ca6
      CodeMsg codeMsg0 = CodeMsg.PASSWORD_EMPTY;
      int int0 = codeMsg0.getCode();
      assertEquals(500211, int0);
  }
  @Test(timeout = 4000)
  public void test_toString_2()  throws Throwable  {
      //caseID:d0be5179a9610da9906d1dd186938e42
      CodeMsg codeMsg0 = CodeMsg.ACCESS_LIMIT_REACHED;
      String string0 = codeMsg0.toString();
      assertEquals("CodeMsg [code=500104, msg=\u8BBF\u95EE\u9AD8\u5CF0\u671F\uFF0C\u8BF7\u7A0D\u7B49\uFF01]", string0);
  }
  @Test(timeout = 4000)
  public void test_setMsg_3()  throws Throwable  {
      //caseID:8939236a27b3951c5215f40f8b1ed38b
      CodeMsg codeMsg0 = CodeMsg.PASSWORD_EMPTY;

      //invoke method for codeMsg0
      codeMsg0.setMsg("h%Q'");

      //invoke method for codeMsg0
      assertEquals("h%Q'", codeMsg0.getMsg());
  }
  @Test(timeout = 4000)
  public void test_setCode_4()  throws Throwable  {
      //caseID:718bbef7eeeddb0940b46977a508db16
      CodeMsg codeMsg0 = CodeMsg.SESSION_ERROR;

      //invoke method for codeMsg0
      codeMsg0.setCode(500211);

      //invoke method for codeMsg0
      assertEquals(500211, codeMsg0.getCode());
  }
  @Test(timeout = 4000)
  public void test_fillArgs_5()  throws Throwable  {
      //caseID:ff446790254d35eda88f78b2aea5d421
      CodeMsg codeMsg0 = CodeMsg.ACCESS_LIMIT_REACHED;
      Object[] objectArray0 = new Object[0];
      CodeMsg codeMsg1 = codeMsg0.fillArgs(objectArray0);

      //invoke method for codeMsg1
      assertEquals(500104, codeMsg1.getCode());
  }}
