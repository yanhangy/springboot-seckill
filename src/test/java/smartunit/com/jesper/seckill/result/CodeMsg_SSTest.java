/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.jesper.seckill.result;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import com.jesper.seckill.result.CodeMsg;
import org.junit.runner.RunWith;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class CodeMsg_SSTest extends CodeMsg_SSTest_scaffolding {
// allCoveredLines:[34, 35, 36, 37, 40, 44, 45, 48, 52, 53, 61, 62, 63, 68]

  @Test(timeout = 4000)
  public void test_fillArgs_0()  throws Throwable  {
      //caseID:4d38c3fe2ae0ea8470bd59f9067c0b4c
      //CoveredLines: [34, 35, 36, 37, 61, 62, 63, 68]
      //Input_0_Object[]: objectArray0
      //Assert: assertEquals(0, method_result.getCode());
      //Assert: assertEquals("\u53C2\u6570\u6821\u9A8C\u5F02\u5E38\uFF1ACodeMsg [code=0, msg=\u53C2\u6570\u6821\u9A8C\u5F02\u5E38\uFF1A%s]", method_result.getMsg());
      
      CodeMsg codeMsg0 = CodeMsg.SUCCESS;
      PrivateAccess.setVariable((Class<?>) CodeMsg.class, codeMsg0, "msg", (Object) "\u53C2\u6570\u6821\u9A8C\u5F02\u5E38\uFF1A%s");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) codeMsg0;
      
      //Call method: fillArgs
      CodeMsg codeMsg1 = codeMsg0.fillArgs(objectArray0);
      
      //Test Result Assert
      assertEquals(0, codeMsg1.getCode());
      
      //Test Result Assert
      assertEquals("\u53C2\u6570\u6821\u9A8C\u5F02\u5E38\uFF1ACodeMsg [code=0, msg=\u53C2\u6570\u6821\u9A8C\u5F02\u5E38\uFF1A%s]", codeMsg1.getMsg());
  }

  @Test(timeout = 4000)
  public void test_getCode_1()  throws Throwable  {
      //caseID:f6999b8d4b79adc4da8c8e4b05892886
      //CoveredLines: [40]
      //Assert: assertEquals(500215, method_result);
      
      CodeMsg codeMsg0 = CodeMsg.PASSWORD_ERROR;
      
      //Call method: getCode
      int int0 = codeMsg0.getCode();
      
      //Test Result Assert
      assertEquals(500215, int0);
  }

  @Test(timeout = 4000)
  public void test_getMsg_2()  throws Throwable  {
      //caseID:9add83734e425939dfd0dd116e8040be
      //CoveredLines: [48]
      //Assert: assertEquals("\u4E0D\u80FD\u91CD\u590D\u79D2\u6740", method_result);
      
      CodeMsg codeMsg0 = CodeMsg.REPEATE_SECKILL;
      
      //Call method: getMsg
      String string0 = codeMsg0.getMsg();
      
      //Test Result Assert
      assertEquals("\u4E0D\u80FD\u91CD\u590D\u79D2\u6740", string0);
  }

  @Test(timeout = 4000)
  public void test_setCode_3()  throws Throwable  {
      //caseID:31e8e10c93c778c276b9755ac29c44aa
      //CoveredLines: [34, 35, 36, 37, 44, 45, 61, 62, 63]
      //Input_0_int: 3780
      
      CodeMsg codeMsg0 = CodeMsg.REPEATE_SECKILL;
      Object[] objectArray0 = new Object[7];
      CodeMsg codeMsg1 = codeMsg0.fillArgs(objectArray0);
      
      //Test Result Assert
      assertEquals(500501, codeMsg1.getCode());
      
      
      //Call method: setCode
      codeMsg1.setCode(3780);
      
      //Test Result Assert
      assertEquals(3780, codeMsg1.getCode());
  }

  @Test(timeout = 4000)
  public void test_setMsg_4()  throws Throwable  {
      //caseID:e2b4601329670e7b37b304e784af2017
      //CoveredLines: [52, 53]
      //Input_0_String: "1"
      
      CodeMsg codeMsg0 = CodeMsg.PASSWORD_ERROR;
      
      //Call method: setMsg
      codeMsg0.setMsg("1");
      
      //Test Result Assert
      assertEquals("1", codeMsg0.getMsg());
  }
}
