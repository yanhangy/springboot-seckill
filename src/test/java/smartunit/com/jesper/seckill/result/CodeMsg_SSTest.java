/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.jesper.seckill.result;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import com.jesper.seckill.result.CodeMsg;
import org.junit.runner.RunWith;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class CodeMsg_SSTest extends CodeMsg_SSTest_scaffolding {

  @Test(timeout = 4000)
  public void test_toString_0()  throws Throwable  {
      //caseID:c2237867e04ec992e40d635b8f349b80
      CodeMsg codeMsg0 = CodeMsg.BIND_ERROR;
      String string0 = codeMsg0.toString();
      assertEquals("CodeMsg [code=500101, msg=\u53C2\u6570\u6821\u9A8C\u5F02\u5E38\uFF1A%s]", string0);
  }
  @Test(timeout = 4000)
  public void test_getMsg_1()  throws Throwable  {
      //caseID:b672080f22d0de96e2be54ece2b4c269
      CodeMsg codeMsg0 = CodeMsg.PASSWORD_ERROR;
      String string0 = codeMsg0.getMsg();
      assertEquals("\u5BC6\u7801\u9519\u8BEF", string0);
  }
  @Test(timeout = 4000)
  public void test_getCode_2()  throws Throwable  {
      //caseID:9f1c6c308e8b403a1d637ecb46e6ab46
      CodeMsg codeMsg0 = CodeMsg.MOBILE_NOT_EXIST;
      int int0 = codeMsg0.getCode();
      assertEquals(500214, int0);
  }
  @Test(timeout = 4000)
  public void test_setMsg_3()  throws Throwable  {
      //caseID:1222eddcfd11ae5d30a598affc6ff341
      CodeMsg codeMsg0 = CodeMsg.MOBILE_ERROR;

      //invoke method for codeMsg0
      codeMsg0.setMsg("1.0");

      //invoke method for codeMsg0
      assertEquals(500213, codeMsg0.getCode());
  }
  @Test(timeout = 4000)
  public void test_setCode_4()  throws Throwable  {
      //caseID:a282abf0cb1f96d8a76cf36faabf01e5
      CodeMsg codeMsg0 = CodeMsg.ORDER_NOT_EXIST;

      //invoke method for codeMsg0
      codeMsg0.setCode(256);

      //invoke method for codeMsg0
      assertEquals(256, codeMsg0.getCode());
  }
  @Test(timeout = 4000)
  public void test_fillArgs_5()  throws Throwable  {
      //caseID:47691f8c9589048b3a8ff9f57f633b0c
      CodeMsg codeMsg0 = CodeMsg.BIND_ERROR;

      //invoke method for codeMsg0
      PrivateAccess.setVariable((Class<?>) CodeMsg.class, codeMsg0, "msg", (Object) "");
      Object[] objectArray0 = new Object[0];
      CodeMsg codeMsg1 = codeMsg0.fillArgs(objectArray0);

      //invoke method for codeMsg1
      assertEquals(500101, codeMsg1.getCode());
  }}
