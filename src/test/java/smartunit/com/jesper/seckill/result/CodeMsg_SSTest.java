/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.jesper.seckill.result;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import com.jesper.seckill.result.CodeMsg;
import org.junit.runner.RunWith;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class CodeMsg_SSTest extends CodeMsg_SSTest_scaffolding {
// allCoveredLines:[34, 35, 36, 37, 40, 44, 45, 48, 52, 53, 61, 62, 63, 68]

  @Test(timeout = 4000)
  public void test_fillArgs_0()  throws Throwable  {
      //caseID:9d5787b968a4924b0deb19fa8e64e0bf
      //CoveredLines: [34, 35, 36, 37, 61, 62, 63]
      //Input_0_Object[]: objectArray0
      //Assert: assertEquals(500211, method_result.getCode());
      
      CodeMsg codeMsg0 = CodeMsg.PASSWORD_EMPTY;
      Object[] objectArray0 = new Object[0];
      
      //Call method: fillArgs
      CodeMsg codeMsg1 = codeMsg0.fillArgs(objectArray0);
      
      //Test Result Assert
      assertEquals(500211, codeMsg1.getCode());
  }

  @Test(timeout = 4000)
  public void test_getCode_1()  throws Throwable  {
      //caseID:7b4acfc26f542d8bdf7c8770d30362d6
      //CoveredLines: [40]
      //Assert: assertEquals(0, method_result);
      
      CodeMsg codeMsg0 = CodeMsg.SUCCESS;
      
      //Call method: getCode
      int int0 = codeMsg0.getCode();
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_getMsg_2()  throws Throwable  {
      //caseID:f9d7f3b2f4b5dc9661fa413a5718c5c1
      //CoveredLines: [48]
      //Assert: assertEquals("\u5546\u54C1\u5DF2\u7ECF\u79D2\u6740\u5B8C\u6BD5", method_result);
      
      CodeMsg codeMsg0 = CodeMsg.SECKILL_OVER;
      
      //Call method: getMsg
      String string0 = codeMsg0.getMsg();
      
      //Test Result Assert
      assertEquals("\u5546\u54C1\u5DF2\u7ECF\u79D2\u6740\u5B8C\u6BD5", string0);
  }

  @Test(timeout = 4000)
  public void test_setCode_3()  throws Throwable  {
      //caseID:307ec1b272f2558b34202a8f47c3573e
      //CoveredLines: [44, 45]
      //Input_0_int: 301
      
      CodeMsg codeMsg0 = CodeMsg.PRIMARY_ERROR;
      
      //Call method: setCode
      codeMsg0.setCode(301);
      
      //Test Result Assert
      assertEquals(301, codeMsg0.getCode());
  }

  @Test(timeout = 4000)
  public void test_setMsg_4()  throws Throwable  {
      //caseID:e5f6e59d2900eeadab1a762fb1880218
      //CoveredLines: [52, 53]
      //Input_0_String: "1.0"
      
      CodeMsg codeMsg0 = CodeMsg.BIND_ERROR;
      
      //Call method: setMsg
      codeMsg0.setMsg("1.0");
      
      //Test Result Assert
      assertEquals("1.0", codeMsg0.getMsg());
  }

  @Test(timeout = 4000)
  public void test_toString_5()  throws Throwable  {
      //caseID:f009171b0ff32d8d112ae5772f59dd3b
      //CoveredLines: [68]
      //Assert: assertEquals("CodeMsg [code=500212, msg=\u624B\u673A\u53F7\u4E0D\u80FD\u4E3A\u7A7A]", method_result);
      
      CodeMsg codeMsg0 = CodeMsg.MOBILE_EMPTY;
      
      //Call method: toString
      String string0 = codeMsg0.toString();
      
      //Test Result Assert
      assertEquals("CodeMsg [code=500212, msg=\u624B\u673A\u53F7\u4E0D\u80FD\u4E3A\u7A7A]", string0);
  }
}
