/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.jesper.seckill.result;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import com.jesper.seckill.result.CodeMsg;
import org.junit.runner.RunWith;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class CodeMsg_SSTest extends CodeMsg_SSTest_scaffolding {
// allCoveredLines:[34, 35, 36, 37, 40, 44, 45, 48, 52, 53, 61, 62, 63, 68]

  @Test(timeout = 4000)
  public void test_fillArgs_0()  throws Throwable  {
      //caseID:1b782609c093f90c9aa744b50e5b4ba2
      //CoveredLines: [34, 35, 36, 37, 61, 62, 63]
      //Input_0_Object[]: objectArray0
      //Assert: assertEquals(500215, method_result.getCode());
      
      CodeMsg codeMsg0 = CodeMsg.PASSWORD_ERROR;
      Object[] objectArray0 = new Object[0];
      
      //Call method: fillArgs
      CodeMsg codeMsg1 = codeMsg0.fillArgs(objectArray0);
      
      //Test Result Assert
      assertEquals(500215, codeMsg1.getCode());
  }

  @Test(timeout = 4000)
  public void test_getCode_1()  throws Throwable  {
      //caseID:0cfd50e462f63889518c973be1679601
      //CoveredLines: [40]
      //Assert: assertEquals(500214, method_result);
      
      CodeMsg codeMsg0 = CodeMsg.MOBILE_NOT_EXIST;
      
      //Call method: getCode
      int int0 = codeMsg0.getCode();
      
      //Test Result Assert
      assertEquals(500214, int0);
  }

  @Test(timeout = 4000)
  public void test_getMsg_2()  throws Throwable  {
      //caseID:b1163de92e96d27ad9d915d18b5eb8bc
      //CoveredLines: [48]
      //Assert: assertEquals("\u624B\u673A\u53F7\u683C\u5F0F\u9519\u8BEF", method_result);
      
      CodeMsg codeMsg0 = CodeMsg.MOBILE_ERROR;
      
      //Call method: getMsg
      String string0 = codeMsg0.getMsg();
      
      //Test Result Assert
      assertEquals("\u624B\u673A\u53F7\u683C\u5F0F\u9519\u8BEF", string0);
  }

  @Test(timeout = 4000)
  public void test_setCode_3()  throws Throwable  {
      //caseID:e4c45da1dc940ca8dc44bbe2ad1ee1ff
      //CoveredLines: [44, 45]
      //Input_0_int: 500213
      
      CodeMsg codeMsg0 = CodeMsg.BIND_ERROR;
      
      //Call method: setCode
      codeMsg0.setCode(500213);
      
      //Test Result Assert
      assertEquals(500213, codeMsg0.getCode());
  }

  @Test(timeout = 4000)
  public void test_setMsg_4()  throws Throwable  {
      //caseID:d0bc4eb064586aa3b6bec8117965e81e
      //CoveredLines: [52, 53]
      //Input_0_String: "1.0"
      
      CodeMsg codeMsg0 = CodeMsg.ACCESS_LIMIT_REACHED;
      
      //Call method: setMsg
      codeMsg0.setMsg("1.0");
      
      //Test Result Assert
      assertEquals("1.0", codeMsg0.getMsg());
  }

  @Test(timeout = 4000)
  public void test_toString_5()  throws Throwable  {
      //caseID:6845e89fa75a8669c34be8bc73b0686d
      //CoveredLines: [68]
      //Assert: assertEquals("CodeMsg [code=500101, msg=\u53C2\u6570\u6821\u9A8C\u5F02\u5E38\uFF1A%s]", method_result);
      
      CodeMsg codeMsg0 = CodeMsg.BIND_ERROR;
      
      //Call method: toString
      String string0 = codeMsg0.toString();
      
      //Test Result Assert
      assertEquals("CodeMsg [code=500101, msg=\u53C2\u6570\u6821\u9A8C\u5F02\u5E38\uFF1A%s]", string0);
  }
}
