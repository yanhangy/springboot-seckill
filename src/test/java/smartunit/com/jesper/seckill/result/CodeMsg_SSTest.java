/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.jesper.seckill.result;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import com.jesper.seckill.result.CodeMsg;
import org.junit.runner.RunWith;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class CodeMsg_SSTest extends CodeMsg_SSTest_scaffolding {
// allCoveredLines:[34, 35, 36, 37, 40, 44, 45, 48, 52, 53, 61, 62, 63, 68]

  @Test(timeout = 4000)
  public void test_getCode_0()  throws Throwable  {
      //caseID:618a8886128b0dd012517249b3eae100
      //CoveredLines: [40]
      //Assert: assertEquals(500210, method_result);
      
      CodeMsg codeMsg0 = CodeMsg.SESSION_ERROR;
      
      //Call method: getCode
      int int0 = codeMsg0.getCode();
      
      //Test Result Assert
      assertEquals(500210, int0);
  }

  @Test(timeout = 4000)
  public void test_getMsg_1()  throws Throwable  {
      //caseID:ae0f80cf9f50030a60d357f61ce81f9c
      //CoveredLines: [34, 35, 36, 37, 48, 61, 62, 63]
      //Assert: assertEquals(0, codeMsg1.getCode());
      
      CodeMsg codeMsg0 = CodeMsg.SUCCESS;
      Object[] objectArray0 = new Object[4];
      CodeMsg codeMsg1 = codeMsg0.fillArgs(objectArray0);
      
      //Call method: getMsg
      codeMsg1.getMsg();
      
      //Test Result Assert
      assertEquals(0, codeMsg1.getCode());
  }

  @Test(timeout = 4000)
  public void test_setCode_2()  throws Throwable  {
      //caseID:db12624cac10796db785284377220b39
      //CoveredLines: [44, 45]
      //Input_0_int: 
      
      CodeMsg codeMsg0 = CodeMsg.MOBILE_NOT_EXIST;
      
      //Call method: setCode
      codeMsg0.setCode((-1));
      
      //Test Result Assert
      assertEquals((-1), codeMsg0.getCode());
  }

  @Test(timeout = 4000)
  public void test_setMsg_3()  throws Throwable  {
      //caseID:b628632e6147e9fb0fcd00642f07e92c
      //CoveredLines: [52, 53]
      //Input_0_String: ""
      
      CodeMsg codeMsg0 = CodeMsg.REPEATE_SECKILL;
      
      //Call method: setMsg
      codeMsg0.setMsg("");
      
      //Test Result Assert
      assertEquals(500501, codeMsg0.getCode());
  }

  @Test(timeout = 4000)
  public void test_toString_4()  throws Throwable  {
      //caseID:312904647a605eb3d305fa2f233e3dc4
      //CoveredLines: [68]
      //Assert: assertEquals("CodeMsg [code=500104, msg=\u8BBF\u95EE\u9AD8\u5CF0\u671F\uFF0C\u8BF7\u7A0D\u7B49\uFF01]", method_result);
      
      CodeMsg codeMsg0 = CodeMsg.ACCESS_LIMIT_REACHED;
      
      //Call method: toString
      String string0 = codeMsg0.toString();
      
      //Test Result Assert
      assertEquals("CodeMsg [code=500104, msg=\u8BBF\u95EE\u9AD8\u5CF0\u671F\uFF0C\u8BF7\u7A0D\u7B49\uFF01]", string0);
  }
}
