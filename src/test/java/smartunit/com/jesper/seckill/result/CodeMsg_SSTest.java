/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.jesper.seckill.result;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import com.jesper.seckill.result.CodeMsg;
import org.junit.runner.RunWith;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class CodeMsg_SSTest extends CodeMsg_SSTest_scaffolding {

  @Test(timeout = 4000)
  public void test_getCode_0()  throws Throwable  {
      //caseID:4b906b181ddcc91e3487da1bd5b7279d
      CodeMsg codeMsg0 = CodeMsg.ORDER_NOT_EXIST;
      int int0 = codeMsg0.getCode();
      assertEquals(500400, int0);
  }
  @Test(timeout = 4000)
  public void test_toString_1()  throws Throwable  {
      //caseID:f80a7e3ad2e9c960b7e95e5720866a43
      CodeMsg codeMsg0 = CodeMsg.MOBILE_ERROR;
      String string0 = codeMsg0.toString();
      assertEquals("CodeMsg [code=500213, msg=\u624B\u673A\u53F7\u683C\u5F0F\u9519\u8BEF]", string0);
  }
  @Test(timeout = 4000)
  public void test_setCode_2()  throws Throwable  {
      //caseID:7312cf8fbe624e27c9d34e3e4707c098
      CodeMsg codeMsg0 = CodeMsg.PASSWORD_EMPTY;

      //invoke method for codeMsg0
      codeMsg0.setCode(500500);

      //invoke method for codeMsg0
      assertEquals(500500, codeMsg0.getCode());
  }
  @Test(timeout = 4000)
  public void test_getMsg_3()  throws Throwable  {
      //caseID:b5da2fe8ba198596994e883105634024
      CodeMsg codeMsg0 = CodeMsg.PASSWORD_EMPTY;
      Object[] objectArray0 = new Object[6];
      CodeMsg codeMsg1 = codeMsg0.fillArgs(objectArray0);

      //invoke method for codeMsg1
      codeMsg1.getMsg();

      //invoke method for codeMsg1
      assertEquals(500211, codeMsg1.getCode());
  }
  @Test(timeout = 4000)
  public void test_setMsg_4()  throws Throwable  {
      //caseID:6641ed356e6cddae557c03249459661d
      CodeMsg codeMsg0 = CodeMsg.SECKILL_OVER;
      Object[] objectArray0 = new Object[8];
      CodeMsg codeMsg1 = codeMsg0.fillArgs(objectArray0);

      //invoke method for codeMsg1
      assertEquals(500500, codeMsg1.getCode());
      

      //invoke method for codeMsg0
      codeMsg0.setMsg("500501");

      //invoke method for codeMsg0

      //invoke method for codeMsg1
      assertNotSame(codeMsg0, codeMsg1);
  }}
