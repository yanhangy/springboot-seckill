/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.jesper.seckill.result;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import com.jesper.seckill.result.CodeMsg;
import org.junit.runner.RunWith;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class CodeMsg_SSTest extends CodeMsg_SSTest_scaffolding {
// allCoveredLines:[34, 35, 36, 37, 40, 44, 45, 48, 52, 53, 61, 62, 63, 68]

  @Test(timeout = 4000)
  public void test_fillArgs_0()  throws Throwable  {
      //caseID:2d2dc2b3626827cdda88b8329cb87a60
      //CoveredLines: [34, 35, 36, 37, 61, 62, 63]
      //Input_0_Object[]: objectArray0
      //Assert: assertEquals(500215, method_result.getCode());
      
      CodeMsg codeMsg0 = CodeMsg.PASSWORD_ERROR;
      Object[] objectArray0 = new Object[0];
      
      //Call method: fillArgs
      CodeMsg codeMsg1 = codeMsg0.fillArgs(objectArray0);
      
      //Test Result Assert
      assertEquals(500215, codeMsg1.getCode());
  }

  @Test(timeout = 4000)
  public void test_getCode_1()  throws Throwable  {
      //caseID:e44eeb146a73e2cd57485fd7d458c05c
      //CoveredLines: [40]
      //Assert: assertEquals(500210, method_result);
      
      CodeMsg codeMsg0 = CodeMsg.SESSION_ERROR;
      
      //Call method: getCode
      int int0 = codeMsg0.getCode();
      
      //Test Result Assert
      assertEquals(500210, int0);
  }

  @Test(timeout = 4000)
  public void test_getMsg_2()  throws Throwable  {
      //caseID:29b5757c1a8025d5de579937a271c737
      //CoveredLines: [48]
      //Assert: assertEquals("\u4E3B\u952E\u51B2\u7A81", method_result);
      
      CodeMsg codeMsg0 = CodeMsg.PRIMARY_ERROR;
      
      //Call method: getMsg
      String string0 = codeMsg0.getMsg();
      
      //Test Result Assert
      assertEquals("\u4E3B\u952E\u51B2\u7A81", string0);
  }

  @Test(timeout = 4000)
  public void test_setCode_3()  throws Throwable  {
      //caseID:21b4fb9f3ace01d6526346fc242e2c86
      //CoveredLines: [44, 45]
      //Input_0_int: 0
      
      CodeMsg codeMsg0 = CodeMsg.REPEATE_SECKILL;
      
      //Call method: setCode
      codeMsg0.setCode(0);
      
      //Test Result Assert
      assertEquals(0, codeMsg0.getCode());
  }

  @Test(timeout = 4000)
  public void test_setMsg_4()  throws Throwable  {
      //caseID:fe3bc36895b8bf72980d8275e96af252
      //CoveredLines: [52, 53]
      //Input_0_String: ""
      
      CodeMsg codeMsg0 = CodeMsg.PASSWORD_EMPTY;
      
      //Call method: setMsg
      codeMsg0.setMsg("");
      
      //Test Result Assert
      assertEquals(500211, codeMsg0.getCode());
  }

  @Test(timeout = 4000)
  public void test_toString_5()  throws Throwable  {
      //caseID:c3a87459329ef29160da81f1189619ab
      //CoveredLines: [68]
      //Assert: assertEquals("CodeMsg [code=500104, msg=\u8BBF\u95EE\u9AD8\u5CF0\u671F\uFF0C\u8BF7\u7A0D\u7B49\uFF01]", method_result);
      
      CodeMsg codeMsg0 = CodeMsg.ACCESS_LIMIT_REACHED;
      
      //Call method: toString
      String string0 = codeMsg0.toString();
      
      //Test Result Assert
      assertEquals("CodeMsg [code=500104, msg=\u8BBF\u95EE\u9AD8\u5CF0\u671F\uFF0C\u8BF7\u7A0D\u7B49\uFF01]", string0);
  }
}
