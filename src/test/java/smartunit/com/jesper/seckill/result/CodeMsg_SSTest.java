/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.jesper.seckill.result;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import com.jesper.seckill.result.CodeMsg;
import org.junit.runner.RunWith;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class CodeMsg_SSTest extends CodeMsg_SSTest_scaffolding {

  @Test(timeout = 4000)
  public void test_getMsg_0()  throws Throwable  {
      //caseID:676679c981059092e99768de9dd5bc6e
      CodeMsg codeMsg0 = CodeMsg.PASSWORD_ERROR;
      String string0 = codeMsg0.getMsg();
      assertEquals("\u5BC6\u7801\u9519\u8BEF", string0);
  }
  @Test(timeout = 4000)
  public void test_toString_1()  throws Throwable  {
      //caseID:59df03e1e666b511167c6aeda0276e43
      CodeMsg codeMsg0 = CodeMsg.PRIMARY_ERROR;
      String string0 = codeMsg0.toString();
      assertEquals("CodeMsg [code=500216, msg=\u4E3B\u952E\u51B2\u7A81]", string0);
  }
  @Test(timeout = 4000)
  public void test_getCode_2()  throws Throwable  {
      //caseID:4b2b50a06ba9c98c904f4c4334ffe991
      CodeMsg codeMsg0 = CodeMsg.ACCESS_LIMIT_REACHED;
      int int0 = codeMsg0.getCode();
      assertEquals(500104, int0);
  }
  @Test(timeout = 4000)
  public void test_setCode_3()  throws Throwable  {
      //caseID:c86fbf2e9bd8c15b489f74a79947add7
      CodeMsg codeMsg0 = CodeMsg.MOBILE_NOT_EXIST;

      //invoke method for codeMsg0
      codeMsg0.setCode(500104);

      //invoke method for codeMsg0
      assertEquals(500104, codeMsg0.getCode());
  }
  @Test(timeout = 4000)
  public void test_setMsg_4()  throws Throwable  {
      //caseID:54ebc38fe3c6190c51a378001b2633e6
      CodeMsg codeMsg0 = CodeMsg.MOBILE_EMPTY;

      //invoke method for codeMsg0
      codeMsg0.setMsg("500501");

      //invoke method for codeMsg0
      assertEquals("500501", codeMsg0.getMsg());
  }
  @Test(timeout = 4000)
  public void test_fillArgs_5()  throws Throwable  {
      //caseID:11d6a52e08be9b881f7594c2cd208771
      CodeMsg codeMsg0 = CodeMsg.PASSWORD_EMPTY;
      Object[] objectArray0 = new Object[0];
      CodeMsg codeMsg1 = codeMsg0.fillArgs(objectArray0);

      //invoke method for codeMsg1
      assertEquals(500211, codeMsg1.getCode());
  }}
