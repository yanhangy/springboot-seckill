/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.jesper.seckill.result;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import com.jesper.seckill.result.CodeMsg;
import org.junit.runner.RunWith;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class CodeMsg_SSTest extends CodeMsg_SSTest_scaffolding {

  @Test(timeout = 4000)
  public void test_toString_0()  throws Throwable  {
      //caseID:2ac578e037b877f7cfdabad1c605d5c5
      CodeMsg codeMsg0 = CodeMsg.MOBILE_ERROR;
      String string0 = codeMsg0.toString();
      assertEquals("CodeMsg [code=500213, msg=\u624B\u673A\u53F7\u683C\u5F0F\u9519\u8BEF]", string0);
  }
  @Test(timeout = 4000)
  public void test_getCode_1()  throws Throwable  {
      //caseID:dfecefd82d6194444dcf3033281f76f7
      CodeMsg codeMsg0 = CodeMsg.PRIMARY_ERROR;
      int int0 = codeMsg0.getCode();
      assertEquals(500216, int0);
  }
  @Test(timeout = 4000)
  public void test_getMsg_2()  throws Throwable  {
      //caseID:eb4c5995760c6e54d04668bec119d5b2
      CodeMsg codeMsg0 = CodeMsg.MOBILE_NOT_EXIST;
      String string0 = codeMsg0.getMsg();
      assertEquals("\u624B\u673A\u53F7\u4E0D\u5B58\u5728", string0);
  }
  @Test(timeout = 4000)
  public void test_setCode_3()  throws Throwable  {
      //caseID:919f6a5a9996abdcb3ecab43b8c69707
      CodeMsg codeMsg0 = CodeMsg.ACCESS_LIMIT_REACHED;

      //invoke method for codeMsg0
      codeMsg0.setCode(0);

      //invoke method for codeMsg0
      assertEquals(0, codeMsg0.getCode());
  }
  @Test(timeout = 4000)
  public void test_setMsg_4()  throws Throwable  {
      //caseID:7ec553c00bf8c96e38cf22018fc384ef
      CodeMsg codeMsg0 = CodeMsg.REPEATE_SECKILL;

      //invoke method for codeMsg0
      codeMsg0.setMsg(",k");

      //invoke method for codeMsg0
      assertEquals(500501, codeMsg0.getCode());
  }
  @Test(timeout = 4000)
  public void test_fillArgs_5()  throws Throwable  {
      //caseID:11492a843809c19959d420908e55168d
      CodeMsg codeMsg0 = CodeMsg.ACCESS_LIMIT_REACHED;
      Object[] objectArray0 = new Object[0];
      CodeMsg codeMsg1 = codeMsg0.fillArgs(objectArray0);

      //invoke method for codeMsg1
      assertEquals(500104, codeMsg1.getCode());
  }}
