/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.jesper.seckill.result;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import com.jesper.seckill.result.CodeMsg;
import org.junit.runner.RunWith;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class CodeMsg_SSTest extends CodeMsg_SSTest_scaffolding {

  @Test(timeout = 4000)
  public void test_toString_0()  throws Throwable  {
      //caseID:c1b6d3f03789ea2302beb44048861586
      CodeMsg codeMsg0 = CodeMsg.ACCESS_LIMIT_REACHED;
      String string0 = codeMsg0.toString();
      assertEquals("CodeMsg [code=500104, msg=\u8BBF\u95EE\u9AD8\u5CF0\u671F\uFF0C\u8BF7\u7A0D\u7B49\uFF01]", string0);
  }
  @Test(timeout = 4000)
  public void test_getMsg_1()  throws Throwable  {
      //caseID:aecad871f22eab73e17d98584353b306
      CodeMsg codeMsg0 = CodeMsg.SESSION_ERROR;
      String string0 = codeMsg0.getMsg();
      assertEquals("Session\u4E0D\u5B58\u5728\u6216\u8005\u5DF2\u7ECF\u5931\u6548", string0);
  }
  @Test(timeout = 4000)
  public void test_setCode_2()  throws Throwable  {
      //caseID:074c49c02275e7971e983d8af04d1502
      CodeMsg codeMsg0 = CodeMsg.REPEATE_SECKILL;

      //invoke method for codeMsg0
      codeMsg0.setCode((-1));

      //invoke method for codeMsg0
      assertEquals((-1), codeMsg0.getCode());
  }
  @Test(timeout = 4000)
  public void test_setMsg_3()  throws Throwable  {
      //caseID:9d44e538877c63d5733d37acebad42ff
      CodeMsg codeMsg0 = CodeMsg.BIND_ERROR;

      //invoke method for codeMsg0
      codeMsg0.setMsg("L");

      //invoke method for codeMsg0
      assertEquals(500101, codeMsg0.getCode());
  }
  @Test(timeout = 4000)
  public void test_getCode_4()  throws Throwable  {
      //caseID:26a8b22ccd6943b0e2b9c5ff802e4720
      CodeMsg codeMsg0 = CodeMsg.PRIMARY_ERROR;
      Object[] objectArray0 = new Object[8];
      CodeMsg codeMsg1 = codeMsg0.fillArgs(objectArray0);
      int int0 = codeMsg1.getCode();
      assertEquals(500216, int0);
  }}
