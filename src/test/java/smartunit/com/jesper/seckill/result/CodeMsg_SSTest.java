/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.jesper.seckill.result;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import com.jesper.seckill.result.CodeMsg;
import org.junit.runner.RunWith;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class CodeMsg_SSTest extends CodeMsg_SSTest_scaffolding {

  @Test(timeout = 4000)
  public void test_toString_0()  throws Throwable  {
      //caseID:fb3df1af956f0215516fc63e41d4a40e
      CodeMsg codeMsg0 = CodeMsg.ORDER_NOT_EXIST;
      String string0 = codeMsg0.toString();
      assertEquals("CodeMsg [code=500400, msg=\u8BA2\u5355\u4E0D\u5B58\u5728]", string0);
  }
  @Test(timeout = 4000)
  public void test_getCode_1()  throws Throwable  {
      //caseID:371469a0ca956aff175d92704fe8cecf
      CodeMsg codeMsg0 = CodeMsg.BIND_ERROR;
      int int0 = codeMsg0.getCode();
      assertEquals(500101, int0);
  }
  @Test(timeout = 4000)
  public void test_getMsg_2()  throws Throwable  {
      //caseID:4744b19da137b2868b1451adfb4da8c8
      CodeMsg codeMsg0 = CodeMsg.REPEATE_SECKILL;
      String string0 = codeMsg0.getMsg();
      assertEquals("\u4E0D\u80FD\u91CD\u590D\u79D2\u6740", string0);
  }
  @Test(timeout = 4000)
  public void test_setCode_3()  throws Throwable  {
      //caseID:3c9b0b82bbea632af33541806b94eb7b
      CodeMsg codeMsg0 = CodeMsg.PASSWORD_EMPTY;

      //invoke method for codeMsg0
      codeMsg0.setCode(500400);

      //invoke method for codeMsg0
      assertEquals(500400, codeMsg0.getCode());
  }
  @Test(timeout = 4000)
  public void test_setMsg_4()  throws Throwable  {
      //caseID:18dd93e93d9efdc95b49ee86ffb270d8
      CodeMsg codeMsg0 = CodeMsg.PASSWORD_EMPTY;

      //invoke method for codeMsg0
      codeMsg0.setMsg("\u624B\u673A\u53F7\u4E0D\u5B58\u5728");

      //invoke method for codeMsg0
      assertEquals(500211, codeMsg0.getCode());
  }
  @Test(timeout = 4000)
  public void test_fillArgs_5()  throws Throwable  {
      //caseID:6864c9e5d2ae33a6b7a944cb380eb63c
      CodeMsg codeMsg0 = CodeMsg.PRIMARY_ERROR;
      Object[] objectArray0 = new Object[0];
      CodeMsg codeMsg1 = codeMsg0.fillArgs(objectArray0);

      //invoke method for codeMsg1
      assertEquals(500216, codeMsg1.getCode());
  }}
