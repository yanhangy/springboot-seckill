/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.jesper.seckill.result;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import com.jesper.seckill.result.CodeMsg;
import org.junit.runner.RunWith;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class CodeMsg_SSTest extends CodeMsg_SSTest_scaffolding {
// allCoveredLines:[34, 35, 36, 37, 40, 44, 45, 48, 52, 53, 61, 62, 63, 68]

  @Test(timeout = 4000)
  public void test_fillArgs_0()  throws Throwable  {
      //caseID:0e1bbaf9b5cf7be971019372cd0f7157
      //CoveredLines: [34, 35, 36, 37, 61, 62, 63]
      //Input_0_Object[]: objectArray0
      //Assert: assertEquals(500215, method_result.getCode());
      
      CodeMsg codeMsg0 = CodeMsg.PASSWORD_ERROR;
      Object[] objectArray0 = new Object[0];
      
      //Call method: fillArgs
      CodeMsg codeMsg1 = codeMsg0.fillArgs(objectArray0);
      
      //Test Result Assert
      assertEquals(500215, codeMsg1.getCode());
  }

  @Test(timeout = 4000)
  public void test_getCode_1()  throws Throwable  {
      //caseID:7c16ec54a095bda1706a33095a3fd6ad
      //CoveredLines: [40]
      //Assert: assertEquals(500500, method_result);
      
      CodeMsg codeMsg0 = CodeMsg.SECKILL_OVER;
      
      //Call method: getCode
      int int0 = codeMsg0.getCode();
      
      //Test Result Assert
      assertEquals(500500, int0);
  }

  @Test(timeout = 4000)
  public void test_getMsg_2()  throws Throwable  {
      //caseID:3738123059c6322bec11e82d67d76dbb
      //CoveredLines: [48]
      //Assert: assertEquals("\u624B\u673A\u53F7\u4E0D\u5B58\u5728", method_result);
      
      CodeMsg codeMsg0 = CodeMsg.MOBILE_NOT_EXIST;
      
      //Call method: getMsg
      String string0 = codeMsg0.getMsg();
      
      //Test Result Assert
      assertEquals("\u624B\u673A\u53F7\u4E0D\u5B58\u5728", string0);
  }

  @Test(timeout = 4000)
  public void test_setCode_3()  throws Throwable  {
      //caseID:78f631887fc67a01fbcac621a7fb1be3
      //CoveredLines: [44, 45]
      //Input_0_int: 500400
      
      CodeMsg codeMsg0 = CodeMsg.MOBILE_ERROR;
      
      //Call method: setCode
      codeMsg0.setCode(500400);
      
      //Test Result Assert
      assertEquals(500400, codeMsg0.getCode());
  }

  @Test(timeout = 4000)
  public void test_setMsg_4()  throws Throwable  {
      //caseID:18f9d41bad2747fd65a7e63fb6d96583
      //CoveredLines: [52, 53]
      //Input_0_String: "CodeMsg [code="
      
      CodeMsg codeMsg0 = CodeMsg.MOBILE_EMPTY;
      
      //Call method: setMsg
      codeMsg0.setMsg("CodeMsg [code=");
      
      //Test Result Assert
      assertEquals("CodeMsg [code=", codeMsg0.getMsg());
  }

  @Test(timeout = 4000)
  public void test_toString_5()  throws Throwable  {
      //caseID:ccdde3bbc3981136c87653717ad21dcf
      //CoveredLines: [68]
      //Assert: assertEquals("CodeMsg [code=500210, msg=Session\u4E0D\u5B58\u5728\u6216\u8005\u5DF2\u7ECF\u5931\u6548]", method_result);
      
      CodeMsg codeMsg0 = CodeMsg.SESSION_ERROR;
      
      //Call method: toString
      String string0 = codeMsg0.toString();
      
      //Test Result Assert
      assertEquals("CodeMsg [code=500210, msg=Session\u4E0D\u5B58\u5728\u6216\u8005\u5DF2\u7ECF\u5931\u6548]", string0);
  }
}
