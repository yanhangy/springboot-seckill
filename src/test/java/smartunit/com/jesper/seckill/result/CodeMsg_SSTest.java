/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.jesper.seckill.result;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import com.jesper.seckill.result.CodeMsg;
import org.junit.runner.RunWith;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class CodeMsg_SSTest extends CodeMsg_SSTest_scaffolding {

  @Test(timeout = 4000)
  public void test_toString_0()  throws Throwable  {
      //caseID:36f9d522d1fbd292b832520c8f4035a5
      CodeMsg codeMsg0 = CodeMsg.REPEATE_SECKILL;
      String string0 = codeMsg0.toString();
      assertEquals("CodeMsg [code=500501, msg=\u4E0D\u80FD\u91CD\u590D\u79D2\u6740]", string0);
  }
  @Test(timeout = 4000)
  public void test_getCode_1()  throws Throwable  {
      //caseID:189a10341d291566f25437e979fd7f4f
      CodeMsg codeMsg0 = CodeMsg.SERVER_ERROR;
      int int0 = codeMsg0.getCode();
      assertEquals(500100, int0);
  }
  @Test(timeout = 4000)
  public void test_getMsg_2()  throws Throwable  {
      //caseID:a32591abd9438eca0935ea907d4ac975
      CodeMsg codeMsg0 = CodeMsg.SERVER_ERROR;
      String string0 = codeMsg0.getMsg();
      assertEquals("\u670D\u52A1\u7AEF\u5F02\u5E38", string0);
  }
  @Test(timeout = 4000)
  public void test_setMsg_3()  throws Throwable  {
      //caseID:3ef288f81cd1c299800beb3441aaeac2
      CodeMsg codeMsg0 = CodeMsg.MOBILE_EMPTY;

      //invoke method for codeMsg0
      codeMsg0.setMsg("500216");

      //invoke method for codeMsg0
      assertEquals("500216", codeMsg0.getMsg());
  }
  @Test(timeout = 4000)
  public void test_setCode_4()  throws Throwable  {
      //caseID:270c5cb66ab6e108a767060f1a822cc8
      CodeMsg codeMsg0 = CodeMsg.ACCESS_LIMIT_REACHED;

      //invoke method for codeMsg0
      codeMsg0.setCode(0);

      //invoke method for codeMsg0
      assertEquals(0, codeMsg0.getCode());
  }
  @Test(timeout = 4000)
  public void test_fillArgs_5()  throws Throwable  {
      //caseID:28cb199c3888421a7e5b0a4e114a4797
      CodeMsg codeMsg0 = CodeMsg.SUCCESS;
      Object[] objectArray0 = new Object[0];
      CodeMsg codeMsg1 = codeMsg0.fillArgs(objectArray0);

      //invoke method for codeMsg1
      assertEquals(0, codeMsg1.getCode());
  }}
