/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.jesper.seckill.result;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import com.jesper.seckill.result.CodeMsg;
import org.junit.runner.RunWith;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class CodeMsg_SSTest extends CodeMsg_SSTest_scaffolding {

  @Test(timeout = 4000)
  public void test_getMsg_0()  throws Throwable  {
      //caseID:e5ecfbc2d6e1418ecdef5a344f1ba823
      CodeMsg codeMsg0 = CodeMsg.SESSION_ERROR;
      String string0 = codeMsg0.getMsg();
      assertEquals("Session\u4E0D\u5B58\u5728\u6216\u8005\u5DF2\u7ECF\u5931\u6548", string0);
  }
  @Test(timeout = 4000)
  public void test_getCode_1()  throws Throwable  {
      //caseID:66fc9608357342dbb9682126a23be0ac
      CodeMsg codeMsg0 = CodeMsg.ACCESS_LIMIT_REACHED;
      int int0 = codeMsg0.getCode();
      assertEquals(500104, int0);
  }
  @Test(timeout = 4000)
  public void test_toString_2()  throws Throwable  {
      //caseID:195ba96d36c711f75c5567267a9cac68
      CodeMsg codeMsg0 = CodeMsg.SECKILL_OVER;
      String string0 = codeMsg0.toString();
      assertEquals("CodeMsg [code=500500, msg=\u5546\u54C1\u5DF2\u7ECF\u79D2\u6740\u5B8C\u6BD5]", string0);
  }
  @Test(timeout = 4000)
  public void test_setCode_3()  throws Throwable  {
      //caseID:4b767e5c94c0c052e8852ce9675aa48b
      CodeMsg codeMsg0 = CodeMsg.MOBILE_ERROR;

      //invoke method for codeMsg0
      codeMsg0.setCode(500500);

      //invoke method for codeMsg0
      assertEquals(500500, codeMsg0.getCode());
  }
  @Test(timeout = 4000)
  public void test_setMsg_4()  throws Throwable  {
      //caseID:95ca8a3ae08ddf53d83c7add18d2335d
      CodeMsg codeMsg0 = CodeMsg.BIND_ERROR;

      //invoke method for codeMsg0
      codeMsg0.setMsg("1");

      //invoke method for codeMsg0
      assertEquals(500101, codeMsg0.getCode());
  }
  @Test(timeout = 4000)
  public void test_fillArgs_5()  throws Throwable  {
      //caseID:cc01310ea209f36332f4bf8b9bc1cf54
      CodeMsg codeMsg0 = CodeMsg.SUCCESS;
      Object[] objectArray0 = new Object[0];
      CodeMsg codeMsg1 = codeMsg0.fillArgs(objectArray0);

      //invoke method for codeMsg1
      assertEquals(0, codeMsg1.getCode());
  }}
