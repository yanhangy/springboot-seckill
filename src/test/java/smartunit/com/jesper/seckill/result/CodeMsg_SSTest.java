/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.jesper.seckill.result;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import com.jesper.seckill.result.CodeMsg;
import org.junit.runner.RunWith;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class CodeMsg_SSTest extends CodeMsg_SSTest_scaffolding {

  @Test(timeout = 4000)
  public void test_getCode_0()  throws Throwable  {
      //caseID:e418c58538df38bc418479e370d4f5c4
      CodeMsg codeMsg0 = CodeMsg.REPEATE_SECKILL;
      int int0 = codeMsg0.getCode();
      assertEquals(500501, int0);
  }
  @Test(timeout = 4000)
  public void test_getMsg_1()  throws Throwable  {
      //caseID:992d6292cb40db8bd6a2a5dcee21a470
      CodeMsg codeMsg0 = CodeMsg.ACCESS_LIMIT_REACHED;
      String string0 = codeMsg0.getMsg();
      assertEquals("\u8BBF\u95EE\u9AD8\u5CF0\u671F\uFF0C\u8BF7\u7A0D\u7B49\uFF01", string0);
  }
  @Test(timeout = 4000)
  public void test_toString_2()  throws Throwable  {
      //caseID:6299bda7bba0b1b4faefb8a501382e8a
      CodeMsg codeMsg0 = CodeMsg.PRIMARY_ERROR;
      String string0 = codeMsg0.toString();
      assertEquals("CodeMsg [code=500216, msg=\u4E3B\u952E\u51B2\u7A81]", string0);
  }
  @Test(timeout = 4000)
  public void test_setCode_3()  throws Throwable  {
      //caseID:da80551c16a502fcda548c409b8005b2
      CodeMsg codeMsg0 = CodeMsg.PRIMARY_ERROR;

      //invoke method for codeMsg0
      codeMsg0.setCode(500100);

      //invoke method for codeMsg0
      assertEquals(500100, codeMsg0.getCode());
  }
  @Test(timeout = 4000)
  public void test_setMsg_4()  throws Throwable  {
      //caseID:515c67aff88e5da0ee7df6b0dcdeff60
      CodeMsg codeMsg0 = CodeMsg.SERVER_ERROR;

      //invoke method for codeMsg0
      codeMsg0.setMsg("1.0");

      //invoke method for codeMsg0
      assertEquals(500100, codeMsg0.getCode());
  }
  @Test(timeout = 4000)
  public void test_fillArgs_5()  throws Throwable  {
      //caseID:7dfb4de19830e2e8254d92900134684f
      CodeMsg codeMsg0 = CodeMsg.BIND_ERROR;

      //invoke method for codeMsg0
      PrivateAccess.setVariable((Class<?>) CodeMsg.class, codeMsg0, "msg", (Object) "\u624B\u673A\u53F7\u4E0D\u80FD\u4E3A\u7A7A");
      Object[] objectArray0 = new Object[0];
      CodeMsg codeMsg1 = codeMsg0.fillArgs(objectArray0);

      //invoke method for codeMsg1
      assertEquals(500101, codeMsg1.getCode());
  }}
