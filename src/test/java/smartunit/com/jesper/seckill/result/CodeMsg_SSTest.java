/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.jesper.seckill.result;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import com.jesper.seckill.result.CodeMsg;
import org.junit.runner.RunWith;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class CodeMsg_SSTest extends CodeMsg_SSTest_scaffolding {
// allCoveredLines:[34, 35, 36, 37, 40, 44, 45, 48, 52, 53, 61, 62, 63, 68]

  @Test(timeout = 4000)
  public void test_getCode_0()  throws Throwable  {
      //caseID:ec3a0eab22adaf0a65ce0791bf829088
      //CoveredLines: [40]
      //Assert: assertEquals(500210, method_result);
      
      CodeMsg codeMsg0 = CodeMsg.SESSION_ERROR;
      
      //Call method: getCode
      int int0 = codeMsg0.getCode();
      
      //Test Result Assert
      assertEquals(500210, int0);
  }

  @Test(timeout = 4000)
  public void test_getMsg_1()  throws Throwable  {
      //caseID:575a93d5c6a954ced90c3bd3f04ccf2d
      //CoveredLines: [34, 35, 36, 37, 48, 61, 62, 63]
      //Assert: assertEquals("\u5546\u54C1\u5DF2\u7ECF\u79D2\u6740\u5B8C\u6BD5", method_result);
      
      CodeMsg codeMsg0 = CodeMsg.SECKILL_OVER;
      Object[] objectArray0 = new Object[1];
      CodeMsg codeMsg1 = codeMsg0.fillArgs(objectArray0);
      
      //Test Result Assert
      assertEquals(500500, codeMsg1.getCode());
      
      
      //Call method: getMsg
      String string0 = codeMsg0.getMsg();
      
      //Test Result Assert
      assertEquals("\u5546\u54C1\u5DF2\u7ECF\u79D2\u6740\u5B8C\u6BD5", string0);
  }

  @Test(timeout = 4000)
  public void test_setCode_2()  throws Throwable  {
      //caseID:f55caa22ce21e5e3444591d4dd58c32d
      //CoveredLines: [44, 45]
      //Input_0_int: 
      
      CodeMsg codeMsg0 = CodeMsg.SERVER_ERROR;
      
      //Call method: setCode
      codeMsg0.setCode((-601));
      
      //Test Result Assert
      assertEquals((-601), codeMsg0.getCode());
  }

  @Test(timeout = 4000)
  public void test_setMsg_3()  throws Throwable  {
      //caseID:018064a6c7801d1c90084002bcbdce8a
      //CoveredLines: [52, 53]
      //Input_0_String: "com.jesper.seckill.result.CodeMsg"
      
      CodeMsg codeMsg0 = CodeMsg.SECKILL_OVER;
      
      //Call method: setMsg
      codeMsg0.setMsg("com.jesper.seckill.result.CodeMsg");
      
      //Test Result Assert
      assertEquals("com.jesper.seckill.result.CodeMsg", codeMsg0.getMsg());
  }

  @Test(timeout = 4000)
  public void test_toString_4()  throws Throwable  {
      //caseID:867f8fd7d6408870bc462de397b0a442
      //CoveredLines: [68]
      //Assert: assertEquals("CodeMsg [code=500500, msg=\u5546\u54C1\u5DF2\u7ECF\u79D2\u6740\u5B8C\u6BD5]", method_result);
      
      CodeMsg codeMsg0 = CodeMsg.SECKILL_OVER;
      
      //Call method: toString
      String string0 = codeMsg0.toString();
      
      //Test Result Assert
      assertEquals("CodeMsg [code=500500, msg=\u5546\u54C1\u5DF2\u7ECF\u79D2\u6740\u5B8C\u6BD5]", string0);
  }
}
