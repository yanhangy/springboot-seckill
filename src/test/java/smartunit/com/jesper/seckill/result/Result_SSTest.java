/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.jesper.seckill.result;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.jesper.seckill.result.CodeMsg;
import com.jesper.seckill.result.Result;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Result_SSTest extends Result_SSTest_scaffolding {
// allCoveredLines:[13, 20, 23, 24, 25, 32, 33, 34, 35, 37, 41, 44, 45, 47, 50, 51, 53, 56, 57]

  @Test(timeout = 4000)
  public void test_getCode_0()  throws Throwable  {
      //caseID:4afa5452646c4b7536e9cd9638d12a87
      //CoveredLines: [20, 32, 33, 34, 35, 37, 41]
      //Assert: assertEquals(0, method_result);
      
      //mock codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Result<Object> result0 = Result.error(codeMsg0);
      
      //Call method: getCode
      int int0 = result0.getCode();
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_getData_1()  throws Throwable  {
      //caseID:0c65bcc0b22df543dab59ceb3777852f
      //CoveredLines: [13, 23, 24, 25, 53]
      //Assert: assertSame(object0, method_result);
      
      Object object0 = new Object();
      Result<Object> result0 = Result.success(object0);
      
      //Call method: getData
      Object object1 = result0.getData();
      
      //Test Result Assert
      assertSame(object0, object1);
  }

  @Test(timeout = 4000)
  public void test_getMsg_2()  throws Throwable  {
      //caseID:e0e2eb59bd257832f2ef5e431f4bc582
      //CoveredLines: [20, 32, 33, 34, 35, 37, 47]
      //Assert: assertNotNull(method_result);
      //Assert: assertEquals("1.0", result0.getMsg());
      
      //mock codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1).when(codeMsg0).getCode();
      doReturn("1.0").when(codeMsg0).getMsg();
      Result<Integer> result0 = Result.error(codeMsg0);
      
      //Call method: getMsg
      String string0 = result0.getMsg();
      
      //Test Result Assert
      assertNotNull(string0);
      
      //Test Result Assert
      assertEquals("1.0", result0.getMsg());
  }

  @Test(timeout = 4000)
  public void test_setCode_3()  throws Throwable  {
      //caseID:90700c6dabfa1bbb3f91473382cd2a56
      //CoveredLines: [13, 23, 24, 25, 44, 45]
      //Input_0_int: 2702
      
      Result<String> result0 = Result.success("jQ.0");
      
      //Call method: setCode
      result0.setCode(2702);
      
      //Test Result Assert
      assertEquals(2702, result0.getCode());
  }

  @Test(timeout = 4000)
  public void test_setData_4()  throws Throwable  {
      //caseID:3a875a12b44df1274e51e2d64e56ff69
      //CoveredLines: [20, 32, 33, 37, 56, 57]
      //Input_0_Object: ""
      
      Result<Object> result0 = Result.error((CodeMsg) null);
      
      //Call method: setData
      result0.setData("");
      
      //Test Result Assert
      assertNull(result0.getMsg());
  }

  @Test(timeout = 4000)
  public void test_setData_5()  throws Throwable  {
      //caseID:ef1cb9d58c07ff6fe1b980b6cb0894e6
      //CoveredLines: [20, 32, 33, 34, 35, 37, 56, 57]
      //Input_0_String: "1.0"
      
      //mock codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Result<String> result0 = Result.error(codeMsg0);
      
      //Call method: setData
      result0.setData("1.0");
      
      //Test Result Assert
      assertEquals(0, result0.getCode());
  }

  @Test(timeout = 4000)
  public void test_setMsg_6()  throws Throwable  {
      //caseID:32fc65c0479a0d5a9998c3b0f8106924
      //CoveredLines: [20, 32, 33, 34, 35, 37, 50, 51]
      //Input_0_String: ""
      
      //mock codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Result<Integer> result0 = Result.error(codeMsg0);
      
      //Call method: setMsg
      result0.setMsg("");
      
      //Test Result Assert
      assertEquals("", result0.getMsg());
  }
}
