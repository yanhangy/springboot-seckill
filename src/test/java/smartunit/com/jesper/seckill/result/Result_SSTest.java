/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.jesper.seckill.result;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.jesper.seckill.result.CodeMsg;
import com.jesper.seckill.result.Result;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Result_SSTest extends Result_SSTest_scaffolding {
// allCoveredLines:[13, 20, 23, 24, 25, 32, 33, 34, 35, 37, 41, 44, 45, 47, 50, 51, 53, 56, 57]

  @Test(timeout = 4000)
  public void test_getCode_0()  throws Throwable  {
      //caseID:b1f8dd437ffad366a496b9597a01b613
      //CoveredLines: [20, 32, 33, 34, 35, 37, 41]
      //Assert: assertEquals(0, method_result);
      
      //mock codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Result<Object> result0 = Result.error(codeMsg0);
      
      //Call method: getCode
      int int0 = result0.getCode();
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_getData_1()  throws Throwable  {
      //caseID:d91f9df46bf6f9c4a90216f6a2f581a1
      //CoveredLines: [20, 32, 33, 37, 53]
      //Assert: assertNull(method_result);
      
      Result<Object> result0 = Result.error((CodeMsg) null);
      
      //Call method: getData
      Object object0 = result0.getData();
      
      //Test Result Assert
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test_getData_2()  throws Throwable  {
      //caseID:c9d076b29450dd9d25a271dd6ff2c19f
      //CoveredLines: [20, 32, 33, 34, 35, 37, 53]
      //Assert: assertNull(method_result);
      
      //mock codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Result<Object> result0 = Result.error(codeMsg0);
      
      //Call method: getData
      Object object0 = result0.getData();
      
      //Test Result Assert
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test_getMsg_3()  throws Throwable  {
      //caseID:32236bc653df6d7cdcd9877515fa04d1
      //CoveredLines: [20, 32, 33, 34, 35, 37, 47]
      //Assert: assertNull(method_result);
      
      //mock codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Result<String> result0 = Result.error(codeMsg0);
      
      //Call method: getMsg
      String string0 = result0.getMsg();
      
      //Test Result Assert
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test_setCode_4()  throws Throwable  {
      //caseID:0f9edc89146bf6ceffbc8c8e6868a2c0
      //CoveredLines: [20, 32, 33, 34, 35, 37, 44, 45]
      //Input_0_int: 0
      
      //mock codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Result<String> result0 = Result.error(codeMsg0);
      
      //Call method: setCode
      result0.setCode(0);
      
      //Test Result Assert
      assertEquals(0, result0.getCode());
  }

  @Test(timeout = 4000)
  public void test_setData_5()  throws Throwable  {
      //caseID:0d7fac2cecab59d70231b07aa02aaf5d
      //CoveredLines: [13, 23, 24, 25, 56, 57]
      //Input_0_String: "500213"
      
      Result<String> result0 = Result.success("500213");
      
      //Call method: setData
      result0.setData("500213");
      
      //Test Result Assert
      assertNull(result0.getMsg());
  }

  @Test(timeout = 4000)
  public void test_setMsg_6()  throws Throwable  {
      //caseID:680188605af795b2ded4eab0c0fc27de
      //CoveredLines: [13, 23, 24, 25, 50, 51]
      //Input_0_String: ""
      
      Object object0 = new Object();
      Result<Object> result0 = Result.success(object0);
      
      //Call method: setMsg
      result0.setMsg("");
      
      //Test Result Assert
      assertEquals(0, result0.getCode());
  }

  @Test(timeout = 4000)
  public void test_success_7()  throws Throwable  {
      //caseID:82ce767ea3a91d3014d7bf8c692537df
      //CoveredLines: [13, 20, 23, 24, 25, 32, 33, 34, 35, 37]
      //Input_0_Object: "1"
      //Assert: assertNull(method_result.getMsg());
      
      //mock codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((-1)).when(codeMsg0).getCode();
      doReturn("1").when(codeMsg0).getMsg();
      Result<Object> result0 = Result.error(codeMsg0);
      
      //Test Result Assert
      assertEquals((-1), result0.getCode());
      
      
      //Call method: success
      Result<Object> result1 = Result.success((Object) "1");
      
      //Test Result Assert
      assertNull(result1.getMsg());
  }
}
