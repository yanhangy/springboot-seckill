/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.jesper.seckill.result;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.jesper.seckill.result.CodeMsg;
import com.jesper.seckill.result.Result;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Result_SSTest extends Result_SSTest_scaffolding {

  @Test(timeout = 4000)
  public void test_getCode_0()  throws Throwable  {
      //caseID:5b0901a6cf8e56ae692cae23a8c9e394
      Result<String> result0 = Result.success("-e:`SqK");
      int int0 = result0.getCode();
      assertEquals(0, int0);
  }
  @Test(timeout = 4000)
  public void test_getMsg_1()  throws Throwable  {
      //caseID:dbe353885e7052c8a6deee5b94f7f9dc
      Result<String> result0 = Result.error((CodeMsg) null);

      //invoke method for result0
      result0.getData();
      Result.success((Object) null);
      String string0 = result0.getMsg();
      assertNull(string0);
  }
  @Test(timeout = 4000)
  public void test_getMsg_2()  throws Throwable  {
      //caseID:cf4150e2c86403614f79acfa9f9153f0

      //prepare data for codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(500213).when(codeMsg0).getCode();
      doReturn("").when(codeMsg0).getMsg();
      Result<String> result0 = Result.error(codeMsg0);

      //invoke method for result0
      result0.getData();
      Result.success((Object) null);
      String string0 = result0.getMsg();
      assertNotNull(string0);

      //invoke method for result0
      assertEquals(500213, result0.getCode());
  }
  @Test(timeout = 4000)
  public void test_setData_3()  throws Throwable  {
      //caseID:0015b9d62ddd05cbc31dc886bc34f35f

      //prepare data for codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1).when(codeMsg0).getCode();
      doReturn("T&a-B").when(codeMsg0).getMsg();
      Result<Object> result0 = Result.error(codeMsg0);

      //invoke method for result0
      result0.getData();

      //invoke method for result0
      assertEquals(1, result0.getCode());
      
      Result<Object> result1 = Result.success((Object) null);

      //invoke method for result1
      result1.setData((Object) null);

      //invoke method for result0

      //invoke method for result1
      assertNotSame(result1, result0);
  }
  @Test(timeout = 4000)
  public void test_setCode_4()  throws Throwable  {
      //caseID:a962574ff4d1798abe4c71740a98e7df

      //prepare data for codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(0).when(codeMsg0).getCode();
      doReturn("com.jesper.seckill.result.Result").when(codeMsg0).getMsg();
      Result<Object> result0 = Result.error(codeMsg0);

      //invoke method for result0
      result0.getData();
      Result.success((Object) null);

      //invoke method for result0
      result0.setCode(0);

      //invoke method for result0
      assertEquals(0, result0.getCode());
  }
  @Test(timeout = 4000)
  public void test_setMsg_5()  throws Throwable  {
      //caseID:584cdba4cd28b71be05580cb0f4abbfd

      //prepare data for codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((-1)).when(codeMsg0).getCode();
      doReturn("1.0").when(codeMsg0).getMsg();
      Result<Integer> result0 = Result.error(codeMsg0);

      //invoke method for result0
      result0.getData();
      Result.success((Object) null);

      //invoke method for result0
      result0.setMsg("]");

      //invoke method for result0
      assertEquals((-1), result0.getCode());
  }}
