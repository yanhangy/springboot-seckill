/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.jesper.seckill.result;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.jesper.seckill.result.CodeMsg;
import com.jesper.seckill.result.Result;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Result_SSTest extends Result_SSTest_scaffolding {
// allCoveredLines:[13, 20, 23, 24, 25, 32, 33, 34, 35, 37, 41, 44, 45, 47, 50, 51, 53, 56, 57]

  @Test(timeout = 4000)
  public void test_error_0()  throws Throwable  {
      //caseID:a845923cc7679b637ded94e6432772af
      //CoveredLines: [13, 20, 23, 24, 25, 32, 33, 34, 35, 37]
      //Input_0_CodeMsg: {}
      //Assert: assertEquals(0, method_result.getCode());
      
      Result.success((Object) "1");
      //mock codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: error
      Result<Object> result0 = Result.error(codeMsg0);
      
      //Test Result Assert
      assertEquals(0, result0.getCode());
  }

  @Test(timeout = 4000)
  public void test_getCode_1()  throws Throwable  {
      //caseID:e8d9658b7d69cf4c7f0f3b178c7f0106
      //CoveredLines: [20, 32, 33, 34, 35, 37, 41]
      //Assert: assertEquals(0, method_result);
      
      //mock codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Result<Integer> result0 = Result.error(codeMsg0);
      
      //Call method: getCode
      int int0 = result0.getCode();
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_getData_2()  throws Throwable  {
      //caseID:85a69261c8746224cb0900d213e8a22f
      //CoveredLines: [20, 32, 33, 37, 53]
      //Assert: assertNull(method_result);
      
      Result<Object> result0 = Result.error((CodeMsg) null);
      
      //Call method: getData
      Object object0 = result0.getData();
      
      //Test Result Assert
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test_getData_3()  throws Throwable  {
      //caseID:9e203e019b6545ff93d2e2cc81b0e5f9
      //CoveredLines: [20, 32, 33, 34, 35, 37, 53]
      //Assert: assertEquals(1, result0.getCode());
      
      //mock codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1).when(codeMsg0).getCode();
      doReturn("com.jesper.seckill.result.Result").when(codeMsg0).getMsg();
      Result<Object> result0 = Result.error(codeMsg0);
      
      //Call method: getData
      result0.getData();
      
      //Test Result Assert
      assertEquals(1, result0.getCode());
  }

  @Test(timeout = 4000)
  public void test_getMsg_4()  throws Throwable  {
      //caseID:cf6ec449fadcf88ce600bfe6388d94a9
      //CoveredLines: [13, 23, 24, 25, 47]
      //Assert: assertNull(method_result);
      
      Result<String> result0 = Result.success("1");
      
      //Call method: getMsg
      String string0 = result0.getMsg();
      
      //Test Result Assert
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test_setCode_5()  throws Throwable  {
      //caseID:a0bcf7d7950d177a4ff83ab96c572abd
      //CoveredLines: [20, 32, 33, 34, 35, 37, 44, 45]
      //Input_0_int: 500100
      
      //mock codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Result<Object> result0 = Result.error(codeMsg0);
      
      //Call method: setCode
      result0.setCode(500100);
      
      //Test Result Assert
      assertEquals(500100, result0.getCode());
  }

  @Test(timeout = 4000)
  public void test_setData_6()  throws Throwable  {
      //caseID:bbf8e6e4ab9431dfa327cb781638f8f4
      //CoveredLines: [20, 32, 33, 34, 35, 37, 56, 57]
      //Input_0_Object: "\u624B\u673A\u53F7\u4E0D\u80FD\u4E3A\u7A7A"
      
      //mock codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Result<Object> result0 = Result.error(codeMsg0);
      
      //Call method: setData
      result0.setData("\u624B\u673A\u53F7\u4E0D\u80FD\u4E3A\u7A7A");
      
      //Test Result Assert
      assertNull(result0.getMsg());
  }

  @Test(timeout = 4000)
  public void test_setMsg_7()  throws Throwable  {
      //caseID:9afaca68285a3943b76d2e2d052599f1
      //CoveredLines: [13, 23, 24, 25, 50, 51]
      //Input_0_String: "1.0"
      
      Result<String> result0 = Result.success("7");
      
      //Call method: setMsg
      result0.setMsg("1.0");
      
      //Test Result Assert
      assertEquals(0, result0.getCode());
  }
}
