/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.jesper.seckill.result;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.jesper.seckill.result.CodeMsg;
import com.jesper.seckill.result.Result;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Result_SSTest extends Result_SSTest_scaffolding {

  @Test(timeout = 4000)
  public void test_setCode_0()  throws Throwable  {
      //caseID:767da39ef7a7abe6d4e4ab39316b29a9
      Result<String> result0 = Result.success("1.0");

      //invoke method for result0
      result0.setCode(3065);

      //invoke method for result0
      assertEquals(3065, result0.getCode());
  }
  @Test(timeout = 4000)
  public void test_setData_1()  throws Throwable  {
      //caseID:2fce85309c52008c45f512635afa798e
      Result<String> result0 = Result.success("com.jesper.seckill.result.Result");

      //invoke method for result0
      result0.setData("com.jesper.seckill.result.Result");

      //invoke method for result0
      assertNull(result0.getMsg());
  }
  @Test(timeout = 4000)
  public void test_setMsg_2()  throws Throwable  {
      //caseID:6ba4056c88e607759c702a812acd82ae

      //prepare data for codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(0).when(codeMsg0).getCode();
      doReturn("1").when(codeMsg0).getMsg();
      Result<Object> result0 = Result.error(codeMsg0);

      //invoke method for result0
      result0.setMsg("1.0");

      //invoke method for result0
      assertEquals(0, result0.getCode());
  }
  @Test(timeout = 4000)
  public void test_getCode_3()  throws Throwable  {
      //caseID:c0e1ca529098e6d5477eb7152420b89a
      Result<String> result0 = Result.error((CodeMsg) null);

      //invoke method for result0
      result0.getData();
      Result<Object> result1 = Result.success((Object) null);
      int int0 = result1.getCode();
      assertEquals(0, int0);
  }
  @Test(timeout = 4000)
  public void test_getMsg_4()  throws Throwable  {
      //caseID:b3c7ec2106f47fd3759612d84e661948

      //prepare data for codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1673).when(codeMsg0).getCode();
      doReturn("L").when(codeMsg0).getMsg();
      Result<Object> result0 = Result.error(codeMsg0);

      //invoke method for result0
      result0.getData();
      Result.success((Object) null);
      String string0 = result0.getMsg();
      assertNotNull(string0);

      //invoke method for result0
      assertEquals(1673, result0.getCode());
  }}
