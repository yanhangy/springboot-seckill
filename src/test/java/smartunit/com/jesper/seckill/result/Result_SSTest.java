/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.jesper.seckill.result;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.jesper.seckill.result.CodeMsg;
import com.jesper.seckill.result.Result;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Result_SSTest extends Result_SSTest_scaffolding {

  @Test(timeout = 4000)
  public void test_setData_0()  throws Throwable  {
      //caseID:76e83704af15b0a02716454ab4bdb82b
      Integer integer0 = new Integer(1);
      Result<Object> result0 = Result.success((Object) integer0);
      Result<String> result1 = Result.error((CodeMsg) null);

      //invoke method for result1
      result1.getData();

      //invoke method for result0
      result0.setData((Object) null);

      //invoke method for result0
      assertEquals(0, result0.getCode());
  }
  @Test(timeout = 4000)
  public void test_getMsg_1()  throws Throwable  {
      //caseID:e611193a237dad6865b3120988daba66

      //prepare data for codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(0).when(codeMsg0).getCode();
      doReturn("").when(codeMsg0).getMsg();
      Result<String> result0 = Result.error(codeMsg0);
      Integer integer0 = new Integer(0);
      Result<Object> result1 = Result.success((Object) integer0);

      //invoke method for result1
      result1.getData();
      String string0 = result0.getMsg();
      assertNotNull(string0);
      assertEquals("", string0);
  }
  @Test(timeout = 4000)
  public void test_getCode_2()  throws Throwable  {
      //caseID:b6df6dbd2f80eb84d6b6cbb518be1a2a

      //prepare data for codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(163).when(codeMsg0).getCode();
      doReturn("com.jesper.seckill.result.Result").when(codeMsg0).getMsg();
      Result<Integer> result0 = Result.error(codeMsg0);

      //invoke method for result0
      result0.getData();

      //invoke method for result0
      assertEquals(163, result0.getCode());
      
      Result<Object> result1 = Result.success((Object) null);
      int int0 = result1.getCode();
      assertEquals(0, int0);
  }
  @Test(timeout = 4000)
  public void test_setMsg_3()  throws Throwable  {
      //caseID:19bea4024990cdf39962c6d889cebd6a

      //prepare data for codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(0).when(codeMsg0).getCode();
      doReturn("500101").when(codeMsg0).getMsg();
      Result<Object> result0 = Result.error(codeMsg0);
      Result<String> result1 = Result.success(">Vyz<gF)");

      //invoke method for result1
      result1.getData();

      //invoke method for result0
      result0.setMsg("1");

      //invoke method for result0
      assertEquals("1", result0.getMsg());
  }
  @Test(timeout = 4000)
  public void test_setData_4()  throws Throwable  {
      //caseID:5a22fd1bffedbf8e719fa64b7257ded5
      Result<String> result0 = Result.success("1.0");

      //prepare data for codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(500212).when(codeMsg0).getCode();
      doReturn("1.0").when(codeMsg0).getMsg();
      Result<Integer> result1 = Result.error(codeMsg0);

      //invoke method for result1
      result1.getData();

      //invoke method for result1
      assertEquals(500212, result1.getCode());
      

      //invoke method for result0
      result0.setData("");

      //invoke method for result0
      assertEquals(0, result0.getCode());
  }
  @Test(timeout = 4000)
  public void test_setCode_5()  throws Throwable  {
      //caseID:be142d61bb62af633f8e8dc7219e76f6

      //prepare data for codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(0).when(codeMsg0).getCode();
      doReturn("\u5546\u54C1\u5DF2\u7ECF\u79D2\u6740\u5B8C\u6BD5").when(codeMsg0).getMsg();
      Result<Object> result0 = Result.error(codeMsg0);
      Result<String> result1 = Result.success("Session\u4E0D\u5B58\u5728\u6216\u8005\u5DF2\u7ECF\u5931\u6548");

      //invoke method for result1
      result1.getData();

      //invoke method for result0
      result0.setCode(0);

      //invoke method for result0
      assertEquals(0, result0.getCode());
  }}
