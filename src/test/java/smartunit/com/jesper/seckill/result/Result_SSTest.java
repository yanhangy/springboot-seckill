/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.jesper.seckill.result;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.jesper.seckill.result.CodeMsg;
import com.jesper.seckill.result.Result;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Result_SSTest extends Result_SSTest_scaffolding {

  @Test(timeout = 4000)
  public void test_getMsg_0()  throws Throwable  {
      //caseID:1a0dc77f7f67d6eeb28084faf3ab4f98
      Result<Object> result0 = Result.error((CodeMsg) null);
      String string0 = result0.getMsg();
      assertNull(string0);
  }
  @Test(timeout = 4000)
  public void test_setData_1()  throws Throwable  {
      //caseID:14ac6a074fd197fbd8398b8bd1a51c0a

      //prepare data for codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1).when(codeMsg0).getCode();
      doReturn("com.jesper.seckill.result.Result").when(codeMsg0).getMsg();
      Result<Object> result0 = Result.error(codeMsg0);

      //invoke method for result0
      result0.setData("=S=Oj]+0");

      //invoke method for result0
      assertEquals(1, result0.getCode());
  }
  @Test(timeout = 4000)
  public void test_getMsg_2()  throws Throwable  {
      //caseID:2933aa0a68c2edbb71fa6d1043504b6b

      //prepare data for codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(0).when(codeMsg0).getCode();
      doReturn(", msg=").when(codeMsg0).getMsg();
      Result<Object> result0 = Result.error(codeMsg0);

      //invoke method for result0
      result0.getData();
      Result.success((Object) null);
      String string0 = result0.getMsg();
      assertNotNull(string0);
      assertEquals(", msg=", string0);
  }
  @Test(timeout = 4000)
  public void test_getCode_3()  throws Throwable  {
      //caseID:faae788aeb71f14969586cfb8485afbb
      Result<String> result0 = Result.success("com.jesper.seckill.result.Result");

      //prepare data for codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1117).when(codeMsg0).getCode();
      doReturn("com.jesper.seckill.result.Result").when(codeMsg0).getMsg();
      Result<Integer> result1 = Result.error(codeMsg0);

      //invoke method for result1
      result1.getData();

      //invoke method for result1
      assertEquals(1117, result1.getCode());
      
      int int0 = result0.getCode();
      assertEquals(0, int0);
  }
  @Test(timeout = 4000)
  public void test_setMsg_4()  throws Throwable  {
      //caseID:b11e58716b8f0f58747bff022b32e9b3

      //prepare data for codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(747).when(codeMsg0).getCode();
      doReturn("com.jesper.seckill.result.Result").when(codeMsg0).getMsg();
      Result<Integer> result0 = Result.error(codeMsg0);

      //invoke method for result0
      result0.getData();

      //invoke method for result0
      assertEquals(747, result0.getCode());
      
      Result<Object> result1 = Result.success((Object) null);

      //invoke method for result1
      result1.setMsg("com.jesper.seckill.result.Result");

      //invoke method for result1
      assertEquals(0, result1.getCode());
  }
  @Test(timeout = 4000)
  public void test_setCode_5()  throws Throwable  {
      //caseID:52f23a1997144f502518b79bdbf9e99e

      //prepare data for codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1).when(codeMsg0).getCode();
      doReturn("|6*wq!>ed(Po}M!").when(codeMsg0).getMsg();
      Result<Object> result0 = Result.error(codeMsg0);

      //invoke method for result0
      result0.getData();
      Result<Object> result1 = Result.success((Object) null);

      //invoke method for result1
      result1.setCode(716);

      //invoke method for result1
      assertEquals(716, result1.getCode());
  }}
