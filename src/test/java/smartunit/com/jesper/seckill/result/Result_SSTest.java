/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.jesper.seckill.result;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.jesper.seckill.result.CodeMsg;
import com.jesper.seckill.result.Result;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Result_SSTest extends Result_SSTest_scaffolding {

  @Test(timeout = 4000)
  public void test_setData_0()  throws Throwable  {
      //caseID:a785960a2b772ae1a39c02921e1bf29d
      Result<Object> result0 = Result.success((Object) "\u670D\u52A1\u7AEF\u5F02\u5E38");

      //invoke method for result0
      result0.setData("\u670D\u52A1\u7AEF\u5F02\u5E38");

      //invoke method for result0
      assertEquals(0, result0.getCode());
  }
  @Test(timeout = 4000)
  public void test_getCode_1()  throws Throwable  {
      //caseID:50fe82d72c9cfd156d9ea26246e6bde5

      //prepare data for codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(0).when(codeMsg0).getCode();
      doReturn("1").when(codeMsg0).getMsg();
      Result<Object> result0 = Result.error(codeMsg0);
      int int0 = result0.getCode();
      assertEquals(0, int0);
  }
  @Test(timeout = 4000)
  public void test_setCode_2()  throws Throwable  {
      //caseID:2bed5f666952c1d960a142573713a184
      Result<String> result0 = Result.error((CodeMsg) null);

      //invoke method for result0
      result0.getData();
      Result.success((Object) null);

      //invoke method for result0
      result0.setCode(1699);

      //invoke method for result0
      assertEquals(1699, result0.getCode());
  }
  @Test(timeout = 4000)
  public void test_getMsg_3()  throws Throwable  {
      //caseID:d0529e2207cc929aec4bfaacdd8037e0

      //prepare data for codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1).when(codeMsg0).getCode();
      doReturn("1.0").when(codeMsg0).getMsg();
      Result<Object> result0 = Result.error(codeMsg0);
      Result<String> result1 = Result.success("1.0");

      //invoke method for result1
      result1.getData();
      String string0 = result0.getMsg();
      assertNotNull(string0);

      //invoke method for result0
      assertEquals(1, result0.getCode());
  }
  @Test(timeout = 4000)
  public void test_setCode_4()  throws Throwable  {
      //caseID:a8bc2ce13af91106b732b59fac973147
      Object object0 = new Object();
      Result.success(object0);

      //prepare data for codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((-477)).when(codeMsg0).getCode();
      doReturn("500213").when(codeMsg0).getMsg();
      Result<String> result0 = Result.error(codeMsg0);

      //invoke method for result0
      result0.getData();

      //invoke method for result0
      result0.setCode(3652);

      //invoke method for result0
      assertEquals(3652, result0.getCode());
  }
  @Test(timeout = 4000)
  public void test_setMsg_5()  throws Throwable  {
      //caseID:f75d1b82372fb32502f1fb49ef90588c
      Result<String> result0 = Result.success("");

      //prepare data for codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1).when(codeMsg0).getCode();
      doReturn("1.0").when(codeMsg0).getMsg();
      Result<Object> result1 = Result.error(codeMsg0);

      //invoke method for result1
      result1.getData();

      //invoke method for result1
      assertEquals(1, result1.getCode());
      

      //invoke method for result0
      result0.setMsg("wZ@Gj2E@<#$D1a^[h8i");

      //invoke method for result0
      assertEquals(0, result0.getCode());
  }}
