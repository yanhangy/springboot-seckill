/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.jesper.seckill.result;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.jesper.seckill.result.CodeMsg;
import com.jesper.seckill.result.Result;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Result_SSTest extends Result_SSTest_scaffolding {

  @Test(timeout = 4000)
  public void test_setCode_0()  throws Throwable  {
      //caseID:aab22ee6f74cb9d9b26791197883fb7f
      Result<String> result0 = Result.success("1");

      //invoke method for result0
      result0.setCode(0);

      //invoke method for result0
      assertEquals(0, result0.getCode());
  }
  @Test(timeout = 4000)
  public void test_setMsg_1()  throws Throwable  {
      //caseID:3ad56b871b47494a1d7aaf63fe71563a

      //prepare data for codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(0).when(codeMsg0).getCode();
      doReturn("1").when(codeMsg0).getMsg();
      Result<Object> result0 = Result.error(codeMsg0);

      //invoke method for result0
      result0.setMsg("");

      //invoke method for result0
      assertEquals("", result0.getMsg());
  }
  @Test(timeout = 4000)
  public void test_getMsg_2()  throws Throwable  {
      //caseID:60743795043a16c98e5f258ae5dd949a
      Result<Object> result0 = Result.error((CodeMsg) null);
      Result<String> result1 = Result.success("com.jesper.seckill.result.Result");

      //invoke method for result1
      result1.getData();
      String string0 = result0.getMsg();
      assertNull(string0);
  }
  @Test(timeout = 4000)
  public void test_getMsg_3()  throws Throwable  {
      //caseID:f5589811b4ed3fe569ec7ac1d4b91d6d

      //prepare data for codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1).when(codeMsg0).getCode();
      doReturn("\u624B\u673A\u53F7\u683C\u5F0F\u9519\u8BEF").when(codeMsg0).getMsg();
      Result<String> result0 = Result.error(codeMsg0);

      //invoke method for result0
      assertEquals(1, result0.getCode());
      
      Integer integer0 = new Integer(500212);
      Result<Integer> result1 = Result.success(integer0);

      //invoke method for result1
      result1.getData();
      String string0 = result1.getMsg();
      assertNull(string0);
  }
  @Test(timeout = 4000)
  public void test_getCode_4()  throws Throwable  {
      //caseID:6a10ccb9131ed2c8cd41cad8208d9945
      Result<String> result0 = Result.success("com.jesper.seckill.result.Result");

      //prepare data for codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(0).when(codeMsg0).getCode();
      doReturn("\u4E0D\u80FD\u91CD\u590D\u79D2\u6740").when(codeMsg0).getMsg();
      Result<Object> result1 = Result.error(codeMsg0);

      //invoke method for result1
      result1.getData();
      int int0 = result0.getCode();
      assertEquals(0, int0);
  }
  @Test(timeout = 4000)
  public void test_setData_5()  throws Throwable  {
      //caseID:eba517cf32b73c16177a930d46ed013a

      //prepare data for codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(0).when(codeMsg0).getCode();
      doReturn("1.0").when(codeMsg0).getMsg();
      Result<Object> result0 = Result.error(codeMsg0);
      Integer integer0 = new Integer(1);
      Result<Integer> result1 = Result.success(integer0);
      Object object0 = result1.getData();

      //invoke method for result0
      result0.setData(object0);

      //invoke method for result0
      assertEquals("1.0", result0.getMsg());
  }}
