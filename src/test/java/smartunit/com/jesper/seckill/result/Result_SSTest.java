/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.jesper.seckill.result;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.jesper.seckill.result.CodeMsg;
import com.jesper.seckill.result.Result;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Result_SSTest extends Result_SSTest_scaffolding {
// allCoveredLines:[13, 20, 23, 24, 25, 32, 33, 34, 35, 37, 41, 44, 45, 47, 50, 51, 53, 56, 57]

  @Test(timeout = 4000)
  public void test_error_0()  throws Throwable  {
      //caseID:dcdbc44bd73f6ac1224f5de80b9a827a
      //CoveredLines: [13, 20, 23, 24, 25, 32, 33, 34, 35, 37]
      //Input_0_CodeMsg: {}
      //Assert: assertFalse(method_result.equals((Object)result0));
      
      Integer integer0 = new Integer(500212);
      Result<Integer> result0 = Result.success(integer0);
      //mock codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: error
      Result<Integer> result1 = Result.error(codeMsg0);
      
      //Test Result Assert
      assertFalse(result1.equals((Object)result0));
  }

  @Test(timeout = 4000)
  public void test_getCode_1()  throws Throwable  {
      //caseID:191951bd2ecb6e2634bbe3ef25d62e66
      //CoveredLines: [20, 32, 33, 34, 35, 37, 41]
      //Assert: assertEquals(0, method_result);
      
      //mock codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Result<Integer> result0 = Result.error(codeMsg0);
      
      //Call method: getCode
      int int0 = result0.getCode();
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_getData_2()  throws Throwable  {
      //caseID:1fb0cd4463fea74a23d54462c4a50f34
      //CoveredLines: [13, 23, 24, 25, 53]
      //Assert: assertSame(object0, method_result);
      
      Object object0 = new Object();
      Result<Object> result0 = Result.success(object0);
      
      //Call method: getData
      Object object1 = result0.getData();
      
      //Test Result Assert
      assertSame(object0, object1);
  }

  @Test(timeout = 4000)
  public void test_getMsg_3()  throws Throwable  {
      //caseID:93fe7531e90022356556e87926319b24
      //CoveredLines: [20, 32, 33, 34, 35, 37, 47]
      //Assert: assertNull(method_result);
      
      //mock codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Result<Object> result0 = Result.error(codeMsg0);
      
      //Call method: getMsg
      String string0 = result0.getMsg();
      
      //Test Result Assert
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test_setCode_4()  throws Throwable  {
      //caseID:33f305517cc3e0f6a08c68bd0aeae399
      //CoveredLines: [20, 32, 33, 34, 35, 37, 44, 45]
      //Input_0_int: 1
      
      //mock codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Result<String> result0 = Result.error(codeMsg0);
      
      //Call method: setCode
      result0.setCode(1);
      
      //Test Result Assert
      assertEquals(1, result0.getCode());
  }

  @Test(timeout = 4000)
  public void test_setData_5()  throws Throwable  {
      //caseID:f383627641b04cd14d5250ab0c9181b4
      //CoveredLines: [20, 32, 33, 37, 56, 57]
      //Input_0_Object: "500100"
      
      Result<Object> result0 = Result.error((CodeMsg) null);
      
      //Call method: setData
      result0.setData("500100");
      
      //Test Result Assert
      assertEquals(0, result0.getCode());
  }

  @Test(timeout = 4000)
  public void test_setData_6()  throws Throwable  {
      //caseID:3bf24f4f9dd096d5813b4cbbc0cd6f25
      //CoveredLines: [20, 32, 33, 34, 35, 37, 56, 57]
      //Input_0_Object: "500100"
      
      //mock codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Result<Object> result0 = Result.error(codeMsg0);
      
      //Call method: setData
      result0.setData("500100");
      
      //Test Result Assert
      assertNull(result0.getMsg());
  }

  @Test(timeout = 4000)
  public void test_setMsg_7()  throws Throwable  {
      //caseID:fd1ce398007403983fcb270db5a07f0b
      //CoveredLines: [13, 23, 24, 25, 50, 51]
      //Input_0_String: "\u4E0D\u80FD\u91CD\u590D\u79D2\u6740"
      
      Integer integer0 = new Integer((-1));
      Result<Object> result0 = Result.success((Object) integer0);
      
      //Call method: setMsg
      result0.setMsg("\u4E0D\u80FD\u91CD\u590D\u79D2\u6740");
      
      //Test Result Assert
      assertEquals("\u4E0D\u80FD\u91CD\u590D\u79D2\u6740", result0.getMsg());
  }
}
