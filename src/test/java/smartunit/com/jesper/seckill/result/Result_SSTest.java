/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.jesper.seckill.result;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.jesper.seckill.result.CodeMsg;
import com.jesper.seckill.result.Result;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Result_SSTest extends Result_SSTest_scaffolding {

  @Test(timeout = 4000)
  public void test_setMsg_0()  throws Throwable  {
      //caseID:b86ccea983ac80c6a81a8b269bc598eb
      Result<Object> result0 = Result.success((Object) "1.0");

      //invoke method for result0
      result0.setMsg("8p)S%xJ:Tiv`9lA;Pw");

      //invoke method for result0
      assertEquals(0, result0.getCode());
  }
  @Test(timeout = 4000)
  public void test_getCode_1()  throws Throwable  {
      //caseID:ea06c99b3bcebcef7ebec3f4acb35217

      //prepare data for codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(2983).when(codeMsg0).getCode();
      doReturn("1").when(codeMsg0).getMsg();
      Result<String> result0 = Result.error(codeMsg0);
      int int0 = result0.getCode();
      assertEquals(2983, int0);
  }
  @Test(timeout = 4000)
  public void test_setCode_2()  throws Throwable  {
      //caseID:48787b28e440d52f7cce094ff7edbff7
      Result<Object> result0 = Result.error((CodeMsg) null);
      Result<Object> result1 = Result.success((Object) result0);

      //invoke method for result1
      result1.getData();

      //invoke method for result0
      result0.setCode(500212);

      //invoke method for result0
      assertEquals(500212, result0.getCode());
  }
  @Test(timeout = 4000)
  public void test_getMsg_3()  throws Throwable  {
      //caseID:9f01bd61d0edc4010e3cbe721a808e9a

      //prepare data for codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(0).when(codeMsg0).getCode();
      doReturn("1.0").when(codeMsg0).getMsg();
      Result<String> result0 = Result.error(codeMsg0);

      //invoke method for result0
      result0.getData();
      Result.success((Object) null);
      String string0 = result0.getMsg();
      assertNotNull(string0);
      assertEquals("1.0", string0);
  }
  @Test(timeout = 4000)
  public void test_setData_4()  throws Throwable  {
      //caseID:b42ebdf361248d735a2780a62699c90c

      //prepare data for codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((-1)).when(codeMsg0).getCode();
      doReturn("com.jesper.seckill.result.Result").when(codeMsg0).getMsg();
      Result<String> result0 = Result.error(codeMsg0);
      Result<String> result1 = Result.success("1.0");

      //invoke method for result1
      result1.getData();

      //invoke method for result0
      result0.setData("1");

      //invoke method for result0
      assertEquals((-1), result0.getCode());
  }
  @Test(timeout = 4000)
  public void test_setCode_5()  throws Throwable  {
      //caseID:3f1299504e102e949bd85885488234fb

      //prepare data for codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1492).when(codeMsg0).getCode();
      doReturn("mX+").when(codeMsg0).getMsg();
      Result<Object> result0 = Result.error(codeMsg0);
      Result<Object> result1 = Result.success((Object) result0);

      //invoke method for result1
      result1.getData();

      //invoke method for result0
      result0.setCode(500212);

      //invoke method for result0
      assertEquals(500212, result0.getCode());
  }}
