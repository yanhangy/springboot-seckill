/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.jesper.seckill.result;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.jesper.seckill.result.CodeMsg;
import com.jesper.seckill.result.Result;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Result_SSTest extends Result_SSTest_scaffolding {

  @Test(timeout = 4000)
  public void test_setCode_0()  throws Throwable  {
      //caseID:b6c53f8923a66dc59c3cf836d7332bb9
      Result<String> result0 = Result.success("");

      //invoke method for result0
      result0.setCode((-1));

      //invoke method for result0
      assertEquals((-1), result0.getCode());
  }
  @Test(timeout = 4000)
  public void test_setMsg_1()  throws Throwable  {
      //caseID:0b00be1af5f669a04e25df2ccd01dba4

      //prepare data for codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1).when(codeMsg0).getCode();
      doReturn("K=g!4UdB_lkRvuZe\"DT").when(codeMsg0).getMsg();
      Result<Object> result0 = Result.error(codeMsg0);

      //invoke method for result0
      result0.setMsg("1.0");

      //invoke method for result0
      assertEquals(1, result0.getCode());
  }
  @Test(timeout = 4000)
  public void test_setData_2()  throws Throwable  {
      //caseID:a080c88e72119f8bc79d673f4721563b

      //prepare data for codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1).when(codeMsg0).getCode();
      doReturn("m}/PVtFJI18o=bh>[vp").when(codeMsg0).getMsg();
      Result<Object> result0 = Result.error(codeMsg0);

      //prepare data for codeMsg1
      CodeMsg codeMsg1 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((-1)).when(codeMsg1).getCode();
      doReturn("com.jesper.seckill.result.Result").when(codeMsg1).getMsg();
      Result<String> result1 = Result.error(codeMsg1);

      //invoke method for result1
      result1.getData();

      //invoke method for result0
      result0.setData((Object) null);

      //invoke method for result0
      assertEquals("m}/PVtFJI18o=bh>[vp", result0.getMsg());
  }
  @Test(timeout = 4000)
  public void test_getCode_3()  throws Throwable  {
      //caseID:91290e63e88daaa137e32fe99adb58d4
      Result.error((CodeMsg) null);
      Integer integer0 = new Integer((-1));
      Result<Integer> result0 = Result.success(integer0);

      //invoke method for result0
      result0.getData();
      int int0 = result0.getCode();
      assertEquals(0, int0);
  }
  @Test(timeout = 4000)
  public void test_getMsg_4()  throws Throwable  {
      //caseID:3855d14330ded73936a0a56f43602814

      //prepare data for codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1141).when(codeMsg0).getCode();
      doReturn("\u624B\u673A\u53F7\u683C\u5F0F\u9519\u8BEF").when(codeMsg0).getMsg();
      Result<String> result0 = Result.error(codeMsg0);

      //invoke method for result0
      result0.getData();
      Result.success((Object) null);
      String string0 = result0.getMsg();
      assertNotNull(string0);

      //invoke method for result0
      assertEquals(1141, result0.getCode());
  }}
