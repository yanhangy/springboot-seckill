/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.jesper.seckill.result;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.jesper.seckill.result.CodeMsg;
import com.jesper.seckill.result.Result;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Result_SSTest extends Result_SSTest_scaffolding {

  @Test(timeout = 4000)
  public void test_setMsg_0()  throws Throwable  {
      //caseID:eb9783c7feb04eeac393fcf1ff0deb7d
      Integer integer0 = new Integer((-1));
      Result<Object> result0 = Result.success((Object) integer0);

      //invoke method for result0
      result0.setMsg("CodeMsg [code=");

      //invoke method for result0
      assertEquals(0, result0.getCode());
  }
  @Test(timeout = 4000)
  public void test_setCode_1()  throws Throwable  {
      //caseID:18eb9b9284d79c77ab9166627358f2a8
      Result<String> result0 = Result.success("\u4E0D\u80FD\u91CD\u590D\u79D2\u6740");

      //invoke method for result0
      result0.setCode(0);

      //invoke method for result0
      assertEquals(0, result0.getCode());
  }
  @Test(timeout = 4000)
  public void test_getCode_2()  throws Throwable  {
      //caseID:87a3a450e9dd640b59c90b1452a8023e
      Result<Integer> result0 = Result.error((CodeMsg) null);

      //invoke method for result0
      result0.getData();
      Result.success((Object) null);
      int int0 = result0.getCode();
      assertEquals(0, int0);
  }
  @Test(timeout = 4000)
  public void test_getCode_3()  throws Throwable  {
      //caseID:9c5f4ee6502867614d58bf4935a0c7f8

      //prepare data for codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(500210).when(codeMsg0).getCode();
      doReturn("1").when(codeMsg0).getMsg();
      Result<String> result0 = Result.error(codeMsg0);

      //invoke method for result0
      result0.getData();
      Result.success((Object) null);
      int int0 = result0.getCode();
      assertEquals(500210, int0);
  }
  @Test(timeout = 4000)
  public void test_getMsg_4()  throws Throwable  {
      //caseID:49e765b2711c25031d4b6b7bdb8c91e0

      //prepare data for codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((-761)).when(codeMsg0).getCode();
      doReturn("\u53C2\u6570\u6821\u9A8C\u5F02\u5E38\uFF1A%s").when(codeMsg0).getMsg();
      Result<String> result0 = Result.error(codeMsg0);

      //invoke method for result0
      result0.getData();
      Result.success((Object) null);
      String string0 = result0.getMsg();
      assertNotNull(string0);

      //invoke method for result0
      assertEquals((-761), result0.getCode());
  }
  @Test(timeout = 4000)
  public void test_setData_5()  throws Throwable  {
      //caseID:f83b6c8f3cb8c8d27d24ab610aa9fe8c

      //prepare data for codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(0).when(codeMsg0).getCode();
      doReturn("1.0").when(codeMsg0).getMsg();
      Result<Object> result0 = Result.error(codeMsg0);
      Result<String> result1 = Result.success("1");

      //invoke method for result1
      result1.getData();

      //invoke method for result0
      result0.setData("1");

      //invoke method for result0
      assertEquals(0, result0.getCode());
  }}
