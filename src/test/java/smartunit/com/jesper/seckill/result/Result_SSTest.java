/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.jesper.seckill.result;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.jesper.seckill.result.CodeMsg;
import com.jesper.seckill.result.Result;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Result_SSTest extends Result_SSTest_scaffolding {
// allCoveredLines:[13, 20, 23, 24, 25, 32, 33, 34, 35, 37, 41, 44, 45, 47, 50, 51, 53, 56, 57]

  @Test(timeout = 4000)
  public void test_error_0()  throws Throwable  {
      //caseID:f7b74b566df32de0a1e897bc56b782f9
      //CoveredLines: [13, 20, 23, 24, 25, 32, 33, 34, 35, 37]
      //Input_0_CodeMsg: {}
      //Assert: assertNull(method_result.getMsg());
      
      Object object0 = new Object();
      Result.success(object0);
      //mock codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: error
      Result<Object> result0 = Result.error(codeMsg0);
      
      //Test Result Assert
      assertNull(result0.getMsg());
  }

  @Test(timeout = 4000)
  public void test_getCode_1()  throws Throwable  {
      //caseID:3632a8fa8d4e76f9aae1062431a6439f
      //CoveredLines: [20, 32, 33, 34, 35, 37, 41]
      //Assert: assertEquals(0, method_result);
      
      //mock codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Result<String> result0 = Result.error(codeMsg0);
      
      //Call method: getCode
      int int0 = result0.getCode();
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_getData_2()  throws Throwable  {
      //caseID:7b3bc02f7550dc30da69aba79c72773d
      //CoveredLines: [20, 32, 33, 37, 53]
      //Assert: assertNull(method_result);
      
      Result<Object> result0 = Result.error((CodeMsg) null);
      
      //Call method: getData
      Object object0 = result0.getData();
      
      //Test Result Assert
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test_getData_3()  throws Throwable  {
      //caseID:9cdb084795d6582a9032a72f5f41826e
      //CoveredLines: [20, 32, 33, 34, 35, 37, 53]
      //Assert: assertNull(method_result);
      
      //mock codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Result<Object> result0 = Result.error(codeMsg0);
      
      //Call method: getData
      Object object0 = result0.getData();
      
      //Test Result Assert
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test_getMsg_4()  throws Throwable  {
      //caseID:2091ffe5e416308bfc7dee8fb264e2d2
      //CoveredLines: [20, 32, 33, 34, 35, 37, 47]
      //Assert: assertNotNull(method_result);
      //Assert: assertEquals(500104, result0.getCode());
      
      //mock codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(500104).when(codeMsg0).getCode();
      doReturn("1.0").when(codeMsg0).getMsg();
      Result<String> result0 = Result.error(codeMsg0);
      
      //Call method: getMsg
      String string0 = result0.getMsg();
      
      //Test Result Assert
      assertNotNull(string0);
      
      //Test Result Assert
      assertEquals(500104, result0.getCode());
  }

  @Test(timeout = 4000)
  public void test_setCode_5()  throws Throwable  {
      //caseID:cb8fbc21b5449e8b0ddaa5f7932d3b78
      //CoveredLines: [20, 32, 33, 34, 35, 37, 44, 45]
      //Input_0_int: 0
      
      //mock codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Result<Integer> result0 = Result.error(codeMsg0);
      
      //Call method: setCode
      result0.setCode(0);
      
      //Test Result Assert
      assertEquals(0, result0.getCode());
  }

  @Test(timeout = 4000)
  public void test_setData_6()  throws Throwable  {
      //caseID:0720e2f792d08992db9fde43600e833b
      //CoveredLines: [20, 32, 33, 34, 35, 37, 56, 57]
      //Input_0_Object: object0
      
      //mock codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Result<Object> result0 = Result.error(codeMsg0);
      Object object0 = new Object();
      
      //Call method: setData
      result0.setData(object0);
      
      //Test Result Assert
      assertEquals(0, result0.getCode());
  }

  @Test(timeout = 4000)
  public void test_setMsg_7()  throws Throwable  {
      //caseID:754003206944df16b1e8dcc43c8de20c
      //CoveredLines: [20, 32, 33, 34, 35, 37, 50, 51]
      //Input_0_String: "1.0"
      
      //mock codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Result<Object> result0 = Result.error(codeMsg0);
      
      //Call method: setMsg
      result0.setMsg("1.0");
      
      //Test Result Assert
      assertEquals("1.0", result0.getMsg());
  }
}
