/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.jesper.seckill.result;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.jesper.seckill.result.CodeMsg;
import com.jesper.seckill.result.Result;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Result_SSTest extends Result_SSTest_scaffolding {
// allCoveredLines:[13, 20, 23, 24, 25, 32, 33, 34, 35, 37, 41, 44, 45, 47, 50, 51, 53, 56, 57]

  @Test(timeout = 4000)
  public void test_getCode_0()  throws Throwable  {
      //caseID:cdcfc86a40ccb7d40af9ab3e66c9ef53
      //CoveredLines: [20, 32, 33, 34, 35, 37, 41]
      //Assert: assertEquals(500101, method_result);
      
      //mock codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(500101).when(codeMsg0).getCode();
      doReturn("1.0").when(codeMsg0).getMsg();
      Result<Integer> result0 = Result.error(codeMsg0);
      
      //Call method: getCode
      int int0 = result0.getCode();
      
      //Test Result Assert
      assertEquals(500101, int0);
  }

  @Test(timeout = 4000)
  public void test_getData_1()  throws Throwable  {
      //caseID:bd316cc283f499dfe231109cc9909bbd
      //CoveredLines: [20, 32, 33, 37, 53]
      //Assert: assertNull(method_result);
      
      Result<Object> result0 = Result.error((CodeMsg) null);
      
      //Call method: getData
      Object object0 = result0.getData();
      
      //Test Result Assert
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test_getData_2()  throws Throwable  {
      //caseID:1eee0c7b2d5cf9996bc8f021fd3a60a3
      //CoveredLines: [20, 32, 33, 34, 35, 37, 53]
      //Assert: assertNull(method_result);
      
      //mock codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Result<Object> result0 = Result.error(codeMsg0);
      
      //Call method: getData
      Object object0 = result0.getData();
      
      //Test Result Assert
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test_getMsg_3()  throws Throwable  {
      //caseID:858f6f799b3fac38e15cc091c8d58f01
      //CoveredLines: [20, 32, 33, 34, 35, 37, 47]
      //Assert: assertNotNull(method_result);
      //Assert: assertEquals("", result0.getMsg());
      
      //mock codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((-1)).when(codeMsg0).getCode();
      doReturn("").when(codeMsg0).getMsg();
      Result<Object> result0 = Result.error(codeMsg0);
      
      //Call method: getMsg
      String string0 = result0.getMsg();
      
      //Test Result Assert
      assertNotNull(string0);
      
      //Test Result Assert
      assertEquals("", result0.getMsg());
  }

  @Test(timeout = 4000)
  public void test_setCode_4()  throws Throwable  {
      //caseID:b4125b861f9ddf9a5fc5f9f9bc63aa4b
      //CoveredLines: [13, 23, 24, 25, 44, 45]
      //Input_0_int: 1
      
      Result<Object> result0 = Result.success((Object) "1");
      
      //Call method: setCode
      result0.setCode(1);
      
      //Test Result Assert
      assertEquals(1, result0.getCode());
  }

  @Test(timeout = 4000)
  public void test_setData_5()  throws Throwable  {
      //caseID:ef58989ae81ad003e20ae5dde2b8589e
      //CoveredLines: [20, 32, 33, 34, 35, 37, 56, 57]
      //Input_0_Object: "1.0"
      
      //mock codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Result<Object> result0 = Result.error(codeMsg0);
      
      //Call method: setData
      result0.setData("1.0");
      
      //Test Result Assert
      assertEquals(0, result0.getCode());
  }

  @Test(timeout = 4000)
  public void test_setMsg_6()  throws Throwable  {
      //caseID:545063793036461b4ceebba0a6d2445f
      //CoveredLines: [13, 23, 24, 25, 50, 51]
      //Input_0_String: "com.jesper.seckill.result.Result"
      
      Result<String> result0 = Result.success(",<(a;+rU}");
      
      //Call method: setMsg
      result0.setMsg("com.jesper.seckill.result.Result");
      
      //Test Result Assert
      assertEquals("com.jesper.seckill.result.Result", result0.getMsg());
  }
}
