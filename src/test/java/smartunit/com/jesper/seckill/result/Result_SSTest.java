/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.jesper.seckill.result;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.jesper.seckill.result.CodeMsg;
import com.jesper.seckill.result.Result;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Result_SSTest extends Result_SSTest_scaffolding {

  @Test(timeout = 4000)
  public void test_setCode_0()  throws Throwable  {
      //caseID:7276e2e2340d7cd1b63fdb4aa966feb4
      Result<Object> result0 = Result.success((Object) "1.0");

      //invoke method for result0
      result0.setCode(2310);

      //invoke method for result0
      assertEquals(2310, result0.getCode());
  }
  @Test(timeout = 4000)
  public void test_setMsg_1()  throws Throwable  {
      //caseID:8c428031f922ca78735f4c18aa299c40

      //prepare data for codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1209).when(codeMsg0).getCode();
      doReturn("").when(codeMsg0).getMsg();
      Result<String> result0 = Result.error(codeMsg0);

      //invoke method for result0
      result0.setMsg("com.jesper.seckill.result.Result");

      //invoke method for result0
      assertEquals(1209, result0.getCode());
  }
  @Test(timeout = 4000)
  public void test_getMsg_2()  throws Throwable  {
      //caseID:82098fb9117b5fd6a443908ddc0aae2e
      Result<Object> result0 = Result.error((CodeMsg) null);

      //invoke method for result0
      result0.getData();
      Result.success((Object) null);
      String string0 = result0.getMsg();
      assertNull(string0);
  }
  @Test(timeout = 4000)
  public void test_getMsg_3()  throws Throwable  {
      //caseID:fd1ecc532bd0e7dfa52bfd09d455ea69
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(0).when(codeMsg0).getCode();
      doReturn("1.0").when(codeMsg0).getMsg();
      Result.error(codeMsg0);
      Integer integer0 = new Integer(317);
      Result<Integer> result0 = Result.success(integer0);

      //invoke method for result0
      result0.getData();
      String string0 = result0.getMsg();
      assertNull(string0);
  }
  @Test(timeout = 4000)
  public void test_getCode_4()  throws Throwable  {
      //caseID:5cf79992b97be5360d2d184f457e7b75

      //prepare data for codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(500500).when(codeMsg0).getCode();
      doReturn("1").when(codeMsg0).getMsg();
      Result<Object> result0 = Result.error(codeMsg0);

      //invoke method for result0
      result0.getData();
      Result.success((Object) null);
      int int0 = result0.getCode();
      assertEquals(500500, int0);
  }
  @Test(timeout = 4000)
  public void test_setData_5()  throws Throwable  {
      //caseID:90389983885513b2e87dc4ac24193061

      //prepare data for codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1).when(codeMsg0).getCode();
      doReturn("\tzBh)6x|s8").when(codeMsg0).getMsg();
      Result<Integer> result0 = Result.error(codeMsg0);
      Integer integer0 = new Integer(1);
      Result<Integer> result1 = Result.success(integer0);
      Object object0 = result1.getData();

      //invoke method for result0
      result0.setData((Integer) object0);

      //invoke method for result0
      assertEquals(1, result0.getCode());
  }}
