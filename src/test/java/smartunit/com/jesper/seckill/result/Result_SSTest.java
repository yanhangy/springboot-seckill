/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.jesper.seckill.result;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.jesper.seckill.result.CodeMsg;
import com.jesper.seckill.result.Result;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Result_SSTest extends Result_SSTest_scaffolding {

  @Test(timeout = 4000)
  public void test_getMsg_0()  throws Throwable  {
      //caseID:fc401651142e36ae8d87797639ec13c8
      Result<Integer> result0 = Result.error((CodeMsg) null);
      String string0 = result0.getMsg();
      assertNull(string0);
  }
  @Test(timeout = 4000)
  public void test_setCode_1()  throws Throwable  {
      //caseID:c931d417238f1b7cece8c81a4a6b035d
      Result<String> result0 = Result.success("i~WJ@xa(vxw2Km9");

      //invoke method for result0
      result0.setCode(0);

      //invoke method for result0
      assertEquals(0, result0.getCode());
  }
  @Test(timeout = 4000)
  public void test_setMsg_2()  throws Throwable  {
      //caseID:fd813ffa592debd7a71831a024fb51d1

      //prepare data for codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(0).when(codeMsg0).getCode();
      doReturn("\u670D\u52A1\u7AEF\u5F02\u5E38").when(codeMsg0).getMsg();
      Result<String> result0 = Result.error(codeMsg0);

      //invoke method for result0
      result0.setMsg("com.jesper.seckill.result.Result");

      //invoke method for result0
      assertEquals("com.jesper.seckill.result.Result", result0.getMsg());
  }
  @Test(timeout = 4000)
  public void test_getMsg_3()  throws Throwable  {
      //caseID:c7bfff5250fa375799db7cd141fff2b0

      //prepare data for codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(301).when(codeMsg0).getCode();
      doReturn("*_FHp>d[<X+{Xp\"?JS/").when(codeMsg0).getMsg();
      Result<String> result0 = Result.error(codeMsg0);
      Result<String> result1 = Result.success("fT5pcHz_");

      //invoke method for result1
      result1.getData();
      String string0 = result0.getMsg();
      assertNotNull(string0);

      //invoke method for result0
      assertEquals(301, result0.getCode());
  }
  @Test(timeout = 4000)
  public void test_getCode_4()  throws Throwable  {
      //caseID:f0620968637af39a6095d8a766385cbc
      Result.success((Object) "1");

      //prepare data for codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(0).when(codeMsg0).getCode();
      doReturn("500400").when(codeMsg0).getMsg();
      Result<Object> result0 = Result.error(codeMsg0);

      //invoke method for result0
      result0.getData();
      int int0 = result0.getCode();
      assertEquals(0, int0);
  }
  @Test(timeout = 4000)
  public void test_setData_5()  throws Throwable  {
      //caseID:72094e00b53cbda1aa4a7316243a949a

      //prepare data for codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((-1)).when(codeMsg0).getCode();
      doReturn("com.jesper.seckill.result.Result").when(codeMsg0).getMsg();
      Result<Object> result0 = Result.error(codeMsg0);
      Object object0 = new Object();
      Result<Object> result1 = Result.success(object0);
      Object object1 = result1.getData();

      //invoke method for result0
      result0.setData(object1);

      //invoke method for result0
      assertEquals((-1), result0.getCode());
  }}
