/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.jesper.seckill.result;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.jesper.seckill.result.CodeMsg;
import com.jesper.seckill.result.Result;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Result_SSTest extends Result_SSTest_scaffolding {

  @Test(timeout = 4000)
  public void test_setData_0()  throws Throwable  {
      //caseID:523a7ca3757d9e9eca064c7e31ba69dc
      Result<Object> result0 = Result.error((CodeMsg) null);

      //invoke method for result0
      result0.setData("1");

      //invoke method for result0
      assertNull(result0.getMsg());
  }
  @Test(timeout = 4000)
  public void test_setData_1()  throws Throwable  {
      //caseID:4e2184818adbe039b7bdd69461688ecb
      Integer integer0 = new Integer(1);
      Result<Integer> result0 = Result.success(integer0);

      //invoke method for result0
      result0.setData(integer0);

      //invoke method for result0
      assertEquals(0, result0.getCode());
  }
  @Test(timeout = 4000)
  public void test_setCode_2()  throws Throwable  {
      //caseID:9e67fb91d053166521e027638f646ff4
      Result<String> result0 = Result.success("500216");

      //invoke method for result0
      result0.setCode(1);

      //invoke method for result0
      assertEquals(1, result0.getCode());
  }
  @Test(timeout = 4000)
  public void test_getCode_3()  throws Throwable  {
      //caseID:19827eaaa3d9756329585b4d2928250c

      //prepare data for codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(500214).when(codeMsg0).getCode();
      doReturn("com.jesper.seckill.result.Result").when(codeMsg0).getMsg();
      Result<Object> result0 = Result.error(codeMsg0);
      int int0 = result0.getCode();
      assertEquals(500214, int0);
  }
  @Test(timeout = 4000)
  public void test_setMsg_4()  throws Throwable  {
      //caseID:4c4a8dba2d340ca90969d879e97dcc92

      //prepare data for codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((-4277)).when(codeMsg0).getCode();
      doReturn("1").when(codeMsg0).getMsg();
      Result<Integer> result0 = Result.error(codeMsg0);

      //invoke method for result0
      result0.setMsg("1");

      //invoke method for result0
      assertEquals((-4277), result0.getCode());
  }
  @Test(timeout = 4000)
  public void test_getMsg_5()  throws Throwable  {
      //caseID:6772f486475c60edb8c60fd24b2ff441
      Integer integer0 = new Integer(0);
      Result.success(integer0);

      //prepare data for codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((-1)).when(codeMsg0).getCode();
      doReturn("com.jesper.seckill.result.Result").when(codeMsg0).getMsg();
      Result<String> result0 = Result.error(codeMsg0);

      //invoke method for result0
      result0.getData();
      String string0 = result0.getMsg();
      assertNotNull(string0);

      //invoke method for result0
      assertEquals((-1), result0.getCode());
  }}
