/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.jesper.seckill.result;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.jesper.seckill.result.CodeMsg;
import com.jesper.seckill.result.Result;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Result_SSTest extends Result_SSTest_scaffolding {

  @Test(timeout = 4000)
  public void test_setCode_0()  throws Throwable  {
      //caseID:16d3d660884f6eff7c4344570b0fa5bf

      //prepare data for codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((-1)).when(codeMsg0).getCode();
      doReturn("1").when(codeMsg0).getMsg();
      Result<Object> result0 = Result.error(codeMsg0);

      //invoke method for result0
      result0.setCode(1);

      //invoke method for result0
      assertEquals(1, result0.getCode());
  }
  @Test(timeout = 4000)
  public void test_setMsg_1()  throws Throwable  {
      //caseID:1dc86a8c6050d17bb2836f74b6ff6d8e

      //prepare data for codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(0).when(codeMsg0).getCode();
      doReturn("").when(codeMsg0).getMsg();
      Result<String> result0 = Result.error(codeMsg0);

      //invoke method for result0
      result0.setMsg("1");

      //invoke method for result0
      assertEquals(0, result0.getCode());
  }
  @Test(timeout = 4000)
  public void test_getCode_2()  throws Throwable  {
      //caseID:06386da1cb470d12b3573f4ccab6346f
      Result<Object> result0 = Result.error((CodeMsg) null);
      Integer integer0 = new Integer((-1));
      Result<Integer> result1 = Result.success(integer0);

      //invoke method for result1
      result1.getData();
      int int0 = result0.getCode();
      assertEquals(0, int0);
  }
  @Test(timeout = 4000)
  public void test_getMsg_3()  throws Throwable  {
      //caseID:0d026a16c8625b6778cd5a92cceb5b04
      Result.success("com.jesper.seckill.result.Result");

      //prepare data for codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(0).when(codeMsg0).getCode();
      doReturn("xU%mA:+|u").when(codeMsg0).getMsg();
      Result<Object> result0 = Result.error(codeMsg0);

      //invoke method for result0
      result0.getData();
      String string0 = result0.getMsg();
      assertNotNull(string0);
      assertEquals("xU%mA:+|u", string0);
  }
  @Test(timeout = 4000)
  public void test_getCode_4()  throws Throwable  {
      //caseID:e5ca2f4e54ff684645894b97104c45b9

      //prepare data for codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((-1)).when(codeMsg0).getCode();
      doReturn("1.0").when(codeMsg0).getMsg();
      Result<Object> result0 = Result.error(codeMsg0);

      //invoke method for result0
      result0.getData();

      //invoke method for result0
      assertEquals((-1), result0.getCode());
      
      Result<Object> result1 = Result.success((Object) null);
      int int0 = result1.getCode();
      assertEquals(0, int0);
  }
  @Test(timeout = 4000)
  public void test_setData_5()  throws Throwable  {
      //caseID:7cca5e50382cfd4332cea4413ad71715

      //prepare data for codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(500215).when(codeMsg0).getCode();
      doReturn("").when(codeMsg0).getMsg();
      Result<Integer> result0 = Result.error(codeMsg0);

      //invoke method for result0
      assertEquals(500215, result0.getCode());
      
      Result<Object> result1 = Result.success((Object) "");

      //invoke method for result1
      result1.getData();
      Object object0 = new Object();

      //invoke method for result1
      result1.setData(object0);

      //invoke method for result1
      assertNull(result1.getMsg());
  }}
