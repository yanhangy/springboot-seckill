/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.jesper.seckill.result;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.jesper.seckill.result.CodeMsg;
import com.jesper.seckill.result.Result;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Result_SSTest extends Result_SSTest_scaffolding {

  @Test(timeout = 4000)
  public void test_setData_0()  throws Throwable  {
      //caseID:bb687f32e8496a947d332e4a67e7098d
      Result<Object> result0 = Result.error((CodeMsg) null);

      //invoke method for result0
      result0.setData("1");

      //invoke method for result0
      assertEquals(0, result0.getCode());
  }
  @Test(timeout = 4000)
  public void test_setMsg_1()  throws Throwable  {
      //caseID:1f6c9384926ff15ad99eaf75b0f83fe8
      Integer integer0 = new Integer(500104);
      Result<Integer> result0 = Result.success(integer0);

      //invoke method for result0
      result0.setMsg("1");

      //invoke method for result0
      assertEquals(0, result0.getCode());
  }
  @Test(timeout = 4000)
  public void test_getCode_2()  throws Throwable  {
      //caseID:65a4236abb9dc18380372435f3d284be

      //prepare data for codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(0).when(codeMsg0).getCode();
      doReturn("\u5546\u54C1\u5DF2\u7ECF\u79D2\u6740\u5B8C\u6BD5").when(codeMsg0).getMsg();
      Result<String> result0 = Result.error(codeMsg0);
      int int0 = result0.getCode();
      assertEquals(0, int0);
  }
  @Test(timeout = 4000)
  public void test_setData_3()  throws Throwable  {
      //caseID:05297322f4f7d593ecb77b97646660a9

      //prepare data for codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1).when(codeMsg0).getCode();
      doReturn("1.0").when(codeMsg0).getMsg();
      Result<Object> result0 = Result.error(codeMsg0);

      //invoke method for result0
      result0.setData("com.jesper.seckill.result.Result");

      //invoke method for result0
      assertEquals(1, result0.getCode());
  }
  @Test(timeout = 4000)
  public void test_getMsg_4()  throws Throwable  {
      //caseID:954eb7ec644d826d1c65b4b5542e316d

      //prepare data for codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(0).when(codeMsg0).getCode();
      doReturn("").when(codeMsg0).getMsg();
      Result<String> result0 = Result.error(codeMsg0);

      //invoke method for result0
      result0.getData();
      Result<Object> result1 = Result.success((Object) null);
      String string0 = result1.getMsg();
      assertNull(string0);
  }
  @Test(timeout = 4000)
  public void test_setCode_5()  throws Throwable  {
      //caseID:3adf6902078fc657f6b92e4db4166f07
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1).when(codeMsg0).getCode();
      doReturn("2UN})iZ--9]Sl%lCb").when(codeMsg0).getMsg();
      Result.error(codeMsg0);
      Result<Object> result0 = Result.success((Object) "500101");

      //invoke method for result0
      result0.getMsg();

      //invoke method for result0
      result0.setCode(151);

      //invoke method for result0
      assertEquals(151, result0.getCode());
  }}
