/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.jesper.seckill.result;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.jesper.seckill.result.CodeMsg;
import com.jesper.seckill.result.Result;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Result_SSTest extends Result_SSTest_scaffolding {
// allCoveredLines:[13, 20, 23, 24, 25, 32, 33, 34, 35, 37, 41, 44, 45, 47, 50, 51, 53, 56, 57]

  @Test(timeout = 4000)
  public void test_getCode_0()  throws Throwable  {
      //caseID:4f3befbc720c69e16408685bc0d1e687
      //CoveredLines: [20, 32, 33, 34, 35, 37, 41]
      //Assert: assertEquals(1, method_result);
      
      //mock codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1).when(codeMsg0).getCode();
      doReturn("").when(codeMsg0).getMsg();
      Result<String> result0 = Result.error(codeMsg0);
      
      //Call method: getCode
      int int0 = result0.getCode();
      
      //Test Result Assert
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test_getData_1()  throws Throwable  {
      //caseID:a07279b27a1e7221b9266e2241cf18a9
      //CoveredLines: [20, 32, 33, 34, 35, 37, 53]
      //Assert: assertEquals((-1), result0.getCode());
      
      //mock codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((-1)).when(codeMsg0).getCode();
      doReturn("Q{xl$\"cPm.tDcnB").when(codeMsg0).getMsg();
      Result<Object> result0 = Result.error(codeMsg0);
      
      //Call method: getData
      result0.getData();
      
      //Test Result Assert
      assertEquals((-1), result0.getCode());
  }

  @Test(timeout = 4000)
  public void test_getMsg_2()  throws Throwable  {
      //caseID:6daea7003995c3f438f0b0c6312c69d8
      //CoveredLines: [20, 32, 33, 34, 35, 37, 47]
      //Assert: assertNull(method_result);
      
      //mock codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Result<Integer> result0 = Result.error(codeMsg0);
      
      //Call method: getMsg
      String string0 = result0.getMsg();
      
      //Test Result Assert
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test_setCode_3()  throws Throwable  {
      //caseID:819cd07d25c55ed5311693bf224e415e
      //CoveredLines: [13, 23, 24, 25, 44, 45]
      //Input_0_int: 0
      
      Result<Object> result0 = Result.success((Object) "zCWU*'at&^[f+\"vO2_");
      
      //Call method: setCode
      result0.setCode(0);
      
      //Test Result Assert
      assertEquals(0, result0.getCode());
  }

  @Test(timeout = 4000)
  public void test_setCode_4()  throws Throwable  {
      //caseID:d151024a57b1f147ae55bb126be5c236
      //CoveredLines: [20, 32, 33, 34, 35, 37, 44, 45]
      //Input_0_int: 
      
      //mock codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Result<Object> result0 = Result.error(codeMsg0);
      
      //Call method: setCode
      result0.setCode((-1));
      
      //Test Result Assert
      assertEquals((-1), result0.getCode());
  }

  @Test(timeout = 4000)
  public void test_setData_5()  throws Throwable  {
      //caseID:aedaa53fc3e511fd0409afc573ac7873
      //CoveredLines: [20, 32, 33, 37, 56, 57]
      //Input_0_Object: "1.0"
      
      Result<Object> result0 = Result.error((CodeMsg) null);
      
      //Call method: setData
      result0.setData("1.0");
      
      //Test Result Assert
      assertEquals(0, result0.getCode());
  }

  @Test(timeout = 4000)
  public void test_setData_6()  throws Throwable  {
      //caseID:b7ee03964abaa28931694c4463ad62b5
      //CoveredLines: [13, 23, 24, 25, 56, 57]
      //Input_0_Object: object0
      
      Object object0 = new Object();
      Result<Object> result0 = Result.success(object0);
      
      //Call method: setData
      result0.setData(object0);
      
      //Test Result Assert
      assertNull(result0.getMsg());
  }

  @Test(timeout = 4000)
  public void test_setMsg_7()  throws Throwable  {
      //caseID:344d5f68c68b801ce3155e43df722d0f
      //CoveredLines: [20, 32, 33, 34, 35, 37, 50, 51]
      //Input_0_String: "8[w(`gi\"L"
      
      //mock codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Result<Object> result0 = Result.error(codeMsg0);
      
      //Call method: setMsg
      result0.setMsg("8[w(`gi\"L");
      
      //Test Result Assert
      assertEquals(0, result0.getCode());
  }
}
