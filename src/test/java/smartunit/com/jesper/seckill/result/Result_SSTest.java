/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.jesper.seckill.result;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.jesper.seckill.result.CodeMsg;
import com.jesper.seckill.result.Result;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Result_SSTest extends Result_SSTest_scaffolding {

  @Test(timeout = 4000)
  public void test_setCode_0()  throws Throwable  {
      //caseID:f3db7263947b4a69352310d314c5c5c4

      //prepare data for codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1756).when(codeMsg0).getCode();
      doReturn("com.jesper.seckill.result.Result").when(codeMsg0).getMsg();
      Result<Integer> result0 = Result.error(codeMsg0);

      //invoke method for result0
      result0.setCode(500501);

      //invoke method for result0
      assertEquals(500501, result0.getCode());
  }
  @Test(timeout = 4000)
  public void test_setMsg_1()  throws Throwable  {
      //caseID:79090ecc250ea0dd1e321fc0b2467f2a

      //prepare data for codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(0).when(codeMsg0).getCode();
      doReturn("1").when(codeMsg0).getMsg();
      Result<Integer> result0 = Result.error(codeMsg0);

      //invoke method for result0
      result0.setMsg("com.jesper.seckill.result.Result");

      //invoke method for result0
      assertEquals(0, result0.getCode());
  }
  @Test(timeout = 4000)
  public void test_setData_2()  throws Throwable  {
      //caseID:420891c18efe68b6aaf56d52fde13baa
      Result<Object> result0 = Result.error((CodeMsg) null);

      //invoke method for result0
      result0.getData();
      Object object0 = new Object();
      Result<Object> result1 = Result.success(object0);
      Object object1 = result1.getData();
      result0.setData(object1);
      assertSame(object0, object1);
  }
  @Test(timeout = 4000)
  public void test_getCode_3()  throws Throwable  {
      //caseID:7a2a5c039c1dde1cb818fef4fd09361b

      //prepare data for codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((-1)).when(codeMsg0).getCode();
      doReturn("com.jesper.seckill.result.Result").when(codeMsg0).getMsg();
      Result<Object> result0 = Result.error(codeMsg0);

      //invoke method for result0
      result0.getData();
      Result.success((Object) null);
      int int0 = result0.getCode();
      assertEquals((-1), int0);
  }
  @Test(timeout = 4000)
  public void test_getMsg_4()  throws Throwable  {
      //caseID:d6912148be920f088f564627c1d45f41
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(0).when(codeMsg0).getCode();
      doReturn("PN`kvH!rP<Aw|").when(codeMsg0).getMsg();
      Result.error(codeMsg0);
      Result<String> result0 = Result.success("CodeMsg [code=");

      //invoke method for result0
      result0.getData();
      String string0 = result0.getMsg();
      assertNull(string0);
  }
  @Test(timeout = 4000)
  public void test_setData_5()  throws Throwable  {
      //caseID:417e163a0379c2c78616991991a633e6

      //prepare data for codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(500214).when(codeMsg0).getCode();
      doReturn("1.0").when(codeMsg0).getMsg();
      Result<Object> result0 = Result.error(codeMsg0);

      //invoke method for result0
      result0.getData();
      Object object0 = new Object();
      Result<Object> result1 = Result.success(object0);
      Object object1 = result1.getData();

      //invoke method for result0
      result0.setData(object1);

      //invoke method for result0
      assertEquals(500214, result0.getCode());
  }}
