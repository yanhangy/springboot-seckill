/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.jesper.seckill.result;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.jesper.seckill.result.CodeMsg;
import com.jesper.seckill.result.Result;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Result_SSTest extends Result_SSTest_scaffolding {

  @Test(timeout = 4000)
  public void test_getCode_0()  throws Throwable  {
      //caseID:8ca9370c2aee75e5d3e61edbf8988052

      //prepare data for codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(500104).when(codeMsg0).getCode();
      doReturn("").when(codeMsg0).getMsg();
      Result<Integer> result0 = Result.error(codeMsg0);
      int int0 = result0.getCode();
      assertEquals(500104, int0);
  }
  @Test(timeout = 4000)
  public void test_setData_1()  throws Throwable  {
      //caseID:4749d85da194e7b91d3d3e0171ab4b29
      Integer integer0 = new Integer(0);
      Result.success(integer0);
      Result<Object> result0 = Result.error((CodeMsg) null);
      Object object0 = new Object();

      //invoke method for result0
      result0.setData(object0);

      //invoke method for result0
      assertNull(result0.getMsg());
  }
  @Test(timeout = 4000)
  public void test_getMsg_2()  throws Throwable  {
      //caseID:aa967e42bbf0839c85207a08b18cff07
      Integer integer0 = new Integer((-1));
      Result.success((Object) integer0);

      //prepare data for codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1930).when(codeMsg0).getCode();
      doReturn("3*1HgOB7zQZjB7jE").when(codeMsg0).getMsg();
      Result<String> result0 = Result.error(codeMsg0);

      //invoke method for result0
      result0.getData();
      String string0 = result0.getMsg();
      assertNotNull(string0);

      //invoke method for result0
      assertEquals(1930, result0.getCode());
  }
  @Test(timeout = 4000)
  public void test_setMsg_3()  throws Throwable  {
      //caseID:eb8db7e9f29140fc33c50b108d3f6427
      Integer integer0 = new Integer((-1));
      Result.success(integer0);

      //prepare data for codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((-1)).when(codeMsg0).getCode();
      doReturn("1.0").when(codeMsg0).getMsg();
      Result<String> result0 = Result.error(codeMsg0);

      //invoke method for result0
      result0.getData();

      //invoke method for result0
      result0.setMsg("e?0LH.@!)A4^q]_O=");

      //invoke method for result0
      assertEquals((-1), result0.getCode());
  }
  @Test(timeout = 4000)
  public void test_setCode_4()  throws Throwable  {
      //caseID:6d6b87216eabb5c8e9c029502509f9da

      //prepare data for codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(500215).when(codeMsg0).getCode();
      doReturn("").when(codeMsg0).getMsg();
      Result<Object> result0 = Result.error(codeMsg0);

      //invoke method for result0
      result0.getData();
      Result<Object> result1 = Result.success((Object) null);

      //invoke method for result1
      result1.setCode(2175);

      //invoke method for result1
      assertEquals(2175, result1.getCode());
  }
  @Test(timeout = 4000)
  public void test_setData_5()  throws Throwable  {
      //caseID:4a9b15a6a168e18164664cfbd1e22b77

      //prepare data for codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1).when(codeMsg0).getCode();
      doReturn("?oO)w4Zr").when(codeMsg0).getMsg();
      Result<Object> result0 = Result.error(codeMsg0);

      //invoke method for result0
      result0.getData();
      Result.success((Object) null);

      //invoke method for result0
      result0.setData((Object) null);

      //invoke method for result0
      assertEquals(1, result0.getCode());
  }}
