/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.jesper.seckill.result;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.jesper.seckill.result.CodeMsg;
import com.jesper.seckill.result.Result;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Result_SSTest extends Result_SSTest_scaffolding {

  @Test(timeout = 4000)
  public void test_getMsg_0()  throws Throwable  {
      //caseID:e84e95ca2b550b2842e7d2d198a8f8f1
      Result<Object> result0 = Result.error((CodeMsg) null);
      String string0 = result0.getMsg();
      assertNull(string0);
  }
  @Test(timeout = 4000)
  public void test_setCode_1()  throws Throwable  {
      //caseID:718d6209c78e4d81d04ff24414727573
      Object object0 = new Object();
      Result<Object> result0 = Result.success(object0);

      //invoke method for result0
      result0.setCode((-1));

      //invoke method for result0
      assertEquals((-1), result0.getCode());
  }
  @Test(timeout = 4000)
  public void test_getCode_2()  throws Throwable  {
      //caseID:7da13fcfe3d047b8397b9ba319551339
      Integer integer0 = new Integer(500400);
      Result.success((Object) integer0);

      //prepare data for codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((-282)).when(codeMsg0).getCode();
      doReturn("").when(codeMsg0).getMsg();
      Result<String> result0 = Result.error(codeMsg0);

      //invoke method for result0
      result0.getData();
      int int0 = result0.getCode();
      assertEquals((-282), int0);
  }
  @Test(timeout = 4000)
  public void test_setMsg_3()  throws Throwable  {
      //caseID:523cdcbe7d2b22ee157a5a7b82cc5df8

      //prepare data for codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((-1)).when(codeMsg0).getCode();
      doReturn("com.jesper.seckill.result.Result").when(codeMsg0).getMsg();
      Result<Integer> result0 = Result.error(codeMsg0);

      //invoke method for result0
      result0.getData();
      Result.success((Object) null);

      //invoke method for result0
      result0.setMsg("1.0");

      //invoke method for result0
      assertEquals((-1), result0.getCode());
  }
  @Test(timeout = 4000)
  public void test_setData_4()  throws Throwable  {
      //caseID:492cd4aaec668dda1efcb3ae00d463d6

      //prepare data for codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((-1)).when(codeMsg0).getCode();
      doReturn("]").when(codeMsg0).getMsg();
      Result<Object> result0 = Result.error(codeMsg0);

      //invoke method for result0
      result0.getData();
      Result<String> result1 = Result.success("");

      //invoke method for result1
      result1.getMsg();

      //invoke method for result0
      result0.setData((Object) null);

      //invoke method for result0
      assertEquals((-1), result0.getCode());
  }}
