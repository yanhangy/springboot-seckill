/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.jesper.seckill.result;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.jesper.seckill.result.CodeMsg;
import com.jesper.seckill.result.Result;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Result_SSTest extends Result_SSTest_scaffolding {

  @Test(timeout = 4000)
  public void test_setCode_0()  throws Throwable  {
      //caseID:b5e4260a1dcdaac700eac3302c8d2077
      Object object0 = new Object();
      Result<Object> result0 = Result.success(object0);

      //invoke method for result0
      result0.setCode(0);

      //invoke method for result0
      assertEquals(0, result0.getCode());
  }
  @Test(timeout = 4000)
  public void test_setMsg_1()  throws Throwable  {
      //caseID:655b544c0fbb4126165f5b0e4b0b4ae3
      Result<String> result0 = Result.success(")");

      //invoke method for result0
      result0.setMsg("BdI?}&1*");

      //invoke method for result0
      assertEquals("BdI?}&1*", result0.getMsg());
  }
  @Test(timeout = 4000)
  public void test_setData_2()  throws Throwable  {
      //caseID:3d9cbe477a84c4a6b0ddfca47d57984a
      Object object0 = new Object();
      Result<Object> result0 = Result.success(object0);
      Object object1 = result0.getData();

      //invoke method for result0
      result0.setData(object1);

      //invoke method for result0
      assertEquals(0, result0.getCode());
  }
  @Test(timeout = 4000)
  public void test_getMsg_3()  throws Throwable  {
      //caseID:edf280c0ada88a6b9a31af943a70dede
      Result<String> result0 = Result.success("/ESb[~a");
      Result<Object> result1 = Result.error((CodeMsg) null);

      //invoke method for result1
      result1.getData();
      String string0 = result0.getMsg();
      assertNull(string0);
  }
  @Test(timeout = 4000)
  public void test_getMsg_4()  throws Throwable  {
      //caseID:ef13b708411dfedf5b94847e590eb300

      //prepare data for codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1).when(codeMsg0).getCode();
      doReturn("1.0").when(codeMsg0).getMsg();
      Result<Object> result0 = Result.error(codeMsg0);
      Result<Object> result1 = Result.success((Object) "aAv*bPO9(k@");

      //invoke method for result1
      result1.getData();
      String string0 = result0.getMsg();
      assertNotNull(string0);

      //invoke method for result0
      assertEquals(1, result0.getCode());
  }
  @Test(timeout = 4000)
  public void test_getCode_5()  throws Throwable  {
      //caseID:c0726a98039413f82d9b50a5b85c8072

      //prepare data for codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(174).when(codeMsg0).getCode();
      doReturn("1").when(codeMsg0).getMsg();
      Result<Integer> result0 = Result.error(codeMsg0);
      Result<Object> result1 = Result.success((Object) result0);

      //invoke method for result1
      result1.getData();
      int int0 = result1.getCode();
      assertEquals(0, int0);
  }}
