/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.jesper.seckill.result;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.jesper.seckill.result.CodeMsg;
import com.jesper.seckill.result.Result;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Result_SSTest extends Result_SSTest_scaffolding {

  @Test(timeout = 4000)
  public void test_getCode_0()  throws Throwable  {
      //caseID:944d67e2a9c69b276a4dc3e0f7fca5d8

      //prepare data for codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1612).when(codeMsg0).getCode();
      doReturn("1.0").when(codeMsg0).getMsg();
      Result<Object> result0 = Result.error(codeMsg0);
      int int0 = result0.getCode();
      assertEquals(1612, int0);
  }
  @Test(timeout = 4000)
  public void test_setData_1()  throws Throwable  {
      //caseID:dbb6d0dfeec520496c0138307cff89a6
      Result.error((CodeMsg) null);
      Object object0 = new Object();
      Result<Object> result0 = Result.success(object0);

      //invoke method for result0
      result0.getData();

      //invoke method for result0
      result0.setData(object0);

      //invoke method for result0
      assertNull(result0.getMsg());
  }
  @Test(timeout = 4000)
  public void test_setData_2()  throws Throwable  {
      //caseID:d1fdd335a38e6cc353407ef196471b19

      //prepare data for codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(0).when(codeMsg0).getCode();
      doReturn("1.0").when(codeMsg0).getMsg();
      Result<String> result0 = Result.error(codeMsg0);

      //invoke method for result0
      result0.getData();
      Result.success((Object) null);

      //invoke method for result0
      result0.setData("1");

      //invoke method for result0
      assertEquals(0, result0.getCode());
  }
  @Test(timeout = 4000)
  public void test_setMsg_3()  throws Throwable  {
      //caseID:cdd03c0d0bfd9d397ad3fffeaeebd77d
      Integer integer0 = new Integer(131);
      Result<Integer> result0 = Result.success(integer0);

      //prepare data for codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(0).when(codeMsg0).getCode();
      doReturn("cXP`Pg!Um=A7+l^").when(codeMsg0).getMsg();
      Result<Object> result1 = Result.error(codeMsg0);

      //invoke method for result1
      result1.getData();

      //invoke method for result0
      result0.setMsg("com.jesper.seckill.result.Result");

      //invoke method for result0
      assertEquals("com.jesper.seckill.result.Result", result0.getMsg());
  }
  @Test(timeout = 4000)
  public void test_setCode_4()  throws Throwable  {
      //caseID:cbb0c9d483cebd341f8b8d0cde343bc2

      //prepare data for codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1).when(codeMsg0).getCode();
      doReturn("LE;^^").when(codeMsg0).getMsg();
      Result<Object> result0 = Result.error(codeMsg0);
      Result<String> result1 = Result.success("1");

      //invoke method for result1
      result1.getMsg();

      //invoke method for result0
      result0.setCode((-1));

      //invoke method for result0
      assertEquals((-1), result0.getCode());
  }}
