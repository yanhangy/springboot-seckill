/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.jesper.seckill.result;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.jesper.seckill.result.CodeMsg;
import com.jesper.seckill.result.Result;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Result_SSTest extends Result_SSTest_scaffolding {
// allCoveredLines:[13, 20, 23, 24, 25, 32, 33, 34, 35, 37, 41, 44, 45, 47, 50, 51, 53, 56, 57]

  @Test(timeout = 4000)
  public void test_getCode_0()  throws Throwable  {
      //caseID:bcc922c74e2b5e3c58a5a00cba08d7b2
      //CoveredLines: [13, 23, 24, 25, 41]
      //Assert: assertEquals(0, method_result);
      
      Result<String> result0 = Result.success("");
      
      //Call method: getCode
      int int0 = result0.getCode();
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_getData_1()  throws Throwable  {
      //caseID:94c4ceb409c16be6d6e0d971910048bc
      //CoveredLines: [20, 32, 33, 34, 35, 37, 53]
      //Assert: assertNull(method_result);
      
      //mock codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Result<Object> result0 = Result.error(codeMsg0);
      
      //Call method: getData
      Object object0 = result0.getData();
      
      //Test Result Assert
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test_getMsg_2()  throws Throwable  {
      //caseID:02da267f79c4a789b35663bde2550aba
      //CoveredLines: [20, 32, 33, 37, 47]
      //Assert: assertNull(method_result);
      
      Result<Object> result0 = Result.error((CodeMsg) null);
      
      //Call method: getMsg
      String string0 = result0.getMsg();
      
      //Test Result Assert
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test_getMsg_3()  throws Throwable  {
      //caseID:fbce463b259e3cf6286d4af84c2b3154
      //CoveredLines: [20, 32, 33, 34, 35, 37, 47]
      //Assert: assertNull(method_result);
      
      //mock codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Result<Object> result0 = Result.error(codeMsg0);
      
      //Call method: getMsg
      String string0 = result0.getMsg();
      
      //Test Result Assert
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test_setCode_4()  throws Throwable  {
      //caseID:f4b415f9269fd032c39be4940b3c9486
      //CoveredLines: [13, 23, 24, 25, 44, 45]
      //Input_0_int: 0
      
      Result<String> result0 = Result.success("1");
      
      //Call method: setCode
      result0.setCode(0);
      
      //Test Result Assert
      assertEquals(0, result0.getCode());
  }

  @Test(timeout = 4000)
  public void test_setData_5()  throws Throwable  {
      //caseID:86a90084bce67f23a8a8afe5c7c78201
      //CoveredLines: [13, 23, 24, 25, 56, 57]
      //Input_0_Object: ""
      
      Object object0 = new Object();
      Result<Object> result0 = Result.success(object0);
      
      //Call method: setData
      result0.setData("");
      
      //Test Result Assert
      assertEquals(0, result0.getCode());
  }

  @Test(timeout = 4000)
  public void test_setMsg_6()  throws Throwable  {
      //caseID:436f8bed9dc9a43f9bfb81851270dca7
      //CoveredLines: [13, 23, 24, 25, 50, 51]
      //Input_0_String: ""
      
      Object object0 = new Object();
      Result<Object> result0 = Result.success(object0);
      
      //Call method: setMsg
      result0.setMsg("");
      
      //Test Result Assert
      assertEquals("", result0.getMsg());
  }
}
