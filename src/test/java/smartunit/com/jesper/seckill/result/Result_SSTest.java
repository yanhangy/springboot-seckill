/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.jesper.seckill.result;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.jesper.seckill.result.CodeMsg;
import com.jesper.seckill.result.Result;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Result_SSTest extends Result_SSTest_scaffolding {

  @Test(timeout = 4000)
  public void test_setCode_0()  throws Throwable  {
      //caseID:9336f0b83226e49874534ebb7f9c7ebb
      Result<Object> result0 = Result.error((CodeMsg) null);

      //invoke method for result0
      result0.setCode(500210);

      //invoke method for result0
      assertEquals(500210, result0.getCode());
  }
  @Test(timeout = 4000)
  public void test_getCode_1()  throws Throwable  {
      //caseID:6fb9dece044e25b27114c4f89d27458a

      //prepare data for codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(0).when(codeMsg0).getCode();
      doReturn("\u670D\u52A1\u7AEF\u5F02\u5E38").when(codeMsg0).getMsg();
      Result<Object> result0 = Result.error(codeMsg0);
      int int0 = result0.getCode();
      assertEquals(0, int0);
  }
  @Test(timeout = 4000)
  public void test_setData_2()  throws Throwable  {
      //caseID:4ea2f9291a403f00b2a1882762443bdc

      //prepare data for codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(0).when(codeMsg0).getCode();
      doReturn("1.0").when(codeMsg0).getMsg();
      Result<String> result0 = Result.error(codeMsg0);

      //invoke method for result0
      result0.setData("cbzSRC&VS]M)[]UA");

      //invoke method for result0
      assertEquals(0, result0.getCode());
  }
  @Test(timeout = 4000)
  public void test_getMsg_3()  throws Throwable  {
      //caseID:76c87b578cdbe25295b51097891b8056

      //prepare data for codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(0).when(codeMsg0).getCode();
      doReturn("1.0").when(codeMsg0).getMsg();
      Result<Object> result0 = Result.error(codeMsg0);

      //invoke method for result0
      result0.getData();
      Result<Object> result1 = Result.success((Object) null);
      String string0 = result1.getMsg();
      assertNull(string0);
  }
  @Test(timeout = 4000)
  public void test_setCode_4()  throws Throwable  {
      //caseID:49536ea135e27e3f7dd0046cc05db3ef
      Integer integer0 = new Integer(0);
      Result<Integer> result0 = Result.success(integer0);

      //prepare data for codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((-1)).when(codeMsg0).getCode();
      doReturn("").when(codeMsg0).getMsg();
      Result<Object> result1 = Result.error(codeMsg0);

      //invoke method for result1
      result1.getData();

      //invoke method for result0
      result0.setCode(209);

      //invoke method for result0
      assertEquals(209, result0.getCode());
  }
  @Test(timeout = 4000)
  public void test_setMsg_5()  throws Throwable  {
      //caseID:3b9036ad004f069f345cb0cdb09f5c57

      //prepare data for codeMsg0
      CodeMsg codeMsg0 = mock(CodeMsg.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((-1)).when(codeMsg0).getCode();
      doReturn("\u624B\u673A\u53F7\u4E0D\u5B58\u5728").when(codeMsg0).getMsg();
      Result<String> result0 = Result.error(codeMsg0);

      //invoke method for result0
      assertEquals((-1), result0.getCode());
      
      Result<String> result1 = Result.success("com.jesper.seckill.result.Result");

      //invoke method for result1
      result1.getData();

      //invoke method for result1
      result1.setMsg("1.0");

      //invoke method for result0

      //invoke method for result1
      assertNotSame(result1, result0);
  }}
