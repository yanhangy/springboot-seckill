/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.jesper.seckill.rabbitmq;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.jesper.seckill.bean.User;
import com.jesper.seckill.rabbitmq.SeckillMessage;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class SeckillMessage_SSTest extends SeckillMessage_SSTest_scaffolding {
// allCoveredLines:[10, 16, 20, 21, 24, 28, 29]

  @Test(timeout = 4000)
  public void test_getGoodsId_0()  throws Throwable  {
      //caseID:0bf558b53e6e9e284aa8f6e60df4b2c6
      //CoveredLines: [10, 24]
      //Assert: assertEquals(0L, method_result);
      
      SeckillMessage seckillMessage0 = new SeckillMessage();
      
      //Call method: getGoodsId
      long long0 = seckillMessage0.getGoodsId();
      
      //Test Result Assert
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test_getUser_1()  throws Throwable  {
      //caseID:4fef348f52851c6f248ad039fa12e7c0
      //CoveredLines: [10, 16]
      //Assert: assertNull(method_result);
      
      SeckillMessage seckillMessage0 = new SeckillMessage();
      
      //Call method: getUser
      User user0 = seckillMessage0.getUser();
      
      //Test Result Assert
      assertNull(user0);
  }

  @Test(timeout = 4000)
  public void test_setGoodsId_2()  throws Throwable  {
      //caseID:32f929b267de9236d8902b5af108886b
      //CoveredLines: [10, 28, 29]
      //Input_0_long: 1338L
      
      SeckillMessage seckillMessage0 = new SeckillMessage();
      
      //Call method: setGoodsId
      seckillMessage0.setGoodsId(1338L);
      
      //Test Result Assert
      assertEquals(1338L, seckillMessage0.getGoodsId());
  }

  @Test(timeout = 4000)
  public void test_setUser_3()  throws Throwable  {
      //caseID:f939df263963016eabc7bf92ccd68f70
      //CoveredLines: [10, 20, 21]
      //Input_0_User: {}
      
      SeckillMessage seckillMessage0 = new SeckillMessage();
      //mock user0
      User user0 = mock(User.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: setUser
      seckillMessage0.setUser(user0);
      
      //Test Result Assert
      assertEquals(0L, seckillMessage0.getGoodsId());
  }
}
