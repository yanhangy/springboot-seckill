/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.jesper.seckill.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.jesper.seckill.bean.OrderInfo;
import com.jesper.seckill.bean.User;
import com.jesper.seckill.controller.OrderController;
import com.jesper.seckill.result.Result;
import com.jesper.seckill.service.GoodsService;
import com.jesper.seckill.service.OrderService;
import com.jesper.seckill.vo.OrderDetailVo;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;
import org.springframework.ui.Model;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class OrderController_SSTest extends OrderController_SSTest_scaffolding {
// allCoveredLines:[25, 43, 44, 46, 47, 48, 50, 51, 52, 53, 54, 55]

  @Test(timeout = 4000)
  public void test_info_0()  throws Throwable  {
      //caseID:c4473abb5f678aa44c1aeb32e68d59b9
      //CoveredLines: [25, 43, 44]
      //Input_0_Model: {}
      //Input_1_User: null
      //Input_2_long: 0L
      //Assert: assertEquals(500210, method_result.getCode());
      
      OrderController orderController0 = new OrderController();
      //mock model0
      Model model0 = mock(Model.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: info
      Result<OrderDetailVo> result0 = orderController0.info(model0, (User) null, 0L);
      
      //Test Result Assert
      assertEquals(500210, result0.getCode());
  }

  @Test(timeout = 4000)
  public void test_info_1()  throws Throwable  {
      //caseID:0c8ed55f6d50ec0bdd19379df87a5db8
      //CoveredLines: [25, 43, 46, 47, 48]
      //Input_0_Model: {}
      //Input_1_User: {}
      //Input_2_long: 3306L
      //Assert: assertEquals(500400, method_result.getCode());
      
      OrderController orderController0 = new OrderController();
      //mock orderService0
      OrderService orderService0 = mock(OrderService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) OrderController.class, orderController0, "orderService", (Object) orderService0);
      //mock model0
      Model model0 = mock(Model.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock user0
      User user0 = mock(User.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: info
      Result<OrderDetailVo> result0 = orderController0.info(model0, user0, 3306L);
      
      //Test Result Assert
      assertEquals(500400, result0.getCode());
  }

  @Test(timeout = 4000)
  public void test_info_2()  throws Throwable  {
      //caseID:80825fd2e1c6556f28fcaa460e72074a
      //CoveredLines: [25, 43, 46, 47, 50, 51, 52, 53, 54, 55]
      //Input_0_Model: {}
      //Input_1_User: {}
      //Input_2_long: 777L
      //Assert: assertEquals(0, method_result.getCode());
      
      OrderController orderController0 = new OrderController();
      //mock goodsService0
      GoodsService goodsService0 = mock(GoodsService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Long long0 = new Long(1994L);
      //mock orderInfo0
      OrderInfo orderInfo0 = mock(OrderInfo.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(orderInfo0).getGoodsId();
      //mock orderService0
      OrderService orderService0 = mock(OrderService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(orderInfo0).when(orderService0).getOrderById(anyLong());
      PrivateAccess.setVariable((Class<?>) OrderController.class, orderController0, "orderService", (Object) orderService0);
      PrivateAccess.setVariable((Class<?>) OrderController.class, orderController0, "goodsService", (Object) goodsService0);
      //mock model0
      Model model0 = mock(Model.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock user0
      User user0 = mock(User.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: info
      Result<OrderDetailVo> result0 = orderController0.info(model0, user0, 777L);
      
      //Test Result Assert
      assertEquals(0, result0.getCode());
  }
}
