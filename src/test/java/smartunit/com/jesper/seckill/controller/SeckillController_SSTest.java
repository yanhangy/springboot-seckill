/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.jesper.seckill.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.google.common.util.concurrent.RateLimiter;
import com.jesper.seckill.bean.SeckillOrder;
import com.jesper.seckill.bean.User;
import com.jesper.seckill.controller.SeckillController;
import com.jesper.seckill.rabbitmq.MQSender;
import com.jesper.seckill.redis.RedisService;
import com.jesper.seckill.result.Result;
import com.jesper.seckill.service.GoodsService;
import com.jesper.seckill.service.OrderService;
import com.jesper.seckill.service.SeckillService;
import com.jesper.seckill.vo.GoodsVo;
import java.util.HashMap;
import java.util.LinkedList;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;
import org.springframework.ui.Model;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class SeckillController_SSTest extends SeckillController_SSTest_scaffolding {
// allCoveredLines:[34, 52, 55, 73, 74, 77, 78, 80, 82, 83, 84, 87, 88, 89, 90, 91, 92, 93, 97, 98, 99, 102, 103, 104, 105, 106, 114, 115, 116, 118, 119, 121, 122, 123, 134, 135, 136, 138, 139]

  @Test(timeout = 4000)
  public void test_afterPropertiesSet_0()  throws Throwable  {
      //caseID:f358d8f977a8b204b3aea8682b187a97
      //CoveredLines: [34, 52, 55, 114, 115, 118, 119, 121, 122, 123]
      
      SeckillController seckillController0 = new SeckillController();
      //mock redisService0
      RedisService redisService0 = mock(RedisService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      LinkedList<GoodsVo> linkedList0 = new LinkedList<GoodsVo>();
      //mock goodsVo0
      GoodsVo goodsVo0 = mock(GoodsVo.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      linkedList0.add(goodsVo0);
      //mock goodsService0
      GoodsService goodsService0 = mock(GoodsService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(goodsService0).listGoodsVo();
      PrivateAccess.setVariable((Class<?>) SeckillController.class, seckillController0, "goodsService", (Object) goodsService0);
      PrivateAccess.setVariable((Class<?>) SeckillController.class, seckillController0, "redisService", (Object) redisService0);
      
      //Call method: afterPropertiesSet
      seckillController0.afterPropertiesSet();
  }

  @Test(timeout = 4000)
  public void test_list_1()  throws Throwable  {
      //caseID:38d3e170361297157535ed6fb91d2871
      //CoveredLines: [34, 52, 55, 73, 74]
      //Input_0_Model: {}
      //Input_1_User: {}
      //Input_2_long: 3492L
      //Assert: assertEquals("\u8BBF\u95EE\u9AD8\u5CF0\u671F\uFF0C\u8BF7\u7A0D\u7B49\uFF01", method_result.getMsg());
      
      SeckillController seckillController0 = new SeckillController();
      //mock rateLimiter0
      RateLimiter rateLimiter0 = mock(RateLimiter.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) SeckillController.class, seckillController0, "rateLimiter", (Object) rateLimiter0);
      //mock model0
      Model model0 = mock(Model.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock user0
      User user0 = mock(User.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: list
      Result<Integer> result0 = seckillController0.list(model0, user0, 3492L);
      
      //Test Result Assert
      assertEquals("\u8BBF\u95EE\u9AD8\u5CF0\u671F\uFF0C\u8BF7\u7A0D\u7B49\uFF01", result0.getMsg());
  }

  @Test(timeout = 4000)
  public void test_list_2()  throws Throwable  {
      //caseID:6b906c012d0986a7d4dc3de4db79ff6b
      //CoveredLines: [34, 52, 55, 73, 77, 78]
      //Input_0_Model: {}
      //Input_1_User: null
      //Input_2_long: 
      //Assert: assertEquals("Session\u4E0D\u5B58\u5728\u6216\u8005\u5DF2\u7ECF\u5931\u6548", method_result.getMsg());
      
      SeckillController seckillController0 = new SeckillController();
      //mock model0
      Model model0 = mock(Model.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: list
      Result<Integer> result0 = seckillController0.list(model0, (User) null, (-1L));
      
      //Test Result Assert
      assertEquals("Session\u4E0D\u5B58\u5728\u6216\u8005\u5DF2\u7ECF\u5931\u6548", result0.getMsg());
  }

  @Test(timeout = 4000)
  public void test_list_3()  throws Throwable  {
      //caseID:50445ddcaa5585321323b1a8a0cae871
      //CoveredLines: [34, 52, 55, 73, 77, 80, 82, 83, 84]
      //Input_0_Model: {addAttribute=model0}
      //Input_1_User: {}
      //Input_2_long: 0L
      //Assert: assertEquals("\u5546\u54C1\u5DF2\u7ECF\u79D2\u6740\u5B8C\u6BD5", method_result.getMsg());
      
      SeckillController seckillController0 = new SeckillController();
      Boolean boolean0 = Boolean.TRUE;
      //mock hashMap0
      HashMap<Long, Boolean> hashMap0 = (HashMap<Long, Boolean>) mock(HashMap.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(boolean0).when(hashMap0).get(any());
      PrivateAccess.setVariable((Class<?>) SeckillController.class, seckillController0, "localOverMap", (Object) hashMap0);
      //mock model0
      Model model0 = mock(Model.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock model1
      Model model1 = mock(Model.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(model0).when(model1).addAttribute(anyString() , any());
      //mock user0
      User user0 = mock(User.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: list
      Result<Integer> result0 = seckillController0.list(model1, user0, 0L);
      
      //Test Result Assert
      assertEquals("\u5546\u54C1\u5DF2\u7ECF\u79D2\u6740\u5B8C\u6BD5", result0.getMsg());
  }

  @Test(timeout = 4000)
  public void test_list_4()  throws Throwable  {
      //caseID:4599534891bb68fb157d6900a99444fa
      //CoveredLines: [34, 52, 55, 73, 77, 80, 82, 83, 87, 88, 97, 98, 102, 103, 104, 105, 106]
      //Input_0_Model: {addAttribute=model0}
      //Input_1_User: {getId=0L}
      //Input_2_long: 1065L
      //Assert: assertEquals(0, method_result.getCode());
      
      SeckillController seckillController0 = new SeckillController();
      //mock mQSender0
      MQSender mQSender0 = mock(MQSender.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Long long0 = new Long(0L);
      //mock redisService0
      RedisService redisService0 = mock(RedisService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(redisService0).decr(any(com.jesper.seckill.redis.KeyPrefix.class) , anyString());
      //mock orderService0
      OrderService orderService0 = mock(OrderService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Boolean boolean0 = Boolean.FALSE;
      //mock hashMap0
      HashMap<Long, Boolean> hashMap0 = (HashMap<Long, Boolean>) mock(HashMap.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(boolean0).when(hashMap0).get(any());
      PrivateAccess.setVariable((Class<?>) SeckillController.class, seckillController0, "localOverMap", (Object) hashMap0);
      PrivateAccess.setVariable((Class<?>) SeckillController.class, seckillController0, "orderService", (Object) orderService0);
      PrivateAccess.setVariable((Class<?>) SeckillController.class, seckillController0, "redisService", (Object) redisService0);
      PrivateAccess.setVariable((Class<?>) SeckillController.class, seckillController0, "sender", (Object) mQSender0);
      //mock model0
      Model model0 = mock(Model.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock model1
      Model model1 = mock(Model.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(model0).when(model1).addAttribute(anyString() , any());
      //mock user0
      User user0 = mock(User.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(user0).getId();
      
      //Call method: list
      Result<Integer> result0 = seckillController0.list(model1, user0, 1065L);
      
      //Test Result Assert
      assertEquals(0, result0.getCode());
  }

  @Test(timeout = 4000)
  public void test_list_5()  throws Throwable  {
      //caseID:61109d4e4fc32c8cc48dc486cfcb8235
      //CoveredLines: [34, 52, 55, 73, 77, 80, 82, 83, 87, 88, 89, 90, 91, 92, 93, 114, 115, 116]
      //Input_0_Model: {addAttribute=model0}
      //Input_1_User: {getId=(-3201L)}
      //Input_2_long: 1000L
      //Assert: assertEquals("\u5546\u54C1\u5DF2\u7ECF\u79D2\u6740\u5B8C\u6BD5", method_result.getMsg());
      
      SeckillController seckillController0 = new SeckillController();
      Long long0 = new Long((-3201L));
      //mock redisService0
      RedisService redisService0 = mock(RedisService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(redisService0).decr(any(com.jesper.seckill.redis.KeyPrefix.class) , anyString());
      //mock goodsService0
      GoodsService goodsService0 = mock(GoodsService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Boolean boolean0 = Boolean.FALSE;
      //mock hashMap0
      HashMap<Long, Boolean> hashMap0 = (HashMap<Long, Boolean>) mock(HashMap.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(boolean0).when(hashMap0).get(any());
      PrivateAccess.setVariable((Class<?>) SeckillController.class, seckillController0, "localOverMap", (Object) hashMap0);
      PrivateAccess.setVariable((Class<?>) SeckillController.class, seckillController0, "goodsService", (Object) goodsService0);
      PrivateAccess.setVariable((Class<?>) SeckillController.class, seckillController0, "redisService", (Object) redisService0);
      //mock model0
      Model model0 = mock(Model.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock model1
      Model model1 = mock(Model.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(model0).when(model1).addAttribute(anyString() , any());
      //mock user0
      User user0 = mock(User.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(user0).getId();
      
      //Call method: list
      Result<Integer> result0 = seckillController0.list(model1, user0, 1000L);
      
      //Test Result Assert
      assertEquals("\u5546\u54C1\u5DF2\u7ECF\u79D2\u6740\u5B8C\u6BD5", result0.getMsg());
  }

  @Test(timeout = 4000)
  public void test_list_6()  throws Throwable  {
      //caseID:764d7276874b2b5162a421bbb5bcd5db
      //CoveredLines: [34, 52, 55, 73, 77, 80, 82, 83, 87, 88, 89, 90, 91, 92, 93, 114, 115, 118, 123]
      //Input_0_Model: {addAttribute=model0}
      //Input_1_User: {}
      //Input_2_long: 1000L
      //Assert: assertEquals("\u5546\u54C1\u5DF2\u7ECF\u79D2\u6740\u5B8C\u6BD5", method_result.getMsg());
      
      SeckillController seckillController0 = new SeckillController();
      Long long0 = new Long((-1948L));
      //mock redisService0
      RedisService redisService0 = mock(RedisService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0, long0).when(redisService0).decr(any(com.jesper.seckill.redis.KeyPrefix.class) , anyString());
      LinkedList<GoodsVo> linkedList0 = new LinkedList<GoodsVo>();
      //mock goodsService0
      GoodsService goodsService0 = mock(GoodsService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(goodsService0).listGoodsVo();
      Boolean boolean0 = Boolean.FALSE;
      //mock hashMap0
      HashMap<Long, Boolean> hashMap0 = (HashMap<Long, Boolean>) mock(HashMap.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(boolean0).when(hashMap0).get(any());
      doReturn(long0).when(hashMap0).put(anyLong() , anyBoolean());
      PrivateAccess.setVariable((Class<?>) SeckillController.class, seckillController0, "localOverMap", (Object) hashMap0);
      PrivateAccess.setVariable((Class<?>) SeckillController.class, seckillController0, "goodsService", (Object) goodsService0);
      PrivateAccess.setVariable((Class<?>) SeckillController.class, seckillController0, "redisService", (Object) redisService0);
      //mock model0
      Model model0 = mock(Model.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock model1
      Model model1 = mock(Model.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(model0).when(model1).addAttribute(anyString() , any());
      //mock user0
      User user0 = mock(User.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: list
      Result<Integer> result0 = seckillController0.list(model1, user0, 1000L);
      
      //Test Result Assert
      assertEquals("\u5546\u54C1\u5DF2\u7ECF\u79D2\u6740\u5B8C\u6BD5", result0.getMsg());
  }

  @Test(timeout = 4000)
  public void test_list_7()  throws Throwable  {
      //caseID:3229bd8a6d3497efa596a18d24afb0ad
      //CoveredLines: [34, 52, 55, 73, 77, 80, 82, 83, 87, 88, 89, 90, 91, 97, 98, 99, 114, 115, 118, 123]
      //Input_0_Model: {addAttribute=model0}
      //Input_1_User: {getId=(-1L)}
      //Input_2_long: 3701L
      //Assert: assertEquals("\u4E0D\u80FD\u91CD\u590D\u79D2\u6740", method_result.getMsg());
      
      SeckillController seckillController0 = new SeckillController();
      Long long0 = new Long((-1L));
      Long long1 = new Long(0L);
      //mock redisService0
      RedisService redisService0 = mock(RedisService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0, long1).when(redisService0).decr(any(com.jesper.seckill.redis.KeyPrefix.class) , anyString());
      LinkedList<GoodsVo> linkedList0 = new LinkedList<GoodsVo>();
      //mock goodsService0
      GoodsService goodsService0 = mock(GoodsService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(goodsService0).listGoodsVo();
      //mock seckillOrder0
      SeckillOrder seckillOrder0 = mock(SeckillOrder.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock orderService0
      OrderService orderService0 = mock(OrderService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(seckillOrder0).when(orderService0).getOrderByUserIdGoodsId(anyLong() , anyLong());
      Boolean boolean0 = Boolean.FALSE;
      //mock hashMap0
      HashMap<Long, Boolean> hashMap0 = (HashMap<Long, Boolean>) mock(HashMap.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(boolean0).when(hashMap0).get(any());
      PrivateAccess.setVariable((Class<?>) SeckillController.class, seckillController0, "localOverMap", (Object) hashMap0);
      PrivateAccess.setVariable((Class<?>) SeckillController.class, seckillController0, "orderService", (Object) orderService0);
      PrivateAccess.setVariable((Class<?>) SeckillController.class, seckillController0, "goodsService", (Object) goodsService0);
      PrivateAccess.setVariable((Class<?>) SeckillController.class, seckillController0, "redisService", (Object) redisService0);
      //mock model0
      Model model0 = mock(Model.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock model1
      Model model1 = mock(Model.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(model0).when(model1).addAttribute(anyString() , any());
      //mock user0
      User user0 = mock(User.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(user0).getId();
      
      //Call method: list
      Result<Integer> result0 = seckillController0.list(model1, user0, 3701L);
      
      //Test Result Assert
      assertEquals("\u4E0D\u80FD\u91CD\u590D\u79D2\u6740", result0.getMsg());
  }

  @Test(timeout = 4000)
  public void test_seckillResult_8()  throws Throwable  {
      //caseID:1b11cd404406d14933ff4dbe3b6392a6
      //CoveredLines: [34, 52, 55, 134, 135, 136]
      //Input_0_Model: {addAttribute=model0}
      //Input_1_User: null
      //Input_2_long: 0L
      //Assert: assertEquals(500210, method_result.getCode());
      
      SeckillController seckillController0 = new SeckillController();
      //mock model0
      Model model0 = mock(Model.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock model1
      Model model1 = mock(Model.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(model0).when(model1).addAttribute(nullable(java.lang.String.class) , any());
      
      //Call method: seckillResult
      Result<Long> result0 = seckillController0.seckillResult(model1, (User) null, 0L);
      
      //Test Result Assert
      assertEquals(500210, result0.getCode());
  }

  @Test(timeout = 4000)
  public void test_seckillResult_9()  throws Throwable  {
      //caseID:3dd3a252ca40758b3948c0add2e65656
      //CoveredLines: [34, 52, 55, 134, 135, 138, 139]
      //Input_0_Model: {addAttribute=model0}
      //Input_1_User: {getId=1172L}
      //Input_2_long: 0L
      //Assert: assertEquals(0, method_result.getCode());
      
      SeckillController seckillController0 = new SeckillController();
      //mock seckillService0
      SeckillService seckillService0 = mock(SeckillService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) SeckillController.class, seckillController0, "seckillService", (Object) seckillService0);
      //mock model0
      Model model0 = mock(Model.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock model1
      Model model1 = mock(Model.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(model0).when(model1).addAttribute(anyString() , any());
      Long long0 = new Long(1172L);
      //mock user0
      User user0 = mock(User.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(user0).getId();
      
      //Call method: seckillResult
      Result<Long> result0 = seckillController0.seckillResult(model1, user0, 0L);
      
      //Test Result Assert
      assertEquals(0, result0.getCode());
  }
}
