/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.jesper.seckill.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.jesper.seckill.bean.User;
import com.jesper.seckill.controller.GoodsController;
import com.jesper.seckill.redis.RedisService;
import com.jesper.seckill.result.Result;
import com.jesper.seckill.service.GoodsService;
import com.jesper.seckill.vo.GoodsDetailVo;
import com.jesper.seckill.vo.GoodsVo;
import java.util.Date;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Map;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;
import org.springframework.context.ApplicationContext;
import org.springframework.ui.ExtendedModelMap;
import org.springframework.ui.Model;
import org.thymeleaf.spring4.SpringTemplateEngine;
import org.thymeleaf.spring4.view.ThymeleafViewResolver;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class GoodsController_SSTest extends GoodsController_SSTest_scaffolding {

  @Test(timeout = 4000)
  public void test_list_0()  throws Throwable  {
      //caseID:16962d484f4d4222c43e75294a5441f8
      GoodsController goodsController0 = new GoodsController();

      //prepare data for redisService0
      RedisService redisService0 = mock(RedisService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("0").when(redisService0).get(any(com.jesper.seckill.redis.KeyPrefix.class) , anyString() , any(java.lang.Class.class));

      //invoke method for goodsController0
      PrivateAccess.setVariable((Class<?>) GoodsController.class, goodsController0, "redisService", (Object) redisService0);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Model model0 = mock(Model.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      User user0 = mock(User.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      String string0 = goodsController0.list(httpServletRequest0, httpServletResponse0, model0, user0);
      assertEquals("0", string0);
  }
  @Test(timeout = 4000)
  public void test_detail2_1()  throws Throwable  {
      //caseID:d8b8015d98777d1dabf33bda03267b7b
      GoodsController goodsController0 = new GoodsController();

      //prepare data for redisService0
      RedisService redisService0 = mock(RedisService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("wO5").when(redisService0).get(any(com.jesper.seckill.redis.KeyPrefix.class) , anyString() , any(java.lang.Class.class));

      //invoke method for goodsController0
      PrivateAccess.setVariable((Class<?>) GoodsController.class, goodsController0, "redisService", (Object) redisService0);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());

      //prepare data for model1
      Model model0 = mock(Model.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Model model1 = mock(Model.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(model0).when(model1).addAttribute(anyString() , any());
      User user0 = mock(User.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      String string0 = goodsController0.detail2(httpServletRequest0, httpServletResponse0, model1, user0, 0L);
      assertEquals("wO5", string0);
  }
  @Test(timeout = 4000)
  public void test_list_2()  throws Throwable  {
      //caseID:27d091fc1bf6cbd16ebab732bebc0c31
      GoodsController goodsController0 = new GoodsController();

      //prepare data for redisService0
      RedisService redisService0 = mock(RedisService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("").when(redisService0).get(any(com.jesper.seckill.redis.KeyPrefix.class) , anyString() , any(java.lang.Class.class));

      //prepare data for goodsService0
      LinkedList<GoodsVo> linkedList0 = new LinkedList<GoodsVo>();
      GoodsService goodsService0 = mock(GoodsService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(goodsService0).listGoodsVo();
      ApplicationContext applicationContext0 = mock(ApplicationContext.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());

      //prepare data for thymeleafViewResolver0
      SpringTemplateEngine springTemplateEngine0 = mock(SpringTemplateEngine.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("").when(springTemplateEngine0).process(anyString() , any(org.thymeleaf.context.IContext.class));
      ThymeleafViewResolver thymeleafViewResolver0 = mock(ThymeleafViewResolver.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(springTemplateEngine0).when(thymeleafViewResolver0).getTemplateEngine();

      //invoke method for goodsController0
      PrivateAccess.setVariable((Class<?>) GoodsController.class, goodsController0, "thymeleafViewResolver", (Object) thymeleafViewResolver0);

      //invoke method for goodsController0
      PrivateAccess.setVariable((Class<?>) GoodsController.class, goodsController0, "applicationContext", (Object) applicationContext0);

      //invoke method for goodsController0
      PrivateAccess.setVariable((Class<?>) GoodsController.class, goodsController0, "goodsService", (Object) goodsService0);

      //invoke method for goodsController0
      PrivateAccess.setVariable((Class<?>) GoodsController.class, goodsController0, "redisService", (Object) redisService0);

      //prepare data for httpServletRequest0
      ServletContext servletContext0 = mock(ServletContext.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Map<String, String[]> map0 = (Map<String, String[]>) mock(Map.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Locale locale0 = Locale.FRANCE;
      Enumeration<String> enumeration0 = (Enumeration<String>) mock(Enumeration.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(false).when(enumeration0).hasMoreElements();
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(enumeration0).when(httpServletRequest0).getAttributeNames();
      doReturn(locale0).when(httpServletRequest0).getLocale();
      doReturn(map0).when(httpServletRequest0).getParameterMap();
      doReturn(servletContext0).when(httpServletRequest0).getServletContext();
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());

      //prepare data for model2
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Model model0 = mock(Model.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Model model1 = mock(Model.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Model model2 = mock(Model.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(model1, model0).when(model2).addAttribute(anyString() , any());
      doReturn(hashMap0).when(model2).asMap();
      User user0 = mock(User.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      String string0 = goodsController0.list(httpServletRequest0, httpServletResponse0, model2, user0);
      assertEquals("", string0);
  }
  @Test(timeout = 4000)
  public void test_list_3()  throws Throwable  {
      //caseID:5e2f6465326192becf1d9f3ffe4fa81e
      GoodsController goodsController0 = new GoodsController();

      //prepare data for redisService0
      Boolean boolean0 = Boolean.FALSE;
      RedisService redisService0 = mock(RedisService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("").when(redisService0).get(any(com.jesper.seckill.redis.KeyPrefix.class) , anyString() , any(java.lang.Class.class));
      doReturn(boolean0).when(redisService0).set(any(com.jesper.seckill.redis.KeyPrefix.class) , anyString() , any());

      //prepare data for goodsService0
      LinkedList<GoodsVo> linkedList0 = new LinkedList<GoodsVo>();
      GoodsService goodsService0 = mock(GoodsService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(goodsService0).listGoodsVo();
      ApplicationContext applicationContext0 = mock(ApplicationContext.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());

      //prepare data for thymeleafViewResolver0
      SpringTemplateEngine springTemplateEngine0 = mock(SpringTemplateEngine.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("user").when(springTemplateEngine0).process(anyString() , any(org.thymeleaf.context.IContext.class));
      ThymeleafViewResolver thymeleafViewResolver0 = mock(ThymeleafViewResolver.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(springTemplateEngine0).when(thymeleafViewResolver0).getTemplateEngine();

      //invoke method for goodsController0
      PrivateAccess.setVariable((Class<?>) GoodsController.class, goodsController0, "thymeleafViewResolver", (Object) thymeleafViewResolver0);

      //invoke method for goodsController0
      PrivateAccess.setVariable((Class<?>) GoodsController.class, goodsController0, "applicationContext", (Object) applicationContext0);

      //invoke method for goodsController0
      PrivateAccess.setVariable((Class<?>) GoodsController.class, goodsController0, "goodsService", (Object) goodsService0);

      //invoke method for goodsController0
      PrivateAccess.setVariable((Class<?>) GoodsController.class, goodsController0, "redisService", (Object) redisService0);

      //prepare data for httpServletRequest0
      ServletContext servletContext0 = mock(ServletContext.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Map<String, String[]> map0 = (Map<String, String[]>) mock(Map.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Locale locale0 = Locale.FRANCE;
      Enumeration<String> enumeration0 = (Enumeration<String>) mock(Enumeration.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(false).when(enumeration0).hasMoreElements();
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(enumeration0).when(httpServletRequest0).getAttributeNames();
      doReturn(locale0).when(httpServletRequest0).getLocale();
      doReturn(map0).when(httpServletRequest0).getParameterMap();
      doReturn(servletContext0).when(httpServletRequest0).getServletContext();
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());

      //prepare data for model2
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Model model0 = mock(Model.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Model model1 = mock(Model.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Model model2 = mock(Model.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(model1, model0).when(model2).addAttribute(anyString() , any());
      doReturn(hashMap0).when(model2).asMap();
      User user0 = mock(User.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      String string0 = goodsController0.list(httpServletRequest0, httpServletResponse0, model2, user0);
      assertEquals("user", string0);
  }
  @Test(timeout = 4000)
  public void test_detail_4()  throws Throwable  {
      //caseID:1f3825c73f00f371a92a8a024582139c
      GoodsController goodsController0 = new GoodsController();

      //prepare data for goodsService0
      Date date0 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1995L, 1995L).when(date0).getTime();
      GoodsVo goodsVo0 = mock(GoodsVo.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(date0).when(goodsVo0).getEndDate();
      doReturn(date0).when(goodsVo0).getStartDate();
      GoodsService goodsService0 = mock(GoodsService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(goodsVo0).when(goodsService0).getGoodsVoByGoodsId(anyLong());

      //invoke method for goodsController0
      PrivateAccess.setVariable((Class<?>) GoodsController.class, goodsController0, "goodsService", (Object) goodsService0);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());

      //prepare data for model1
      Model model0 = mock(Model.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Model model1 = mock(Model.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(model0).when(model1).addAttribute(anyString() , any());
      User user0 = mock(User.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Result<GoodsDetailVo> result0 = goodsController0.detail(httpServletRequest0, httpServletResponse0, model1, user0, 1457L);
      assertEquals(0, result0.getCode());
  }
  @Test(timeout = 4000)
  public void test_detail2_5()  throws Throwable  {
      //caseID:31d3b04c285599af814923476839c1c9
      GoodsController goodsController0 = new GoodsController();

      //prepare data for redisService0
      RedisService redisService0 = mock(RedisService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("").when(redisService0).get(any(com.jesper.seckill.redis.KeyPrefix.class) , anyString() , any(java.lang.Class.class));

      //prepare data for goodsService0
      Date date0 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(3017L, 3017L).when(date0).getTime();
      GoodsVo goodsVo0 = mock(GoodsVo.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(date0).when(goodsVo0).getEndDate();
      doReturn(date0).when(goodsVo0).getStartDate();
      GoodsService goodsService0 = mock(GoodsService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(goodsVo0).when(goodsService0).getGoodsVoByGoodsId(anyLong());
      ApplicationContext applicationContext0 = mock(ApplicationContext.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());

      //prepare data for thymeleafViewResolver0
      SpringTemplateEngine springTemplateEngine0 = mock(SpringTemplateEngine.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("").when(springTemplateEngine0).process(anyString() , any(org.thymeleaf.context.IContext.class));
      ThymeleafViewResolver thymeleafViewResolver0 = mock(ThymeleafViewResolver.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(springTemplateEngine0).when(thymeleafViewResolver0).getTemplateEngine();

      //invoke method for goodsController0
      PrivateAccess.setVariable((Class<?>) GoodsController.class, goodsController0, "thymeleafViewResolver", (Object) thymeleafViewResolver0);

      //invoke method for goodsController0
      PrivateAccess.setVariable((Class<?>) GoodsController.class, goodsController0, "applicationContext", (Object) applicationContext0);

      //invoke method for goodsController0
      PrivateAccess.setVariable((Class<?>) GoodsController.class, goodsController0, "goodsService", (Object) goodsService0);

      //invoke method for goodsController0
      PrivateAccess.setVariable((Class<?>) GoodsController.class, goodsController0, "redisService", (Object) redisService0);

      //prepare data for httpServletRequest0
      ServletContext servletContext0 = mock(ServletContext.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      HashMap<String, String[]> hashMap0 = new HashMap<String, String[]>();
      Locale locale0 = Locale.ENGLISH;
      Enumeration<String> enumeration0 = (Enumeration<String>) mock(Enumeration.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(false).when(enumeration0).hasMoreElements();
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(enumeration0).when(httpServletRequest0).getAttributeNames();
      doReturn(locale0).when(httpServletRequest0).getLocale();
      doReturn(hashMap0).when(httpServletRequest0).getParameterMap();
      doReturn(servletContext0).when(httpServletRequest0).getServletContext();
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());

      //prepare data for model4
      Model model0 = mock(Model.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Model model1 = mock(Model.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Map<String, Object> map0 = (Map<String, Object>) mock(Map.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((-1)).when(map0).size();
      Model model2 = mock(Model.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Model model3 = mock(Model.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Model model4 = mock(Model.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(model1, model0, model3, model2).when(model4).addAttribute(anyString() , any());
      doReturn(map0).when(model4).asMap();
      User user0 = mock(User.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      String string0 = goodsController0.detail2(httpServletRequest0, httpServletResponse0, model4, user0, 1L);
      assertEquals("", string0);
  }
  @Test(timeout = 4000)
  public void test_detail2_6()  throws Throwable  {
      //caseID:3b30ade3ae1bb92aa16708179b06a4c3
      GoodsController goodsController0 = new GoodsController();

      //prepare data for redisService0
      Boolean boolean0 = Boolean.FALSE;
      RedisService redisService0 = mock(RedisService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("").when(redisService0).get(any(com.jesper.seckill.redis.KeyPrefix.class) , anyString() , any(java.lang.Class.class));
      doReturn(boolean0).when(redisService0).set(any(com.jesper.seckill.redis.KeyPrefix.class) , anyString() , any());

      //prepare data for goodsService0
      Date date0 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(877L, 0L).when(date0).getTime();
      GoodsVo goodsVo0 = mock(GoodsVo.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(date0).when(goodsVo0).getEndDate();
      doReturn(date0).when(goodsVo0).getStartDate();
      GoodsService goodsService0 = mock(GoodsService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(goodsVo0).when(goodsService0).getGoodsVoByGoodsId(anyLong());
      ApplicationContext applicationContext0 = mock(ApplicationContext.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());

      //prepare data for thymeleafViewResolver0
      SpringTemplateEngine springTemplateEngine0 = mock(SpringTemplateEngine.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("ognl.IntHashMap").when(springTemplateEngine0).process(anyString() , any(org.thymeleaf.context.IContext.class));
      ThymeleafViewResolver thymeleafViewResolver0 = mock(ThymeleafViewResolver.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(springTemplateEngine0).when(thymeleafViewResolver0).getTemplateEngine();

      //invoke method for goodsController0
      PrivateAccess.setVariable((Class<?>) GoodsController.class, goodsController0, "thymeleafViewResolver", (Object) thymeleafViewResolver0);

      //invoke method for goodsController0
      PrivateAccess.setVariable((Class<?>) GoodsController.class, goodsController0, "applicationContext", (Object) applicationContext0);

      //invoke method for goodsController0
      PrivateAccess.setVariable((Class<?>) GoodsController.class, goodsController0, "goodsService", (Object) goodsService0);

      //invoke method for goodsController0
      PrivateAccess.setVariable((Class<?>) GoodsController.class, goodsController0, "redisService", (Object) redisService0);

      //prepare data for httpServletRequest0
      ServletContext servletContext0 = mock(ServletContext.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Map<String, String[]> map0 = (Map<String, String[]>) mock(Map.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Locale locale0 = Locale.ROOT;
      Enumeration<String> enumeration0 = (Enumeration<String>) mock(Enumeration.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(true, true, false).when(enumeration0).hasMoreElements();
      doReturn("'", "0").when(enumeration0).nextElement();
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(enumeration0).when(httpServletRequest0).getAttributeNames();
      doReturn(locale0).when(httpServletRequest0).getLocale();
      doReturn(map0).when(httpServletRequest0).getParameterMap();
      doReturn(servletContext0).when(httpServletRequest0).getServletContext();
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      ExtendedModelMap extendedModelMap0 = new ExtendedModelMap();
      User user0 = mock(User.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      String string0 = goodsController0.detail2(httpServletRequest0, httpServletResponse0, extendedModelMap0, user0, 1237L);
      assertEquals(4, extendedModelMap0.size());
      assertEquals("ognl.IntHashMap", string0);
  }}
