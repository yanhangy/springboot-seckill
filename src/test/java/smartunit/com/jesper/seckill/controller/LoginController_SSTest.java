/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.jesper.seckill.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.jesper.seckill.controller.LoginController;
import com.jesper.seckill.result.Result;
import com.jesper.seckill.service.UserService;
import com.jesper.seckill.vo.LoginVo;
import javax.servlet.http.HttpServletResponse;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class LoginController_SSTest extends LoginController_SSTest_scaffolding {
// allCoveredLines:[22, 32, 38, 39, 40]

  @Test(timeout = 4000)
  public void test_doLogin_0()  throws Throwable  {
      //caseID:97393ccde45a01de4a4f7d650303339d
      //CoveredLines: [22, 38, 39, 40]
      //Input_0_HttpServletResponse: {}
      //Input_1_LoginVo: {}
      //Assert: assertEquals(0, method_result.getCode());
      
      LoginController loginController0 = new LoginController();
      //mock userService0
      UserService userService0 = mock(UserService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      PrivateAccess.setVariable((Class<?>) LoginController.class, loginController0, "userService", (Object) userService0);
      //mock httpServletResponse0
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      //mock loginVo0
      LoginVo loginVo0 = mock(LoginVo.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: doLogin
      Result<String> result0 = loginController0.doLogin(httpServletResponse0, loginVo0);
      
      //Test Result Assert
      assertEquals(0, result0.getCode());
  }

  @Test(timeout = 4000)
  public void test_toLogin_1()  throws Throwable  {
      //caseID:4d484bd7eca83c0a4355254e64451348
      //CoveredLines: [22, 32]
      //Assert: assertEquals("login", method_result);
      
      LoginController loginController0 = new LoginController();
      
      //Call method: toLogin
      String string0 = loginController0.toLogin();
      
      //Test Result Assert
      assertEquals("login", string0);
  }
}
